# This is a basic workflow to help you get started with Actions

name: Acquia application run security check and deployed Application

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the dev branch
  push:
    branches: [ develop,stage,master ]
    tags: 
      - 'tags*'
  pull_request:
    branches: [ develop,stage,master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  phpcs:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php_version: ['7.4']
        node-version: [15.x]


    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Install chrome browser
        run: sudo apt-get update && sudo apt-get install google-chrome-stable

      - name: Set up PHP ${{ matrix.php_version }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php_version }}

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      - name: Run phpcs with Drupal coding standards.
        run: >
          ./vendor/bin/phpcs -p -s
      - name: Run phplint with Drupal coding standards.
        run: > 
           ./vendor/bin/phplint 
      - name: Install SSH key for accessing Acquia Repository
        uses: shimataro/ssh-key-action@v2
        with:
            key: ${{ secrets.SSH_PRIVATE }}
            known_hosts: ${{ secrets.SSH_KNOWN_HOST }}
        
      # - name: Setup PHP with PECL extension & Composer v1
      #   uses: shivammathur/setup-php@v2
      #   with:
      #       php-version: '7.4'
      #       tools: composer:v2
        
      # - name: Install composer dependencies
      #   run:  composer install --prefer-dist --no-progress
        
      # - name: Get Modifield files list
      #   run: files= $(git diff-tree --no-commit-id --name-only -r ${{ github.sha }});
        
      # This will be run when code pushed into the dev env  
      - name: Trigger BLT script to deploy to Acquia Dev env
        if: ${{ startsWith(github.ref, 'refs/heads/dev'  ) }}
        run:  ./vendor/bin/blt artifact:deploy --commit-msg "Automated commit by BLT for Build" --branch $(echo ${GITHUB_REF#refs/heads/})  --ignore-dirty --no-interaction --verbose
      # This will be run when code pushed into Stage Env
      - name: Trigger BLT script to deploy to Acquia Stage ENV
        if: ${{ startsWith(github.ref, 'refs/heads/stage'  ) }}
        run:  ./vendor/bin/blt artifact:deploy --commit-msg "Automated commit by BLT for Build" --branch $(echo ${GITHUB_REF#refs/heads/})  --ignore-dirty --no-interaction --verbose
      # This will be run when Tag is created and deployed into the PROD infra
      - name: Run when tag is created and Deployed code into the Acquia ENV.
        if: ${{ startsWith(github.ref, 'refs/tags/tags') }}
        run: |
          ./vendor/bin/blt artifact:deploy --commit-msg "Creating Automated commit by BLT for Build" --tag $(echo ${GITHUB_REF#refs/tags/})  --ignore-dirty --no-interaction --verbose
          curl -OL https://github.com/acquia/cli/releases/latest/download/acli.phar
          chmod +x acli.phar
          mv acli.phar /usr/local/bin/acli
          acli login -k ${{ secrets.API_KEY }} -s ${{ secrets.API_SECRET }}
          acli api:environments:code-switch  vss2.prod  "$(echo ${GITHUB_REF#refs/tags/})"
          sleep 30s
      # Run Drush command After deployment
      - name: Run when tag is created after Deployment run Drush Commands
        if: ${{ startsWith(github.ref, 'refs/tags/tags') }}
        run: |
          ./vendor/bin/drush @vss2.prod cr -y; ./vendor/bin/drush @vss2.prod cr -l https://erefer.org; ./vendor/bin/drush @vss2.prod updb -y; ./vendor/bin/drush @vss2.prod updb -y -l https://erefer.org; ./vendor/bin/drush @vss2.prod cim -y; ./vendor/bin/drush @vss2.prod cim -y -l https://erefer.org; ./vendor/bin/drush @vss2.prod cr -y; ./vendor/bin/drush @vss2.prod cr -l https://erefer.org;
      
      - name: Excecute Drush Commands at Dev
        if: github.ref == 'refs/heads/develop'
        run : ./vendor/bin/drush @vss2.dev cr -y; ./vendor/bin/drush @vss2.dev cr -l https://dev.erefer.org; ./vendor/bin/drush @vss2.dev updb -y; ./vendor/bin/drush @vss2.dev updb -y -l https://dev.erefer.org; ./vendor/bin/drush @vss2.dev cim -y; ./vendor/bin/drush @vss2.dev cim -y -l https://dev.erefer.org; ./vendor/bin/drush @vss2.dev cr -y; ./vendor/bin/drush @vss2.dev cr -l https://dev.erefer.org;
       
      - name: Excecute Drush Commands at Stage
        if: github.ref == 'refs/heads/stage'
        run : ./vendor/bin/drush @vss2.test cr -y; ./vendor/bin/drush @vss2.test cr -l https://stage.erefer.org; ./vendor/bin/drush @vss2.test updb -y; ./vendor/bin/drush @vss2.test updb -y -l https://stage.erefer.org; ./vendor/bin/drush @vss2.test cim -y; ./vendor/bin/drush @vss2.test cim -y -l https://stage.erefer.org; ./vendor/bin/drush @vss2.test cr -y; ./vendor/bin/drush @vss2.test cr -l https://stage.erefer.org;
      - name: Use Node.js for Night watch test cases ${{ matrix.node-version }}
        if: ${{ startsWith(github.ref, 'refs/heads/develop'  ) }} || ${{ startsWith(github.ref, 'refs/heads/stage'  ) }} || ${{ startsWith(github.ref, 'refs/tags/tags'  ) }} || ${{ startsWith(github.ref, 'refs/heads/master'  ) }}
        uses: actions/setup-node@v1
        with:
          #ref: workaround
          node-version: ${{ matrix.node-version }}
      - name: Install dependency and Run tests
        run: |
          cd tests/nightwatch && npm install && npm run test:cucumber:e2e
           
      # - name: Deployment Status - Acquia BLT
      #   uses: ravsamhq/notify-slack-action@master
      #   if: always()
      #   with:
      #     status: ${{ job.status }}
      #     notification_title: '{workflow} has {status_message}'
      #     notify_when: 'success,failure,warnings'
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }} 
      - name:  Deployment Status - Acquia BLT
        uses: 8398a7/action-slack@v3
        with:
            status: ${{ job.status }}
            fields: repo,message,commit,author,action,eventName,ref,workflow # selectable (default: repo,message)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }} # required
        if: always()