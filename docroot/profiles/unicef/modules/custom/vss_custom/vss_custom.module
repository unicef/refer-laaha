<?php

/**
 * @file
 * Contains vss_custom.module.
 */

use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\file\Entity\File;
use Drupal\node\Entity\Node;
use Drupal\user\Entity\User;
use Drupal\Core\Render\Markup;
use Drupal\node\NodeInterface;
use Drupal\views\ViewExecutable;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\AlertCommand;
use Drupal\Core\Entity\EntityInterface;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\Core\Form\FormStateInterface;
use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_theme().
 */
function vss_custom_theme() {
  return [
    'exit_website' => [
      'variables' => [
        'data' => [],
      ],
    ],
    'disclaimer_pop_up_block' => [
      'variables' => [
        'content' => NULL,
      ],
      'render element' => 'children',
    ],
    'location_selector_form' => [
      'render element' => 'form',
      'template' => 'location-selector-form',
    ],
    'social_icons' => [
      'variables' => [
        'content' => NULL,
      ],
      'render element' => 'children',
    ],
    'recommended_related_content_block' => [
      'variables' => [
        'content' => NULL,
      ],
      'render element' => 'children',
    ],
    'recommended_related_content_block_wrapper' => [
      'variables' => [
        'content' => NULL,
      ],
      'render element' => 'children',
    ],
    'video_embed_iframe' => [
      'variables' => [
        'url' => '',
        'query' => [],
        'attributes' => [],
        'fragment' => '',
        'language' => '',
        'video_id' => '',
      ],
    ],
    'global_sticky_block' => [
      'variables' => [
        'content' => NULL,
        'lang_code' => '',
      ],
      'render element' => 'children',
    ],
    'homepage_hero_categories_block' => [
      'variables' => [
        'content' => NULL,
        'lang_code' => '',
      ],
      'render element' => 'children',
    ],
    'discover_block' => [
      'variables' => [
        'content' => NULL,
        'lang_code' => '',
        'content_node' => NULL,
        'is_amp' => NULL,
      ],
      'render element' => 'children',
    ],
    'hero_banner_block' => [
      'variables' => [
        'content' => [],
        'lang_code' => '',
        'category' => [],
      ],
      'render element' => 'children',
    ],
    'featured_stories_block' => [
      'variables' => [
        'content' => [],
        'lang_code' => '',
        'feature_count' => '',
      ],
      'render element' => 'children',
    ],
    'view_count_block' => [
      'variables' => [
        'content' => [],
      ],
      'render element' => 'children',
    ],
    'categories_popup_block' => [
      'variables' => [
        'content' => [],
        'lang_code' => '',
      ],
      'render element' => 'children',
    ],
    'subcategory_hero_block' => [
      'variables' => [
        'content' => [],
        'lang_code' => '',
      ],
      'render element' => 'children',
    ],
  ];
}

/**
 * Use language label for the language switcher.
 */
function vss_custom_preprocess_links__language_block(&$variables) {

  if (isset($variables['links'])) {
    // Get the language list used and provided by Drupal core.
    $language_manager = \Drupal::languageManager();
    $language_list = $language_manager::getStandardLanguageList();

    // Go through each link present in the output and change it's title.
    foreach ($variables['links'] as $link_langcode => $link) {
      $variables['links'][$link_langcode]['link']['#title'] = $language_list[$link_langcode][1];
    }
  }
}

/**
 * Use taxonomy presave to create new menu.
 */
function vss_custom_taxonomy_term_presave($term) {
  if ($term->get('vid')->target_id == 'categories' && empty($term->get('field_sub_category')->value)) {
    $term->get('domain_access')->target_id = $term->get('field_domain')->target_id;

    if (isset($term->get('path')->alias) && !empty($term->get('path')->alias)) {
      $path = 'internal:' . $term->get('path')->alias;
    }
    else {
      $path = 'internal:/' . str_replace(' ', '-', strtolower($term->get('name')->value));
    }

    if (isset($term->get('field_category_short_name')->value) && !empty($term->get('field_category_short_name')->value)) {
      $name = $term->get('field_category_short_name')->value;
    }
    else {
      $name = $term->get('name')->value;
    }

    if ($term->isNew()) {
      $menu_name = strpos($term->get('field_domain')->target_id, "iq") ? 'iraq-navigation-header-menu' : 'navigation-header-menu';
      $links = \Drupal::entityTypeManager()->getStorage('menu_link_content')->loadByProperties(
      ['field_discover_dropdown' => 1, 'menu_name' => $menu_name]);
      if ($link = reset($links)) {
        $uuid = $link->get('uuid')->value;
      }

      $menu_link = MenuLinkContent::create([
        'title' => $name,
        'link' => ['uri' => $path],
        'menu_name' => strpos($term->get('field_domain')->target_id, "iq") ? 'iraq-navigation-header-menu' : 'navigation-header-menu',
        'langcode' => 'en',
        'weight' => $term->get('weight')->value,
        'expanded' => FALSE,
        'field_taxonomy_term_id' => $term->get('name')->value,
        'field_icon' => [
          'target_id' => $term->get('field_icon')->target_id,
          'alt' => $term->get('field_icon')->alt,
        ],
        'parent' => 'menu_link_content:' . $uuid,
      ]);
      $menu_link->save();
    }
    else {
      $links = \Drupal::entityTypeManager()->getStorage('menu_link_content')->loadByProperties(['field_taxonomy_term_id' => $term->get('name')->value]);
      if ($link = reset($links)) {
        if (!$link->hasTranslation($term->get('langcode')->value)) {
          $link->addTranslation($term->get('langcode')->value, ['title' => $name])->save();
        }
        else {
          $link->title->value = $name;
          $link->expanded = TRUE;
          $link->field_taxonomy_term_id = $term->get('name')->value;
          $link->link->uri = $path;
          $link->langcode->value = $term->get('langcode')->value;
          $link->weight->value = $term->get('weight')->value;
          $link->field_icon->target_id = $term->get('field_icon')->target_id;
          $link->field_icon->alt = $term->get('field_icon')->alt;
          $link->save();
        }
      }
      $term->get('parent')->target_id = 0;
    }
  }
  if ($term->get('vid')->target_id == 'categories' && $term->get('field_sub_category')->value == 1) {
    $term->get('parent')->target_id = $term->get('field_category_reference')->target_id;
    $term->get('domain_access')->target_id = $term->get('field_domain')->target_id;
  }
}

/**
 * Use taxonomy presave to delete menu.
 */
function vss_custom_taxonomy_term_delete($term) {
  if ($term->get('vid')->target_id == 'categories') {
    $links = \Drupal::entityTypeManager()->getStorage('menu_link_content')->loadByProperties(['field_taxonomy_term_id' => $term->id()]);
    if ($link = reset($links)) {
      $link->delete();
    }
  }
}

/**
 * Ajax callback for sending invite to user.
 */
function vss_custom_send_invite(&$form, FormStateInterface $form_state) {
  $uid = \Drupal::routeMatch()->getRawParameter('user');
  $user = User::load($uid);
  $langcode = $user->getPreferredLangcode();
  _user_mail_notify('password_reset', $user, $langcode = NULL);
  $response = new AjaxResponse();
  $response->addCommand(new AlertCommand(t('E-mail invite sent.')));
  return $response;
}

/**
 * Use form alter.
 */
function vss_custom_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  // Turn off autocomplete on user the forms.
  if ($form_id == 'user_login_form') {
    $form['name']['#attributes']['autocomplete'] = 'off';
    $form['pass']['#attributes']['autocomplete'] = 'off';
  }

  if ($form_id == 'taxonomy_term_categories_form') {
    $form['description']['widget'][0]['#required'] = 'true';
    $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
    $form['field_category_reference']['widget']['#options'] = ['_none' => 'Select a value'] + get_all_parent_categories($langcode);
    $form['#validate'][] = 'validate_category';
    $form['relations']['#access'] = FALSE;
  }
  if ($form_id == 'user_form') {
    $form['reinvite_user'] = [
      '#type' => 'button',
      '#value' => t('Re-invite User'),
      '#weight' => -25,
      '#ajax' => [
        'callback' => 'vss_custom_send_invite',
        'event' => 'click',
      ],
    ];
  }
  $language_manager = \Drupal::languageManager()->getCurrentLanguage();
  // Adding warning message.
  $request = \Drupal::request();
  if ($request->attributes->has('_route')) {
    if ($request->attributes->get('_route') == 'entity.node.content_translation_add') {
      \Drupal::messenger()->addWarning(
        t('You are modifying content for @language language', ['@language' => $language_manager->getName()])
      );
    }
    if ($request->attributes->get('_route') == 'entity.media.content_translation_add') {
      \Drupal::messenger()->addWarning(
        t('You are modifying media for @language language', ['@language' => $language_manager->getName()])
      );
    }
    if ($request->attributes->get('_route') == 'entity.media.collection') {
      $messenger = \Drupal::messenger();
      $messenger->deleteByType('warning');
    }
  }
  if ($form_id == 'menu_link_content_menu_link_content_form') {
    unset($form['weight']);
  }
  if ($form_id == 'taxonomy_term_sub_category_form') {
    $form['relations']['#weight'] = 7;
  }
  if ($form_id == 'block_content_words_from_experts_block_edit_form') {
    $form['body']['widget'][0]['#maxlength'] = 500;
  }
  if ($form_id == 'user_login_form') {
    $url = Url::fromRoute('user.pass');
    $form['forgot_link'] = [
      '#type' => 'markup',
      '#markup' => Link::fromTextAndUrl(t('Forgot Password?'), $url)->toString(),
    ];
  }
  if ($form_id == 'user_register_form' || $form_id == 'user_form') {
    $form['account']['mail']['#required'] = TRUE;
    $form['#validate'][] = 'validate_password';
  }

  if ($form_id == 'public_preview_preview_links_form') {
    foreach ($form['previews'] as $key => $val) {
      if ($key != $language_manager->getId()) {
        unset($form['previews'][$key]);
      }
    }
  }

  if ($form_id == 'public_preview_preview_links_form' && !empty($form['previews'][$language_manager->getId()]['url'])) {
    foreach ($form['previews'] as $key => $val) {
      if ($key != $language_manager->getId()) {
        unset($form['previews'][$key]);
      }
    }
    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node instanceof NodeInterface) {
      if ($node->hasTranslation($language_manager->getId())) {
        $node = $node->getTranslation($language_manager->getId());
      }
      $prev_pass = $node->get('field_preview_password')->value;
    }

    $form['previews'][$language_manager->getId()]['password'] = [
      '#type' => 'textfield',
      '#default_value' => $prev_pass ? $prev_pass : '',
      '#title' => t('Password'),
    ];

    if ($language_manager->getId() != 'en') {
      $url = $form['previews'][$language_manager->getId()]['url']['#default_value'];
      $url = explode('node', $url);
      $new_url = $url[0] . $language_manager->getId() . '/node' . $url[1];
      $form['previews'][$language_manager->getId()]['url']['#default_value'] = $new_url;
    }

    $form['#validate'][] = 'preview_validate';
    $form['#submit'][] = 'preview_submit';
  }

}

/**
 * Validate Password.
 */
function preview_validate(&$form, &$form_state) {
  $op = $form_state->getTriggeringElement()['#value'];
  if ($op == 'Generate') {
    $lang = \Drupal::languageManager()->getCurrentLanguage()->getId();
    $password = $form_state->getValue(['previews'])[$lang]['password'];
    if ((strlen($password) < 8)) {
      $form_state->setErrorByName('pass', t('Password must be of minimum 8 characters'));
    }
  }
}

/**
 * Submit Password.
 */
function preview_submit(&$form, FormStateInterface $form_state) {
  $op = $form_state->getTriggeringElement()['#value'];
  $lang = \Drupal::languageManager()->getCurrentLanguage()->getId();
  if ($op == 'Remove') {
    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node instanceof NodeInterface) {
      if ($node->hasTranslation($lang)) {
        $node = $node->getTranslation($lang);
      }
      $nid = $node->id();
      $nd = Node::load($nid);
      if ($nd->hasTranslation($lang)) {
        $nd = $nd->getTranslation($lang);
      }
      $nd->set('field_preview_password', '');
      $nd->save();
    }
  }
  else {
    $password = $form_state->getValue(['previews'])[$lang]['password'];
    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node instanceof NodeInterface) {
      if ($node->hasTranslation($lang)) {
        $node = $node->getTranslation($lang);
      }
      $nid = $node->id();
      $nd = Node::load($nid);
      if ($nd->hasTranslation($lang)) {
        $nd = $nd->getTranslation($lang);
      }
      $nd->set('field_preview_password', $password);
      $nd->save();
      \Drupal::messenger()->addMessage(t('Password Saved.'));
    }
  }
}

/**
 * Validate Password.
 */
function validate_password(&$form, &$form_state) {
  $password = $form_state->getValue('pass');
  if (!empty($password) && (strlen($password) < 8)) {
    $form_state->setErrorByName('pass', t('Password must be of minimum 8 characters'));
  }
}

/**
 * Use node form alter.
 */
function vss_custom_form_node_form_alter(&$form, &$form_state) {
  $form['actions']['preview']['#attributes'] = ['onclick' => 'this.form.target="_blank";return true;'];

  $node_id = $form_state->getformObject()->getEntity()->id();
  if ($node_id) {
    $url = Url::fromRoute('entity_pdf.view', [
      'entity_type' => "node",
      'entity' => $node_id,
      'view_mode' => "pdf",
    ]);
    $form['actions']['save_pdf'] = [
      '#type' => 'link',
      '#title' => t('Export as PDF'),
      '#access' => TRUE,
      '#url' => $url,
      '#weight' => 99,
    ];
  }
}

/**
 * Validate category.
 */
function validate_category(&$form, &$form_state) {
  $subcat = $form_state->getValue('field_sub_category')['value'];
  $subcat_thumbail = $form_state->getValue('field_sub_category_thumbnail')[0]['alt'];
  $cat_ref = $form_state->getValue('field_category_reference');
  $cat_color = $form_state->getValue('field_category_color')[0]['color'];
  $icon = $form_state->getValue('field_icon')[0]['alt'];

  if ($subcat) {
    if (empty($subcat_thumbail)) {
      $form_state->setErrorByName('field_sub_category_thumbnail', t('Sub Category Thumbnail is required'));
    }
    if (empty($cat_ref)) {
      $form_state->setErrorByName('field_category_reference [0][target_id', t('Category reference field is required'));
    }
  }
  else {
    if (empty($cat_color)) {
      $form_state->setErrorByName('field_category_color', t('Category color field is required'));
    }
    if (empty($icon)) {
      $form_state->setErrorByName('field_icon', t('Icon field is required'));
    }
  }
}

/**
 * Alter the video_embed_field plugin definitions.
 *
 * This hook allows you alter the plugin definitions managed by ProviderManager.
 * This could be useful if you wish to remove a particular definition or perhaps
 * replace one with your own implementation (as demonstrated).
 */
function vss_custom_video_embed_field_provider_info_alter(&$definitions) {
  // Replace the YouTube provider class with another implementation.
  $definitions['youtube']['class'] = 'Drupal\vss_custom\Plugin\video_embed_field\Provider\CustomYouTubeProvider';
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function vss_custom_field_widget_entity_reference_paragraphs_form_alter(&$element, &$form_state, $context) {
  if ($element['#paragraph_type'] == 'services') {
    $element['subform']['field_service_title']['widget'][0]['value']['#maxlength'] = 150;
    $element['subform']['field_service_description']['widget'][0]['#maxlength'] = 500;
  }
}

/**
 * Implements hook_preprocess_paragraph().
 */
function vss_custom_preprocess_paragraph(&$variables) {
  $paragraph = $variables['paragraph'];
  if ($paragraph->bundle() == 'video' || $paragraph->bundle() == 'podcast_audio' || $paragraph->bundle() == 'external_videos') {
    if ($paragraph->hasField('field_show_transcription')) {
      $show_transcript = $paragraph->get('field_show_transcription')->getValue()[0]['value'];
    }
    $vtt_paragraphs = $paragraph->get('field_vtt_entries')->getValue();
    foreach ($vtt_paragraphs as $vtt_p) {
      if ($vtt_p['target_id']) {
        $vtt_entry = Paragraph::load($vtt_p['target_id']);
        $current_language = \Drupal::languageManager()->getCurrentLanguage()->getId();
        $vtt = $vtt_entry->hasTranslation($current_language) ? $vtt_entry->getTranslation($current_language) : $vtt_entry;

        if ($vtt->get('field_vtt_file')->getValue() != NULL) {
          $vtt_file = $vtt->get('field_vtt_file')->entity->getFileUri();
        }
        if ($vtt->get('field_language')->getValue() != NULL) {
          $langcode = $vtt->get('field_language')->getValue()[0]['target_id'];
        }
        if ($vtt->get('field_language')->getValue() != NULL && $vtt->get('field_vtt_file')->getValue() != NULL) {
          if ($current_language == $langcode && $show_transcript) {
            $transcript = vss_custom_parse_vtt($vtt_file);
            $variables['transcript'][$vtt_p['target_id']] = $transcript;
            $variables['transcript_id'] = $vtt_p['target_id'];
          }
        }

      }
    }
  }
}

/**
 * Function for parsing the VTT file.
 */
function vss_custom_parse_vtt($vtt_file) {
  $file = $vtt_file;
  $file_as_array = file($file, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
  $i = 0;
  $transcript = [];
  foreach ($file_as_array as $f) {
    if (str_contains($f, 'WEBVTT')) {
      continue;
    }
    $start_time = FALSE;
    if (preg_match("/^(\d{2}:\d{2}:\d{2}[\d\.]+) --> \d{2}:\d{2}:\d{2}[\d\.]+$/", $f, $match)) {
      $start_time = explode('-->', $f);

      $start_time_split = explode(':', $start_time[0]);
      $total_start_seconds = (float) $start_time_split[0] * 60 * 60 + (float) $start_time_split[1] * 60 + (float) $start_time_split[2];
      $end_time_split = explode(':', $start_time[1]);
      $total_end_seconds = $end_time_split[0] * 60 * 60 + $end_time_split[1] * 60 + $end_time_split[2];
      $duration = $total_end_seconds - $total_start_seconds;

      $start = sprintf('%02d:%02d:%02d', ($total_start_seconds / 3600), ($total_start_seconds / 60 % 60), $total_start_seconds % 60);

      $transcript_time = $start;
      $transcript[$i]['seek_time'] = $total_start_seconds;
      $transcript[$i]['start_time'] = $total_start_seconds;
      $transcript[$i]['end_time'] = $total_end_seconds;
      $transcript[$i]['time'] = $transcript_time;
      $transcript[$i]['duration'] = $duration;
    }
    if (!$start_time && (!strpos($f, 'WEBVTT')) && !is_numeric($f)) {
      if (!isset($transcript[$i]['seek_time'])) {
        $transcript[$i - 1]['text'] .= ' ' . $f . ' ';
      }
      else {
        $transcript[$i]['text'] = ' ' . $f . ' ';
        $i++;
      }
    }
  }
  return $transcript;
}

/**
 * Get all categories.
 */
function get_all_parent_categories($langcode) {
  $query = \Drupal::database()->select('taxonomy_term_field_data', 't');
  $query->join('taxonomy_term__field_domain', 'fd', 'fd.entity_id = t.tid');
  $query->leftjoin('taxonomy_term__field_sub_category', 'sc', 'sc.entity_id = t.tid');
  $query->condition('fd.bundle', 'categories');
  $query->condition('sc.field_sub_category_value', 1, '!=');
  $query->condition('t.langcode', $langcode, '=');
  $query->condition('fd.field_domain_target_id', \Drupal::service('domain.negotiator')->getActiveDomain()->id());
  $query->fields('t', ['tid']);
  $query->fields('t', ['name']);
  $terms = $query->execute()->fetchAllKeyed(0, 1);
  foreach ($terms as $key => $val) {
    $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($key);
    if ($term->langcode->value != $langcode) {
      $terms[$key] = $val . ' (' . $term->name->value . ')';
    }
  }
  return $terms;
}

/**
 * Implements hook_preprocess_block().
 */
function vss_custom_preprocess_block(&$variables) {
  if ($variables['elements']['#base_plugin_id'] == 'block_content') {
    if ($variables['label'] !== '') {
      $variables['label'] = $variables['content']['#block_content']->label();
    }
  }
  if ($variables['elements']['#id'] == 'homepageherocategoriesblock') {
    $variables['elements']['#cache']['max-age'] = 0;
  }
  if ($variables['elements']['#id'] == 'wordsfromexperts') {
    $variables['elements']['#cache']['max-age'] = 0;
    $variables['#cache']['max-age'] = 0;
  }
  if ($variables['elements']['#id'] == 'views_block__sub_category_all_result_block_1') {
    $variables['elements']['#cache']['max-age'] = 0;
    $variables['#cache']['max-age'] = 0;
    if (\Drupal::routeMatch()->getRouteName() == 'entity.taxonomy_term.canonical') {
      $term_id = \Drupal::routeMatch()->getRawParameter('taxonomy_term');
    }
    $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($term_id);
    $sub_category = $term->get('field_sub_category')->value;
    if (empty($sub_category)) {
      unset($variables['label']);
      unset($variables['content']);
    }
  }
  if ($variables['elements']['#base_plugin_id'] == 'system_breadcrumb_block') {
    $variables['elements']['#cache']['max-age'] = 0;
    $variables['#cache']['max-age'] = 0;
  }
  if ($variables['elements']['#base_plugin_id'] == 'disclaimer_pop_up_block') {
    $variables['elements']['#cache']['max-age'] = 0;
    $variables['#cache']['max-age'] = 0;
    $cookie_get = \Drupal::request()->cookies->get('disclaimer');
    if ($cookie_get) {
      unset($variables['label']);
      unset($variables['content']);
    }
  }
}

/**
 * Implements hook_pquery_sort_by_random_alter().
 */
function vss_custom_query_sort_by_random_alter($query) {
  $query->orderRandom();
}

/**
 * Get all categories.
 */
function get_all_sub_categories() {
  $query = \Drupal::database()->select('taxonomy_term_field_data', 't');
  $query->join('taxonomy_term__field_domain', 'fd', 'fd.entity_id = t.tid');
  $query->join('taxonomy_term__field_sub_category', 'sc', 'sc.entity_id = t.tid');
  $query->condition('fd.bundle', 'categories');
  $query->condition('t.status', 1);
  $query->condition('sc.field_sub_category_value', 1, '=');
  $query->condition('sc.deleted', 0, '=');
  $query->fields('t', ['tid']);
  $query->fields('t', ['name']);
  $terms = $query->execute()->fetchAllKeyed(0, 1);
  return $terms;
}

/**
 * Get exit website preprocess.
 */
function vss_custom_preprocess_exit_website(&$variables) {
  $lang_id = \Drupal::languageManager()->getCurrentLanguage()->getId();
  if ($lang_id == 'ar') {
    $lang_id = 'ar-SA';
  }
  if ($lang_id == 'es') {
    $lang_id = 'es-ES';
    $voice_id = 30;
    $variables['#attached']['drupalSettings']['voiceId'] = $voice_id;
  }
  if ($lang_id == 'en') {
    $lang_id = 'en-US';
    $voice_id = 41;
    $variables['#attached']['drupalSettings']['voiceId'] = $voice_id;
  }
  $variables['#attached']['drupalSettings']['langId'] = $lang_id;
}

/**
 * Implements hook_mail().
 */
function vss_custom_mail($key, &$message, $params) {
  $options = [
    'langcode' => $message['langcode'],
  ];
  switch ($key) {
    case 'general_mail':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = t($params['subject'], $options);
      $message['body'][] = $params['message'];
      break;
  }
}

/**
 * Entity insert.
 */
function vss_custom_entity_insert(EntityInterface $entity) {
  if ($entity->getEntityType()->id() == 'node') {
    if ($entity->get('moderation_state')->getValue()[0]['value'] == 'request_for_publish' ||
      $entity->get('moderation_state')->getValue()[0]['value'] == 'request_for_un_publish'
    ) {
      $domain = $entity->get('field_domain_access')->target_id;
      $state = $entity->get('moderation_state')->getValue()[0]['value'] == 'request_for_publish' ? 'publish' : 'unpublish';
      $users = \Drupal::entityTypeManager()->getStorage('user')->loadByProperties(
      ['field_domain_access' => $domain, 'roles' => 'country_admin']);
      foreach ($users as $user) {
        if ($user) {
          $user_email = $user->getEmail();
          $user_name = $user->name->value;
          $type = $entity->bundle();
          $editor_name = $entity->getOwner()->name->value;
          $nid = $entity->id();
          $langcode = $entity->get('langcode')->getValue()[0]['value'];
          if ($langcode != 'en') {
            $url = \Drupal::request()->getHost() . '/' . $langcode . "/node/$nid/edit";
          }
          else {
            $url = \Drupal::request()->getHost() . "/node/$nid/edit";
          }
        }
        $mail_manager = \Drupal::service('plugin.manager.mail');
        $module = 'vss_custom';
        $key = 'general_mail';
        $to = $user_email;
        $params['message'] = "Hi $user_name,
        $editor_name has requested to $state an $type. Below is a link
        <a href = https://$url>https://$url</a>
        Click on the link to view the content or go to your dashboard in the CMS";
        $params['subject'] = "Request for $state content by $editor_name";
        $send = TRUE;
        $result = $mail_manager->mail($module, $key, $to, \Drupal::currentUser()->getPreferredLangcode(), $params, NULL, $send);
        if ($result['result'] !== TRUE) {
          \Drupal::messenger()->addWarning(t('There was a problem sending your message and it was not sent.'));
        }
        else {
          \Drupal::messenger()->addMessage(t('Mail has been sent.'));
        }
      }
    }
  }
}

/**
 * Entity update.
 */
function vss_custom_entity_update(EntityInterface $entity) {
  if ($entity->getEntityType()->id() == 'node') {
    if ($entity->get('moderation_state')->getValue()[0]['value'] == 'request_for_publish' ||
      $entity->get('moderation_state')->getValue()[0]['value'] == 'request_for_un_publish'
    ) {
      $domain = $entity->get('field_domain_access')->target_id;
      $state = $entity->get('moderation_state')->getValue()[0]['value'] == 'request_for_publish' ? 'publish' : 'unpublish';
      $users = \Drupal::entityTypeManager()->getStorage('user')->loadByProperties(
      ['field_domain_access' => $domain, 'roles' => 'country_admin']);
      foreach ($users as $user) {
        if ($user) {
          $user_email = $user->getEmail();
          $user_name = $user->name->value;
          $type = $entity->bundle();
          $editor_name = $entity->getOwner()->name->value;
          $nid = $entity->id();
          $langcode = $entity->get('langcode')->getValue()[0]['value'];
          if ($langcode != 'en') {
            $url = \Drupal::request()->getHost() . '/' . $langcode . "/node/$nid/edit";
          }
          else {
            $url = \Drupal::request()->getHost() . "/node/$nid/edit";
          }
        }
        $mail_manager = \Drupal::service('plugin.manager.mail');
        $module = 'vss_custom';
        $key = 'general_mail';
        $to = $user_email;
        $params['message'] = "Hi $user_name,
        $editor_name has requested to $state an $type. Below is a link
        <a href = https://$url>https://$url</a>
        Click on the link to view the content or go to your dashboard in the CMS";
        $params['subject'] = "Request for $state content by $editor_name";
        $send = TRUE;
        $result = $mail_manager->mail($module, $key, $to, \Drupal::currentUser()->getPreferredLangcode(), $params, NULL, $send);
        if ($result['result'] !== TRUE) {
          \Drupal::messenger()->addWarning(t('There was a problem sending your message and it was not sent.'));
        }
        else {
          \Drupal::messenger()->addMessage(t('Mail has been sent.'));
        }
      }
    }
  }
}

/**
 * Implements hook_search_api_autocomplete_suggestions_alter().
 */
function vss_custom_search_api_autocomplete_suggestions_alter(array &$suggestions, array $alter_params) {
  if ($alter_params['search']->id() == 'search') {
    foreach ($suggestions as $key => &$suggestion) {
      $options = $suggestion->getUrl()->getOptions();
      $node = $options['entity'];
      $suggestion->setSuggestedKeys($node->label());
      $url = Url::fromUserInput("/search-form", ['query' => ['search_api_fulltext' => $node->label()]]);
      $suggestion->setUrl($url);
    }
  }
}

/**
 * Implements preprocess menu.
 */
function vss_custom_preprocess_menu(&$variables) {
  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $variables['lang'] = $language;
}

/**
 * Implements views query alter.
 */
function vss_custom_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if ($view->id() == 'top_viewed_nodes' || $view->id() == 'most_viewed_content_report') {
    $query->addOrderBy(NULL, NULL, 'DESC', 'nodeviewcount_uip');
  }
  if ($view->id() == 'most_viewed_content_report') {
    foreach ($query->where as &$condition_group) {
      foreach ($condition_group['conditions'] as &$condition) {
        if ($condition['field'] == 'nodeviewcount.datetime = 0') {
          if ($view->exposed_raw_input['datetime'] == 'cur_week') {
            $timestamp = strtotime('monday this week');
          }
          elseif ($view->exposed_raw_input['datetime'] == 'cur_mon') {
            $timestamp = strtotime(date('Y-m-01'));
          }
          else {
            $timestamp = strtotime('first day of January');
          }
          $condition = [
            'field' => 'nodeviewcount.datetime',
            'value' => $timestamp,
            'operator' => '>=',
          ];
        }
        else {
          if ($view->exposed_raw_input['datetime'] == '') {
            $condition = [
              'field' => 'nodeviewcount.datetime',
              'value' => strtotime('today midnight'),
              'operator' => '>=',
            ];
          }
        }
      }
    }
  }
}

/**
 * Implements entity_operation_alter.
 */
function vss_custom_entity_operation_alter(array &$operations, EntityInterface $entity) {
  if ($entity->getEntityType()->id() == 'node') {
    if (!empty($operations['translate']['url'])) {
      $operations['quick_clone']['url']->setOptions($operations['translate']['url']->getOptions());
    }
  }
}

/**
 * Implements entity_operation_alter.
 */
function vss_custom_preprocess_page(&$variables) {
  if ($variables['is_front'] == TRUE) {
    \Drupal::service('page_cache_kill_switch')->trigger();
  }
}

/**
 * Implements exposed form alter.
 */
function vss_custom_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $view_ids = ['most_viewed_content_report'];
  if ($form_id == 'views_exposed_form' && in_array($form_state->get('view')->id(), $view_ids)) {
    $form['datetime'] = [
      '#type'             => 'select',
      '#options'          => [
        '' => t('Today'),
        'cur_week' => t('This Week'),
        'cur_mon' => t('This Month'),
        'cur_yr' => t('This Year'),
      ],
    ];
  }
}

/**
 * View preprocess.
 */
function vss_custom_preprocess_views_view(&$variables) {
  // dump($variables['view']->element['#name']);.
  if ($variables['id'] == 'need_help_view') {
    $domain = \Drupal::service('domain.negotiator')->getActiveDomain()->id();

    if (strpos($domain, "iq") !== FALSE) {
      $country = 'IRAQ';
    }
    else {
      $country = 'ECUADOR';
    }
    $variables['header']['area_text_custom']['#markup'] =
      $variables['header']['area_text_custom']['#markup'] . ' ' . '<b>' . $country . '</b>';
  }
}

/**
 * View field preprocess.
 */
function vss_custom_preprocess_views_view_field(&$variables) {
  if ($variables['view']->storage->id() == 'search') {
    if ($variables['field']->field == 'name') {
      $variables['output'] = explode(",", $variables['output'])[0];
    }
    if ($variables['field']->field == 'field_icon') {
      $string = explode(",", $variables['output'])[0];
      $variables['output'] = Markup::create($string);
    }
    if ($variables['field']->field == 'field_category_color') {
      $string = explode(",", $variables['output'])[0];
      $variables['output'] = Markup::create($string);
    }
  }

  if ($variables['view']->storage->id() == 'content') {
    if (isset($variables['view']->field) && (count($variables['view']->field) > 0)) {
      if ($variables['field']->field == 'nothing') {
        // Get tid.
        $nid = $variables['row']->_entity->get('nid')->value;
        $node_details = Node::load($nid);
        $default_title = $node_details->title->value;
        $alias = \Drupal::service('path_alias.manager')->getAliasByPath('/node/' . $nid);
        if ($variables['field']->field == 'nothing') {
          $variables['output'] = [
            '#markup' => "<a href= $alias>$default_title</a>",
          ];
        }
      }
    }
  }
}

/**
 * Taxonomy overview.
 */
function vss_custom_form_taxonomy_overview_terms_alter(&$form, FormStateInterface $form_state, $form_id) {

  $path = \Drupal::request()->getpathInfo();
  $arg = explode('/', $path);
  if ($arg[5] == 'categories' || $arg[6] == 'categories') {
    $form['terms']['#header'] = array_merge(array_slice($form['terms']['#header'], 0, 1, TRUE),
    [t('Original title'), t('Domain'), t('Language')],
    array_slice($form['terms']['#header'], 1, NULL, TRUE));

    \Drupal::messenger()->deleteByType('error');
    $active_domain = \Drupal::service('domain.negotiator')->getActiveDomain()->id();
    $domain = \Drupal::entityTypeManager()->getStorage('domain')->load($active_domain);
    $lang = \Drupal::configFactory()->get('domain.language.' . $domain->id() . '.language.negotiation');
    $lang_default = \Drupal::configFactory()->get('domain.config.' . $domain->id() . '.system.site');
    $lang_default = $lang_default->get('default_langcode');
    $languages = \Drupal::languageManager()->getLanguages();
    $prefixes = $lang->get('languages');
    foreach ($languages as $langcode => $language) {
      if (array_key_exists($langcode, $prefixes)) {
        $lang_select[$langcode] = $language->getName();
      }
    }
    $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
    $lang_def = \Drupal::request()->query->get('language_content_entity');
    $default_lang = $lang_def ? $lang_def : $langcode;
    $form['language'] = [
      '#title' => t('Language'),
      '#type' => 'select',
      '#weight' => -10,
      '#options' => $lang_select,
      '#default_value' => $default_lang,
    ];

    $form['filter_submit'] = [
      '#type' => 'submit',
      '#value' => t('Apply'),
      '#weight' => -9,
      '#button_type' => 'primary',
      '#submit' => ['filter_submit'],
    ];
    foreach ($form['terms'] as $key => &$term) {
      if (is_array($term) && !empty($term['#term'])) {
        if (($active_domain != $term['#term']->field_domain->target_id) ||
          ($term['#term']->langcode->value != $default_lang && !$term['#term']->hasTranslation($default_lang))
        ) {
          unset($form['terms'][$key]);
        }
        $tid = $term['#term']->tid->value;
        $domain_id = $term['#term']->field_domain->target_id;
        $lang = $term['#term']->langcode->value;
        $languages = \Drupal::languageManager()->getLanguages();
        foreach ($languages as $key => $language) {
          if ($key == $lang) {
            $dis_lang = $language->getName();
          }
        }
        $domain_id = $term['#term']->field_domain->target_id;
        $domain = \Drupal::entityTypeManager()->getStorage('domain')->load($active_domain);
        $trm = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($tid);
        if ($trm->langcode->value != $default_lang && $trm->hasTranslation($default_lang)) {
          $title = $trm->name->value;
        }
        else {
          $title = '-';
        }
        $status['title'] = [
          '#markup' => $title,
          '#type' => 'item',
        ];

        $status['domain'] = [
          '#markup' => $domain->get('name'),
          '#type' => 'item',
        ];

        $status['dis_lang'] = [
          '#markup' => $dis_lang,
          '#type' => 'item',
        ];

        $term = array_slice($term, 0, 1, TRUE) +
          $status +
          array_slice($term, 1, NULL, TRUE);
      }
    }
  }
  elseif ($arg[5] == 'tags' || $arg[6] == 'tags') {
    $form['terms']['#header'] = array_merge(array_slice($form['terms']['#header'], 0, 1, TRUE),
    [t('Original title'), t('Language')],
    array_slice($form['terms']['#header'], 1, NULL, TRUE));

    \Drupal::messenger()->deleteByType('error');
    $active_domain = \Drupal::service('domain.negotiator')->getActiveDomain()->id();
    $domain = \Drupal::entityTypeManager()->getStorage('domain')->load($active_domain);
    $lang = \Drupal::configFactory()->get('domain.language.' . $domain->id() . '.language.negotiation');
    $languages = \Drupal::languageManager()->getLanguages();
    foreach ($languages as $langcode => $language) {
      $lang_select[$langcode] = $language->getName();
    }
    $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
    $lang_def = \Drupal::request()->query->get('language_content_entity');
    $default_lang = $lang_def ? $lang_def : $langcode;
    $form['language'] = [
      '#title' => t('Language'),
      '#type' => 'select',
      '#weight' => -10,
      '#options' => $lang_select,
      '#default_value' => $default_lang,
    ];

    $form['filter_submit'] = [
      '#type' => 'submit',
      '#value' => t('Apply'),
      '#weight' => -9,
      '#button_type' => 'primary',
      '#submit' => ['filter_tags_submit'],
    ];
    $all_domains = \Drupal::service('entity_type.manager')->getStorage('domain')->loadMultipleSorted(NULL);
    foreach ($all_domains as $domain) {
      $domain_status = $domain->get('status');
      if ($domain_status == TRUE) {
        $domain_name = $domain->get('name');
        $domain_id = $domain->get('id');
        $domain_list[$domain_id] = $domain_name;
      }
    }
    foreach ($form['terms'] as $key => &$term) {
      if (is_array($term) && !empty($term['#term'])) {
        if (($term['#term']->langcode->value != $default_lang && !$term['#term']->hasTranslation($default_lang))) {
          unset($form['terms'][$key]);
        }
        $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
        $tid = $term['#term']->tid->value;
        $lang = $term['#term']->langcode->value;
        $languages = \Drupal::languageManager()->getLanguages();
        foreach ($languages as $key => $language) {
          if ($key == $lang) {
            $dis_lang = $language->getName();
          }
        }
        $trm = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($tid);
        if ($trm->langcode->value != $default_lang && $trm->hasTranslation($default_lang)) {
          $title = $trm->name->value;
        }
        else {
          $title = '-';
        }
        $status['title'] = [
          '#markup' => $title,
          '#type' => 'item',
        ];

        $status['dis_lang'] = [
          '#markup' => $dis_lang,
          '#type' => 'item',
        ];

        $term = array_slice($term, 0, 1, TRUE) +
          $status +
          array_slice($term, 1, NULL, TRUE);
      }
    }
  }

}

/**
 * Submit categories.
 */
function filter_submit(&$form, FormStateInterface $form_state) {
  $country = $form_state->getValue('language');
  $response = new RedirectResponse("/admin/structure/taxonomy/manage/categories/overview?language_content_entity=$country");
  $response->send();
}

/**
 * Submit tags.
 */
function filter_tags_submit(&$form, FormStateInterface $form_state) {
  $country = $form_state->getValue('language');
  $response = new RedirectResponse("/admin/structure/taxonomy/manage/tags/overview?language_content_entity=$country");
  $response->send();
}
