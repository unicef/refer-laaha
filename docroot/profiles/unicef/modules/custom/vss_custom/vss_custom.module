<?php

/**
 * @file
 * Contains vss_custom.module.
 */

use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\Core\Form\FormStateInterface;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\Core\Link;
use Drupal\Core\Url;

/**
 * Implements hook_theme().
 */
function vss_custom_theme() {
  return [
    'exit_website' => [
      'variables' => [
        'data' => [],
      ],
    ],
    'disclaimer_pop_up_block' => [
      'variables' => [
        'content' => NULL,
      ],
      'render element' => 'children',
    ],
    'social_icons' => [
      'variables' => [
        'content' => NULL,
      ],
      'render element' => 'children',
    ],
    'recommended_related_content_block' => [
      'variables' => [
        'content' => NULL,
      ],
      'render element' => 'children',
    ],
    'recommended_related_content_block_wrapper' => [
      'variables' => [
        'content' => NULL,
      ],
      'render element' => 'children',
    ],
    'video_embed_iframe' => [
      'variables' => [
        'url' => '',
        'query' => [],
        'attributes' => [],
        'fragment' => '',
        'language' => '',
        'video_id' => '',
      ],
    ],
    'global_sticky_block' => [
      'variables' => [
        'content' => NULL,
        'lang_code' => '',
      ],
      'render element' => 'children',
    ],
    'hero_banner_block' => [
      'variables' => [
        'content' => [],
        'lang_code' => '',
        'category' => [],
      ],
      'render element' => 'children',
    ],
    'featured_stories_block' => [
      'variables' => [
        'content' => [],
        'lang_code' => '',
        'feature_count' => '',
      ],
      'render element' => 'children',
    ],
  ];
}

/**
 * Use language label for the language switcher.
 */
function vss_custom_preprocess_links__language_block(&$variables) {

  if (isset($variables['links'])) {
    // Get the language list used and provided by Drupal core.
    $language_manager = \Drupal::languageManager();
    $language_list = $language_manager::getStandardLanguageList();

    // Go through each link present in the output and change it's title.
    foreach ($variables['links'] as $link_langcode => $link) {
      $variables['links'][$link_langcode]['link']['#title'] = $language_list[$link_langcode][1];
    }
  }
}

/**
 * Use taxonomy presave to create new menu.
 */
function vss_custom_taxonomy_term_presave($term) {
  if ($term->get('vid')->target_id == 'categories' && empty($term->get('field_sub_category')->value)) {
    if ($term->isNew()) {
      $menu_name = strpos($term->get('field_domain')->target_id, "iq") ? 'iraq-navigation-header-menu' : 'navigation-header-menu';
      $links = \Drupal::entityTypeManager()->getStorage('menu_link_content')->loadByProperties(
      ['field_discover_dropdown' => 1, 'menu_name' => $menu_name]);
      if ($link = reset($links)) {
        $uuid = $link->get('uuid')->value;
      }
      $menu_link = MenuLinkContent::create([
        'title' => $term->get('name')->value,
        'link' => ['uri' => 'internal:#'],
        'menu_name' => strpos($term->get('field_domain')->target_id, "iq") ? 'iraq-navigation-header-menu' : 'navigation-header-menu',
        'langcode' => strpos($term->get('field_domain')->target_id, "iq") ? 'ar' : 'en',
        'weight' => $term->get('weight')->value,
        'expanded' => FALSE,
        'field_icon' => [
          'target_id' => $term->get('field_icon')->target_id,
          'alt' => $term->get('field_icon')->alt,
        ],
        'parent' => 'menu_link_content:' . $uuid,
      ]);
      $menu_link->save();

      if (strpos($term->get('field_domain')->target_id, "iq")) {
        if (!$term->hasTranslation('ar')) {
          $term->langcode->value = 'ar';
        }
      }
    }
    else {
      $links = \Drupal::entityTypeManager()->getStorage('menu_link_content')->loadByProperties(['title' => $term->original->get('name')->value]);
      if ($link = reset($links)) {
        if (!$link->hasTranslation($term->get('langcode')->value)) {
          $link->addTranslation($term->get('langcode')->value, ['title' => $term->get('name')->value])->save();
        }
        else {
          $link->title->value = $term->get('name')->value;
          $link->langcode->value = $term->get('langcode')->value;
          $link->weight->value = $term->get('weight')->value;
          $link->field_icon->target_id = $term->get('field_icon')->target_id;
          $link->field_icon->alt = $term->get('field_icon')->alt;
          $link->save();
        }
      }
      $term->get('parent')->target_id = 0;
    }
  }
  if ($term->get('vid')->target_id == 'categories' && $term->get('field_sub_category')->value == 1) {
    if (strpos($term->get('field_domain')->target_id, "iq")) {
      if (!$term->hasTranslation('ar')) {
        $term->langcode->value = 'ar';
      }
    }
    $term->get('parent')->target_id = $term->get('field_category_reference')->target_id;
  }
}

/**
 * Use taxonomy presave to delete menu.
 */
function vss_custom_taxonomy_term_delete($term) {
  if ($term->get('vid')->target_id == 'categories') {
    $links = \Drupal::entityTypeManager()->getStorage('menu_link_content')->loadByProperties(['title' => $term->get('name')->value]);
    if ($link = reset($links)) {
      $link->delete();
    }
  }
}

/**
 * Use form alter.
 */
function vss_custom_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  if ($form_id == 'taxonomy_term_categories_form') {
    $form['description']['widget'][0]['#required'] = 'true';
    $form['field_category_reference']['widget']['#options'] = ['_none' => 'Select a value'] + get_all_parent_categories();
    $form['#validate'][] = 'validate_category';
  }
  $language_manager = \Drupal::languageManager()->getCurrentLanguage();
  // Adding warning message.
  $request = \Drupal::request();
  if ($request->attributes->has('_route')) {
    if ($request->attributes->get('_route') == 'entity.node.content_translation_add') {
      \Drupal::messenger()->addWarning(t('You are modifying content for @language language', ['@language' => $language_manager->getName()]));
    }
    if ($request->attributes->get('_route') == 'entity.media.content_translation_add') {
      \Drupal::messenger()->addWarning(t('You are modifying media for @language language', ['@language' => $language_manager->getName()]));
    }
    if ($request->attributes->get('_route') == 'entity.media.collection') {
      $messenger = \Drupal::messenger();
      $messenger->deleteByType('warning');
    }
  }
  if ($form_id == 'menu_link_content_menu_link_content_form') {
    unset($form['weight']);
  }
  if ($form_id == 'taxonomy_term_sub_category_form') {
    $form['relations']['#weight'] = 7;
  }
  if ($form_id == 'block_content_words_from_experts_block_edit_form') {
    $form['body']['widget'][0]['#maxlength'] = 500;
  }
  if ($form_id == 'user_login_form') {
    $url = Url::fromRoute('user.pass');
    $form['forgot_link'] = [
      '#type' => 'markup',
      '#markup' => Link::fromTextAndUrl(t('Forgot Password?'), $url)->toString(),
    ];
  }
  if ($form_id == 'user_register_form' || $form_id == 'user_form') {
    $form['account']['mail']['#required'] = TRUE;
    $form['#validate'][] = 'validate_password';
  }
}

/**
 * Validate Password.
 */
function validate_password(&$form, &$form_state) {
  $password = $form_state->getValue('pass');
  if (!empty($password) && (strlen($password) < 8)) {
    $form_state->setErrorByName('pass', t('Password must be of minimum 8 characters'));
  }
}

/**
 * Use node form alter.
 */
function vss_custom_form_node_form_alter(&$form, &$form_state) {
  $form['field_sub_category']['widget']['#options'] = ['_none' => 'Select a value'] + get_all_sub_categories();
}

/**
 * Validate category.
 */
function validate_category(&$form, &$form_state) {
  $subcat = $form_state->getValue('field_sub_category')['value'];
  $subcat_thumbail = $form_state->getValue('field_sub_category_thumbnail')[0]['alt'];
  $cat_ref = $form_state->getValue('field_category_reference');
  $cat_color = $form_state->getValue('field_category_color')[0]['color'];
  $icon = $form_state->getValue('field_icon')[0]['alt'];

  if ($subcat) {
    if (empty($subcat_thumbail)) {
      $form_state->setErrorByName('field_sub_category_thumbnail', t('Sub Category Thumbnail is required'));
    }
    if (empty($cat_ref)) {
      $form_state->setErrorByName('field_category_reference [0][target_id', t('Category reference field is required'));
    }
  }
  else {
    if (empty($cat_color)) {
      $form_state->setErrorByName('field_category_color', t('Category color field is required'));
    }
    if (empty($icon)) {
      $form_state->setErrorByName('field_icon', t('Icon field is required'));
    }
  }
}

/**
 * Alter the video_embed_field plugin definitions.
 *
 * This hook allows you alter the plugin definitions managed by ProviderManager.
 * This could be useful if you wish to remove a particular definition or perhaps
 * replace one with your own implementation (as demonstrated).
 */
function vss_custom_video_embed_field_provider_info_alter(&$definitions) {
  // Replace the YouTube provider class with another implementation.
  $definitions['youtube']['class'] = 'Drupal\vss_custom\Plugin\video_embed_field\Provider\CustomYouTubeProvider';
}

/**
 * Implements hook_preprocess_paragraph().
 */
function vss_custom_preprocess_paragraph(&$variables) {
  $paragraph = $variables['paragraph'];
  if ($paragraph->bundle() == 'video' || $paragraph->bundle() == 'podcast_audio') {
    if ($paragraph->hasField('field_show_transcription')) {
      $show_transcript = $paragraph->get('field_show_transcription')->getValue()[0]['value'];
    }
    $vtt_paragraphs = $paragraph->get('field_vtt_entries')->getValue();
    foreach ($vtt_paragraphs as $vtt_p) {
      if ($vtt_p['target_id']) {
        $vtt_entry = Paragraph::load($vtt_p['target_id']);
        $current_language = \Drupal::languageManager()->getCurrentLanguage()->getId();
        $vtt = $vtt_entry->hasTranslation($current_language) ? $vtt_entry->getTranslation($current_language) : $vtt_entry;
        $vtt_file = $vtt->get('field_vtt_file')->entity->getFileUri();
        $langcode = $vtt->get('field_language')->getValue()[0]['target_id'];
        if ($current_language == $langcode && $show_transcript) {
          $transcript = vss_custom_parse_vtt($vtt_file);
          $variables['transcript'][$vtt_p['target_id']] = $transcript;
          $variables['transcript_id'] = $vtt_p['target_id'];
        }
      }
    }
  }
}

/**
 * Function for parsing the VTT file.
 */
function vss_custom_parse_vtt($vtt_file) {
  $file = $vtt_file;
  $file_as_array = file($file, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
  $i = 0;
  $transcript = [];
  foreach ($file_as_array as $f) {
    if (str_contains($f, 'WEBVTT')) {
      continue;
    }
    $start_time = FALSE;
    if (preg_match("/^(\d{2}:\d{2}:\d{2}[\d\.]+) --> \d{2}:\d{2}:\d{2}[\d\.]+$/", $f, $match)) {
      $start_time = explode('-->', $f);

      $start_time_split = explode(':', $start_time[0]);
      $total_start_seconds = (float) $start_time_split[0] * 60 * 60 + (float) $start_time_split[1] * 60 + (float) $start_time_split[2];
      $end_time_split = explode(':', $start_time[1]);
      $total_end_seconds = $end_time_split[0] * 60 * 60 + $end_time_split[1] * 60 + $end_time_split[2];
      $duration = $total_end_seconds - $total_start_seconds;

      $start = sprintf('%02d:%02d:%02d', ($total_start_seconds / 3600), ($total_start_seconds / 60 % 60), $total_start_seconds % 60);

      $transcript_time = $start;
      $transcript[$i]['seek_time'] = $total_start_seconds;
      $transcript[$i]['start_time'] = $total_start_seconds;
      $transcript[$i]['end_time'] = $total_end_seconds;
      $transcript[$i]['time'] = $transcript_time;
      $transcript[$i]['duration'] = $duration;
    }
    if (!$start_time && (!strpos($f, 'WEBVTT')) && !is_numeric($f)) {
      if (!isset($transcript[$i]['seek_time'])) {
        $transcript[$i - 1]['text'] .= ' ' . $f . ' ';
      }
      else {
        $transcript[$i]['text'] = ' ' . $f . ' ';
        $i++;
      }
    }
  }
  return $transcript;
}

/**
 * Get all categories.
 */
function get_all_parent_categories() {
  $query = \Drupal::database()->select('taxonomy_term_field_data', 't');
  $query->join('taxonomy_term__field_domain', 'fd', 'fd.entity_id = t.tid');
  $query->leftjoin('taxonomy_term__field_sub_category', 'sc', 'sc.entity_id = t.tid');
  $query->condition('fd.bundle', 'categories');
  $query->condition('sc.field_sub_category_value', 1, '!=');
  $query->fields('t', ['tid']);
  $query->fields('t', ['name']);
  $terms = $query->execute()->fetchAllKeyed(0, 1);
  return $terms;
}

/**
 * Implements hook_preprocess_block().
 */
function vss_custom_preprocess_block(&$variables) {
  if ($variables['elements']['#base_plugin_id'] == 'block_content') {
    if ($variables['label'] !== '') {
      $variables['label'] = $variables['content']['#block_content']->label();
    }
  }
  if ($variables['elements']['#id'] == 'wordsfromexperts') {
    $variables['elements']['#cache']['max-age'] = 0;
    $variables['#cache']['max-age'] = 0;
    if (\Drupal::routeMatch()->getRouteName() == 'entity.taxonomy_term.canonical') {
      $term_id = \Drupal::routeMatch()->getRawParameter('taxonomy_term');
    }
    $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($term_id);
    $sub_category = $term->get('field_sub_category')->value;
    if ($sub_category == 1) {
      unset($variables['label']);
      unset($variables['content']);
    }
  }
}

/**
 * Implements hook_pquery_sort_by_random_alter().
 */
function vss_custom_query_sort_by_random_alter($query) {
  $query->orderRandom();
}

/**
 * Get all categories.
 */
function get_all_sub_categories() {
  $query = \Drupal::database()->select('taxonomy_term_field_data', 't');
  $query->join('taxonomy_term__field_domain', 'fd', 'fd.entity_id = t.tid');
  $query->leftjoin('taxonomy_term__field_sub_category', 'sc', 'sc.entity_id = t.tid');
  $query->condition('fd.bundle', 'categories');
  $query->condition('sc.field_sub_category_value', 1, '=');
  $query->fields('t', ['tid']);
  $query->fields('t', ['name']);
  $terms = $query->execute()->fetchAllKeyed(0, 1);
  return $terms;
}

/**
 * Get exit website preprocess.
 */
function vss_custom_preprocess_exit_website(&$variables) {
  $lang_id = \Drupal::languageManager()->getCurrentLanguage()->getId();
  if ($lang_id == 'ar') {
    $lang_id = 'ar-SA';
  }
  if ($lang_id == 'es') {
    $lang_id = 'es-ES';
    $voiceId = 30;
    $variables['#attached']['drupalSettings']['voiceId'] = $voiceId;
  }
  if ($lang_id == 'en') {
    $lang_id = 'en-US';
    $voiceId = 41;
    $variables['#attached']['drupalSettings']['voiceId'] = $voiceId;
  }
  $variables['#attached']['drupalSettings']['langId'] = $lang_id;
}
