{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished'
  ]
%}
{% if transcript_id %}
	{{ attach_library('vss/external_video_transcript') }}
{% endif %}
{% block paragraph %}
	<div class="video-wrapper">
		<div{{attributes.addClass(classes)}}>
			{% block content %}
			<div id="youtube_{{ transcript_id}}" data-id="{{ transcript_id }}">
			  {{ content.field_external_video }}
			</div>
	{% endblock %}
</div>
{% if transcript_id %}
	<div class="transcript-btn">
		<button class="show-transcript-external button-defult" id="{{ 'show_' ~ transcript_id }}" data-id="{{ 'transcript_' ~ transcript_id }}">{{ 'SHOW TRANSCRIPTION'|t }}
			<i class="fa fa-angle-down" aria-hidden="true"></i>
		</button>
		<button class="hide-transcript-external button-defult" id="{{ 'hide_' ~ transcript_id }}" data-id="{{ 'transcript_' ~ transcript_id }}">{{ 'HIDE TRANSCRIPTION'|t }}
			<i class="fa fa-angle-up" aria-hidden="true"></i>
		</button>
	</div>
	<div class="transcript-container" id="transcript-container_{{ transcript_id }}">
		<div class="transcript" id="transcript_{{ transcript_id }}">
			{% for transcript_data in transcript[transcript_id] %}
				<div id='l_{{ transcript_id }}_{{ loop.index }}' class='btnSeekEx line' data-seek='{{ transcript_data.seek_time }}' data-start='{{ transcript_data.start_time }}' data-end='{{ transcript_data.end_time }}'>
					<span>{{ transcript_data.time }}</span>
					<span class="transcript-text">{{ transcript_data.text }}</span>
				</div>
			{% endfor %}
		</div>
	</div>
{% endif %}
</div>
{% endblock paragraph %}
