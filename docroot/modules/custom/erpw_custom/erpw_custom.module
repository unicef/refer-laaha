<?php

/**
 * @file
 * Contains erpw_custom.module.
 */

use Drupal\node\Entity\Node;
use Drupal\Core\Url;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Ajax\OpenModalDialogCommand;
use Drupal\node\NodeInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\views\ViewExecutable;
use Drupal\user\Entity\User;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function erpw_custom_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#submit'][] = 'erpw_custom_user_login_form_submit';
}

/**
 * Custom submit handler for the login form.
 */
function erpw_custom_user_login_form_submit($form, FormStateInterface $form_state) {
  $url = Url::fromRoute('<front>');
  $form_state->setRedirectUrl($url);
}

/**
 * Implements exposed form alter.
 */
function erpw_custom_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $view_ids = ['manage_service', 'moderated_content'];
  if ($form_id == 'views_exposed_form' && in_array($form_state->get('view')->id(), $view_ids)) {
    $form['field_service_type_target_id']['#type'] = 'select';
    $form['field_service_type_target_id']['#options'] = erpw_custom_service_type_options();
  }
  if ($form_id == 'views_exposed_form' && $form_state->get('view')->id() == 'user_lists') {
    $form['field_organisation_target_id_verf']['#options']['All'] = t('All');
    $form['roles_target_id']['#options']['All'] = t('All');
    $permission = 'view users of their own location and organisation';
    $uid = \Drupal::currentUser()->id();
    $current_user = User::load($uid);
    if ($uid != 1 && !$current_user->hasRole('administrator') && $current_user->hasPermission($permission)) {
      $form['field_organisation_target_id_verf']['#access'] = FALSE;
    }
  }
}

/**
 * Callback to get service type options array.
 */
function erpw_custom_service_type_options() {
  $languagecode = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $query = \Drupal::database()->select("node_field_data", "n");
  $query->innerJoin('node__field_service_type', 'ns', 'n.nid = ns.field_service_type_target_id AND n.langcode = ns.langcode');
  $query->fields('n', ['nid', 'title']);
  $query->condition('n.type', 'service_type');
  $query->condition('ns.bundle', 'service_provider');
  $query->condition('ns.langcode', $languagecode);
  $query->condition('n.status', '1');
  $query->orderBy('n.title', 'ASC');
  $query = $query->execute();
  $results = $query->fetchAll();
  $options[''] = t('All');
  foreach ($results as $value) {
    $options[$value->nid] = $value->title;
  }
  return $options;
}

/**
 * Implements hook_views_pre_render().
 */
function erpw_custom_views_pre_render(ViewExecutable $view) {
  if ($view->id() == 'service_list') {
    $parameters = \Drupal::routeMatch()->getParameters()->all();
    // Add active tid from cookies as a fallback,
    // when there is no query parameter from referral_pathway_on_homepage view.
    if (!$parameters['arg_1']) {
      $parameters['arg_1'] = $_COOKIE['location_tid'];
    }
    // Conditionals are here to stop a fatal error, including when previewing
    // the view when editing it.  @TODO get the parameter the Views way.
    // Alternatively, use views to provide the title.
    $nid = $parameters['arg_0'] ?: NULL;
    if (!$nid) {
      return;
    }
    $node = Node::load($nid);
    $title = ($node) ? $node->getTitle() : t('Services');
    $view->setTitle($title);
  }
}

/**
 * Implements hook_form_alter().
 */
function erpw_custom_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'user_cancel_form') {
    $uid = \Drupal::currentUser()->id();

    $current_user = User::load($uid);
    if ($uid != 1  && !$current_user->hasRole('administrator')) {
      // Enable Email notification to the user.
      $form['user_cancel_notify']['#default_value'] = TRUE;
      $form['user_cancel_method']['#access'] = FALSE;
      $form['user_cancel_confirm']['#access'] = FALSE;
    }
  }
  if ($form_id == 'node_referral_path_way_edit_form' || $form_id == 'node_referral_path_way_form') {
    $permission = ($form_id == 'node_referral_path_way_edit_form') ? 'edit referral pathway of their own country' : 'add referral pathway of their own country';
    $form['location']['level_0']['#options'] = erpw_filter_locations_permissions($form['location']['level_0']['#options'], $permission);
    $form['location']['level_0']['#empty_option'] = t('Select country');
  }
  if ($form_id == 'user_location_form') {
    $permission = 'view location of their own country';
    $form['location_options']['#options'] = erpw_filter_locations_permissions($form['location_options']['#options'], $permission, 'location_entity');
    $form['location_options']['#empty_option'] = t('Select country');
  }
  if ($form_id == 'sign_up') {
    if (isset($form['location']['level_0']['#options'])) {
      $permission = 'add new user for their own country';
      $form['location']['level_0']['#options'] = erpw_filter_locations_permissions($form['location']['level_0']['#options'], $permission);
      $form['location']['level_0']['#empty_option'] = t('Select country');
    }
  }
  if ($form_id == 'user_form') {
    if (isset($form['location']['level_0']['#options'])) {
      $permission = 'edit users of their own country';
      $form['location']['level_0']['#options'] = erpw_filter_locations_permissions($form['location']['level_0']['#options'], $permission);
      $form['location']['level_0']['#empty_option'] = t('Select country');
    }
    // WARNING we are in a weird parallel user role system where user roles are assigned to a regular field.
    $allowed_user_roles = erpw_custom_current_user_assignable_system_roles(\Drupal::currentUser()->id());
    if ($allowed_user_roles) {
      $form['field_system_role']['widget']['#options'] = $allowed_user_roles;
    }
    else {
      $form['field_system_role']['#access'] = FALSE;
    }
  }
  if ($form_id == 'node_organisation_form') {
    $form['revision_information']['#access'] = FALSE;
    $form['actions']['submit']['#value'] = t('Publish');
    $form['actions']['preview']['#access'] = FALSE;
    $form['#validate'][] = '_erpw_custom_organisation_node_form_validate';
    $form['title']['widget'][0]['value']['#attributes']['placeholder'] = t('Enter organisation name');
    $form['actions']['cancel'] = [
      '#type' => 'submit',
      '#value' => t('CANCEL'),
      '#submit' => ['cancelorganisation'],
      '#weight' => 30,
      '#limit_validation_errors' => [],
    ];
  }

  if ($form_id == 'user_login_form') {
    // Code to modify your form input.
    $form['name']['#placeholder'][] = t('jane@example.com');
    $form['pass']['#placeholder'][] = t('**********');
    $form['name']['#title'] = t('Email ID');
    unset($form['name']['#description']);
    unset($form['pass']['#description']);
    $form['actions']['submit']['#value'] = t('SIGN IN');
    $form['#validate'][] = '_erpw_custom_form_user_email_validate';
  }

  $common_form_ids = [
    'node_service_type_form',
    'node_service_type_edit_form',
    'node_referral_path_way_form',
    'node_referral_path_way_edit_form',
    'node_service_type_quick_node_clone_form',
  ];
  if (in_array($form_id, $common_form_ids)) {
    $form['advanced']['#access'] = FALSE;
    $form['meta']['#access'] = FALSE;
    $form['status']['#access'] = FALSE;
    $form['revision_information']['#access'] = FALSE;
    $form['options']['#access'] = FALSE;
    $form['author']['#access'] = FALSE;
    $form['moderation_state']['#access'] = FALSE;
    $form['content_translation']['#access'] = FALSE;
  }

  if ($form_id == 'node_service_type_form' || $form_id == 'node_service_type_quick_node_clone_form') {
    $form['#validate'][] = '_erpw_custom_check_title_exist';
    $form['#title'] = t('Add Service Type');
  }

  if (in_array($form_id,
    [
      'node_service_type_form',
      'node_service_type_edit_form',
      'node_service_type_quick_node_clone_form',
    ])) {
    $form['actions']['submit']['#submit'][] = '_erpw_custom_service_handler';
  }

  if ($form_id == 'node_service_type_edit_form') {
    $form['#attached']['library'][] = 'core/drupal.dialog.ajax';
    $form['#prefix'] = '<div id="status-message"></div>';
    $form['actions']['submit']['#attributes']['class'][] = 'use-ajax ok-btn';
    $form['#title'] = t('Update Service Type');
  }

  if ($form_id == 'node_service_type_quick_node_clone_form') {
    $form['additional_settings']['#access'] = FALSE;
  }

  if ($form_id == 'node_service_type_delete_form') {
    $form['description']['#access'] = FALSE;
    $form['actions']['submit']['#submit'][] = '_erpw_custom_delete_content';
    $form['actions']['cancel']['#access'] = FALSE;
    $form['actions']['submit']['#value'] = t('BACK TO DASHBOARD');
  }

  // To alter buttons text for Add forms.
  if (in_array($form_id,
    [
      'node_service_type_form',
      'node_referral_path_way_form',
      'node_service_type_quick_node_clone_form',
    ])) {
    $form['source_langcode']['#access'] = FALSE;
    $form['actions']['submit']['#value'] = t('PUBLISH');
  }
  // Update the translation buttons for RPW edit form.
  if ($form_id == 'node_referral_path_way_edit_form') {
    $form['actions']['submit']['#value'] = t('UPDATE');
    $form['actions']['delete']['#access'] = FALSE;
    $form['actions']['delete_translation']['#access'] = FALSE;
  }
  // To alter buttons text for Service Type Edit form.
  if ($form_id == 'node_service_type_edit_form') {
    $form['actions']['submit']['#value'] = t('UPDATE');
    $form['actions']['delete']['#access'] = FALSE;
    $form['actions']['preview']['#access'] = FALSE;
    $form['actions']['delete_translation']['#access'] = FALSE;

    $form['actions']['cancel'] = [
      '#type' => 'submit',
      '#submit' => ['_erpw_custom_service_handler'],
      '#limit_validation_errors' => [],
      '#attributes' => [
        'class' => [
          'button-border',
        ],
      ],
      '#value' => t('CANCEL'),
    ];
    $form['actions']['submit']['#weight'] = 5;
    $form['actions']['cancel']['#weight'] = 10;
  }
  // Hide the Reject state for service add form.
  if ($form_id == 'node_service_provider_form') {
    $form['source_langcode']['#access'] = FALSE;
    unset($form['moderation_state']['widget'][0]['state']['#options']['reject']);
  }
  // Form alter for Add new Service Provider form.
  if ($form_id == 'node_service_provider_form' || $form_id == 'node_service_provider_edit_form') {
    $form['actions']['delete_translation']['#access'] = FALSE;
    $permission = ($form_id == 'node_service_provider_edit_form') ? 'edit service of their own country' : 'add service of their own country';
    if (isset($form['location']['level_0']['#options'])) {
      $form['location']['level_0']['#options'] = erpw_filter_locations_permissions($form['location']['level_0']['#options'], $permission);
    }
    $form['location']['level_0']['#empty_option'] = t('Select country');
    $uid = \Drupal::currentUser()->id();
    $current_user = User::load($uid);
    if ($uid != 1  && !$current_user->hasRole('administrator') &&
    ($current_user->hasPermission('edit service of their own location and organisation') || $current_user->hasPermission('edit service of their own location and organisation'))) {
      if ($current_user->hasField('field_organisation') && !$current_user->get('field_organisation')->isEmpty()) {
        $org_id = $current_user->get('field_organisation')->getValue()[0]['target_id'];
        $form['field_select_organisation']['widget']['#disabled'] = TRUE;
        $form['field_select_organisation']['widget']['#default_value'] = $org_id;
      }
    }
    // Hide moderation state option for staff only.
    if ($current_user->hasRole('service_provider_staff')) {
      $form['moderation_state']['#attributes']['class'][] = 'hidden';
    }
    $form['advanced']['#access'] = FALSE;
    $form['meta']['#access'] = FALSE;
    $form['status']['#access'] = FALSE;
    $form['revision_information']['#access'] = FALSE;
    $form['options']['#access'] = FALSE;
    $form['author']['#access'] = FALSE;
    $form['content_translation']['#access'] = FALSE;
    $form['field_location']['#access'] = FALSE;
    $form['#title'] = t("Add Service Form");
    $form['actions']['submit']['#value'] = t('Publish');
    $referral = \Drupal::request()->query->get('referer');
    if (isset($referral) && $referral == 'rpw') {
      $form['#title'] = t("Suggest a Change");
      $form['actions']['submit']['#value'] = t('Submit Change');
    }
    $form['actions']['cancel'] = [
      '#type' => 'submit',
      '#value' => t('CANCEL'),
      '#submit' => ['_erpw_custom_cancel_service_provider'],
      '#weight' => 30,
      '#limit_validation_errors' => [],
    ];
    $form['#attached']['library'][] = 'erpw_custom/erpw_js';
    $form['actions']['delete']['#access'] = FALSE;
    array_unshift($form['actions']['submit']['#submit'], '_erpw_custom_service_provider_form');
  }
  if (!\Drupal::request()->get('pass-reset-token')) {
    if (\Drupal::routeMatch()->getRouteName() == 'entity.user.edit_form') {
      $current_user_id = \Drupal::currentUser()->id();
      $roles = \Drupal::currentUser()->getRoles();
      $form_user_id = \Drupal::request()->attributes->get('user')->id();
      foreach ($roles as $role) {
        if ($role != 'administrator' && $role != 'country_admin') {
          if ($current_user_id == $form_user_id) {
            $form['field_location']['#disabled'] = 'true';
            $form['field_organisation']['#disabled'] = 'true';
            $form['field_position']['#disabled'] = 'true';
            $form['field_system_role']['#disabled'] = 'true';
          }
        }
      }
    }
  }
}

/**
 * Returns roles which present user can assigne, suitable for form options.
 */
function erpw_custom_current_user_assignable_system_roles($uid) {
  $system_roles = [];
  $roles = \Drupal::entityTypeManager()->getStorage('user_role')->loadMultiple();
  $current_user = \Drupal::entityTypeManager()->getStorage('user')->load($uid);
  foreach ($roles as $role) {
    $permission = "role-assign users with role " . $role->id();
    if ($current_user->hasPermission($permission) && !in_array($role->id(), ['anonymous', 'authenticated', 'administrator'])) {
      $system_roles[$role->id()] = $role->label();
    }
  }
  return $system_roles;
}

/**
 * {@inheritdoc}
 */
function _erpw_custom_cancel_service_provider(array &$form, FormStateInterface $form_state) {
  $referral = \Drupal::request()->query->get('referer');
  if (isset($referral) && $referral == 'review') {
    $url = Url::fromRoute('view.moderated_content.moderated_content');
  }
  else {
    $url = Url::fromRoute('view.manage_service.page_1');
  }
  $response = new RedirectResponse($url->toString());
  $response->send();
  return $response;
}

/**
 * Implements checking for p-code.
 */
function _erpw_custom_service_provider_form(array $form, FormStateInterface $form_state) {
  $p_code_value = [];
  if (empty($form_state->getValue('field_p_code')[0]['value'])) {
    for ($i = 4; $i >= 0; $i--) {
      $location_level = $form_state->getValue('level_' . $i);
      if (!empty($location_level)) {
        break;
      }
    }
    if (is_array($location_level)) {
      foreach ($location_level as $key => $value) {
        $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($key);
        $p_code_value[] = !$term->get('field_p_code')->isEmpty() ? $term->field_p_code->value : "";
      }
    }
    else {
      $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($location_level);
      $p_code_value[] = !$term->get('field_p_code')->isEmpty() ? $term->field_p_code->value : "";
    }
    $p_code_str_value = implode(",", $p_code_value);
    $form['field_p_code']['widget']['0']['value']['#value'] = $p_code_str_value;
    $form_state->setValue('field_p_code', [['value' => $p_code_str_value]]);
  }
  // Redirecting on detail page if user comes from homepage.
  $referral = \Drupal::request()->query->get('referer');
  $node = \Drupal::routeMatch()->getParameter('node');
  $moderation_state = $form_state->getValue('moderation_state')[0]['value'] ?? '';
  $roles = \Drupal::currentUser()->getRoles();
  // List of roles.
  $role_list = [
    'super_admin',
    'country_admin',
    'interagency_gbv_coordinator',
    'administrator',
  ];
  if ($moderation_state == 'draft' && !in_array($roles[1], $role_list)) {
    \Drupal::messenger()->addMessage(t('You will be notified when the changes have been approved.'), 'status');
  }
  elseif ($moderation_state == 'draft' && in_array($roles[1], $role_list)) {
    \Drupal::messenger()->addMessage(t('The service has been created in draft.'), 'status');
  }
  elseif ($moderation_state == 'published' && in_array($roles[1], $role_list)) {
    \Drupal::messenger()->addMessage(t('The service has been approved.'), 'status');
  }
  elseif ($moderation_state == 'reject' && in_array($roles[1], $role_list)) {
    \Drupal::messenger()->addMessage(t('The service has been rejected.'), 'status');
  }

  // Redirecting to service detail page.
  if (isset($referral) && $referral == 'rpw' && $node instanceof NodeInterface) {
    $url = Url::fromRoute('entity.node.canonical', [
      'node' => $node->id(),
      'referer' => 'rpw',
    ]);
    $response = new RedirectResponse($url->toString());
    $response->send();
    return $response;
  }
  elseif (isset($referral) && $referral == 'review') {
    return _erpw_custom_redirect('view.moderated_content.moderated_content');
  }
  else {
    return _erpw_custom_redirect('view.manage_service.page_1');
  }
}

/**
 * {@inheritdoc}
 */
function cancelorganisation(array &$form, FormStateInterface $form_state) {
  $url = Url::fromRoute('view.organisations.page_1');
  $response = new RedirectResponse($url->toString());
  $response->send();
  return $response;
}

/**
 * {@inheritdoc}
 */
function _erpw_custom_delete_content(array &$form, FormStateInterface $form_state) {
  return _erpw_custom_redirect('erpw_custom.dashboard');
}

/**
 * {@inheritdoc}
 */
function _erpw_custom_service_handler(array &$form, FormStateInterface $form_state) {
  return _erpw_custom_redirect('view.manage_service_types.page_1', 'service_type');
}

/**
 * Function to redirect on a given route.
 */
function _erpw_custom_redirect($route_name, $page_type = NULL) {
  $url = Url::fromRoute($route_name)->toString();
  $response = new RedirectResponse($url);
  $response->send();

  return $response;
}

/**
 * {@inheritdoc}
 */
function _erpw_custom_update_service_type(array &$form, FormStateInterface $form_state) {
  $response = new AjaxResponse();
  $update_service_type = \Drupal::formBuilder()->getForm('Drupal\erpw_custom\Form\UpdatedServiceType');
  $response->addCommand(new OpenModalDialogCommand('', $update_service_type, ['width' => '400']));
  return $response;
}

/**
 * Checks if there is a duplicate Title in the database.
 */
function _erpw_custom_check_title_exist(&$form, &$form_state) {
  // Remove the last character from the string.
  $title_entered = substr($form_state->getValue('title')[0]['value'], 0, -1);
  $title_compared = '';
  $db = \Drupal::database();
  $results = $db->select('node_field_data', 'n')
    ->fields('n', ['title'])
    ->condition('n.type', 'service_type')
    ->execute();
  foreach ($results as $record) {
    $title_compared = substr($record->title, 0, -1);
    if ($title_compared === $title_entered) {
      $form_state->setErrorByName('title', t('Service Type Already Exists. Please update the Name and Save it again.'));
    }
  }
}

/**
 * A custom validation handler for the user login form.
 */
function _erpw_custom_organisation_node_form_validate(array &$form, FormStateInterface $form_state) {
  $title = $form_state->getValue('title');
  if ($title) {
    $update_title = trim($title[0]['value']);
    $query = \Drupal::entityQuery('node')
      ->condition('type', 'organisation')
      ->condition('title', $update_title);
    $nids = $query->execute();
    if ($nids) {
      $form_state->setErrorByName('title', t('Organisation already exists, kindly update the organisation name and save it again.'));
    }
  }
}

/**
 * A custom validation handler for the user login form.
 */
function _erpw_custom_form_user_email_validate(array &$form, FormStateInterface $form_state) {
  $errors = $form_state->getErrors();
  if (!empty($errors)) {
    $string_error = $errors['name'];
    if (strpos($string_error, 'Unrecognized username or password') !== FALSE) {
      $form_state->clearErrors();
      $form_state->setErrorByName('name', 'Email id or password is incorrect');
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function erpw_custom_preprocess_page_title(&$variables) {
  $route_name = \Drupal::routeMatch()->getRouteName();
  switch ($route_name) {
    case 'erpw_custom.sign_up_form':
      if (!\Drupal::currentUser()->id()) {
        $variables['title'] = t('Sign up');
      }
      break;

    case 'node.add':
      $type = \Drupal::routeMatch()->getParameter('node_type')->get('type');
      if ($type == 'organisation') {
        $variables['title'] = t('Add Organisation');
      }
      break;

    case 'entity.node.canonical':
      $node = \Drupal::routeMatch()->getParameter('node');
      if (!empty($node) && $node->bundle() == 'service_provider') {
        $variables['title'] = t('Service Information');
      }
      break;

    case 'entity.node.edit_form':
      $node = \Drupal::routeMatch()->getParameter('node');
      if (!empty($node) && $node->bundle() == 'service_provider') {
        $referral = \Drupal::request()->query->get('referer');
        if (isset($referral) && $referral == 'rpw') {
          $variables['title'] = t("Suggest a Change");
        }
        else {
          $variables['title'] = t("Edit Service Form");
        }
      }
      break;

    case 'entity.user.edit_form':
      if (\Drupal::request()->get('pass-reset-token')) {
        $variables['title'] = t('Set User Password');
      }
      break;
  }
}

/**
 * Implements hook_user_logout().
 */
function erpw_custom_user_logout() {
  // We redirect to an external site.
  $response = new RedirectResponse('/');
  $response->send();
  return $response;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function erpw_custom_preprocess_status_messages(&$variables) {
  $route_name = \Drupal::routeMatch()->getRouteName();
  // Altering status message for service list.
  if ($route_name == 'view.moderated_content.moderated_content') {
    if (isset($variables['message_list']['status'])) {
      $status_messages = $variables['message_list']['status'];
      foreach ($status_messages as $delta => $message) {
        if (strpos((string) $message, 'Service') !== FALSE) {
          unset($variables['message_list']['status'][$delta]);
        }
      }
    }
  }
  // Altering status message for service list.
  if ($route_name == 'view.manage_service.page_1' || $route_name == 'entity.node.canonical') {
    if (isset($variables['message_list']['status'])) {
      $status_messages = $variables['message_list']['status'];
      foreach ($status_messages as $delta => $message) {
        if (strpos((string) $message, 'Service') !== FALSE) {
          $variables['message_list']['status'][$delta] = t("The Service is saved successfully.");
        }
      }
    }
  }
  // Altering status message for RPW.
  if ($route_name == 'view.referral_pathway_listing.page_1') {
    if (isset($variables['message_list']['status'])) {
      $status_messages = $variables['message_list']['status'];
      foreach ($status_messages as $delta => $message) {
        if (strpos((string) $message, 'Referral Pathway') !== FALSE) {
          $variables['message_list']['status'][$delta] = t(
           "The Referral Path Way is saved successfully."
          );
        }
      }
    }
  }
  // Altering error message for organisation.
  if ($route_name == 'node.add') {
    $type = \Drupal::routeMatch()->getParameter('node_type')->get('type');
    if ($type == 'organisation') {
      if (isset($variables['message_list']['error'])) {
        $status_messages = $variables['message_list']['error'];
        foreach ($status_messages as $delta => $message) {
          if (strpos((string) $message, 'The title must be unique.') !== FALSE) {
            $variables['message_list']['error'][$delta] = t(
              "Organisation already exists, kindly update the organisation name and save it again."
            );
          }
        }
      }
    }
  }
  // Altering error message for organisation.
  if ($route_name == 'user.login') {
    if (isset($variables['message_list']['error'])) {
      $status_messages = $variables['message_list']['error'];
      foreach ($status_messages as $delta => $message) {
        if (strpos((string) $message, 'The user has not been activated yet or is blocked.') !== FALSE) {
          $variables['message_list']['error'][$delta] = t(
            "Your registration has been sent for review."
          );
        }
        if (strpos((string) $message, 'has not been activated or is blocked.') !== FALSE) {
          $variables['message_list']['error'][$delta] = t(
            "You will be notified via email, once your registration is approved."
          );
        }
      }
    }
  }

}

/**
 * Implements hook_views_query_alter().
 */
function erpw_custom_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if (($view->id() == "user_lists" &&
    ($view->current_display == 'page_1' || $view->current_display == 'page_2')) ||
    ($view->id() == "user_count_approval_block" && $view->current_display == 'block_1')) {
    $permission = 'view users of their own country';
    $location_condition = 'user__field_location.field_location_target_id';
    $query = erpw_view_results_own_country_permissions($query, $location_condition, $permission);
    $permission = 'view users of their own location';
    $query = erpw_view_results_own_location_organisation($query, $location_condition, NULL, $permission);
    $permission = 'view users of their own location and organisation';
    $org_condition = 'user__field_organisation.field_organisation_target_id';
    $query = erpw_view_results_own_location_organisation($query, $location_condition, $org_condition, $permission);
  }
  if ($view->id() == "referral_pathway_listing" && $view->current_display == 'page_1') {
    $permission = 'view referral pathway of their own country';
    $condition_field = 'node__field_location.field_location_target_id';
    $query = erpw_view_results_own_country_permissions($query, $condition_field, $permission);
    $permission = 'view referral pathway of their own location';
    $query = erpw_view_results_own_location_organisation($query, $condition_field, NULL, $permission);
  }

  if ($view->id() == "referral_pathway_on_homepage") {
    /*
     * Modify referral pathways to show results
     * from the nearest lower level of the active location,
     * if there is no referral pathway for the active location.
     */

    // Load active tid from the location field.
    foreach ($query->where[1]['conditions'] as $condition) {
      if (isset($condition['field']) && $condition['field'] === 'node__field_location.field_location_target_id') {
        $current_tid = $condition['value'];
      }
    }
    // Load the taxonomy term and get the next terms.
    if (isset($_COOKIE['location_tid'])) {
      $term_storage = \Drupal::service('entity_type.manager')->getStorage('taxonomy_term');
      $parent_term = $term_storage->load($current_tid);
      $tree = $term_storage->loadTree($parent_term->bundle(), $current_tid);
      $child_tids = [];
      foreach ($tree as $term) {
        $child_tids[] = $term->tid;
      }
      
      // Check if there is content for the current ID or any of its child terms.
      $has_content = erpw_custom_has_content_for_terms(
        [$current_tid, ...$child_tids], 'referral_path_way', 'field_location');
    }

    // Use the first term with content found as the current term.
    if ($has_content) {
      $current_tid = $has_content;
    }

    // Modify the tid value based on the above conditions.
    $conditions = &$query->where[1]['conditions'];
    foreach ($conditions as $index => $condition) {
      if (isset($condition['field']) && $condition['field'] == 'node__field_location.field_location_target_id') {
        $query->where[1]['conditions'][$index]['value'] = $current_tid;
      }
    }
  }

  if ($view->id() == "manage_service" && $view->current_display == 'page_1') {
    $permission = 'view service of their own country';
    $condition_field = 'node__field_location.field_location_target_id';
    $query = erpw_view_results_own_country_permissions($query, $condition_field, $permission);
    $permission = 'view service of their own location';
    $query = erpw_view_results_own_location_organisation($query, $condition_field, NULL, $permission);
    $permission = 'view service of their own location and organisation';
    $org_condition = 'node__field_select_organisation.field_select_organisation_target_id';
    $query = erpw_view_results_own_location_organisation($query, $condition_field, $org_condition, $permission);
  }
  if ($view->id() == "moderated_content" && $view->current_display == 'moderated_content') {
    $permission = 'view service of their own country';
    $condition_field = 'node_field_data_node_field_revision__node__field_location.field_location_target_id';
    $query = erpw_view_results_own_country_permissions($query, $condition_field, $permission);
    $permission = 'view service of their own location';
    $query = erpw_view_results_own_location_organisation($query, $condition_field, NULL, $permission);
    $permission = 'view service of their own location and organisation';
    $org_condition = 'node_field_data_node_field_revision__node__field_select_organisation.field_select_organisation_target_id';
    $query = erpw_view_results_own_location_organisation($query, $condition_field, $org_condition, $permission);
  }
}

/**
 * Checks if there is content for any of the given taxonomy term IDs.
 *
 * @param array $termIds
 *   An array of taxonomy term IDs.
 * @param string $contentType
 *   The machine name of the content type.
 * @param string $taxonomyField
 *   The machine name of the taxonomy term field.
 *
 * @return int|false
 *   The taxonomy term ID with content, or false if no content is found.
 */
function erpw_custom_has_content_for_terms(array $termIds, $contentType, $taxonomyField) {
  foreach ($termIds as $tid) {
    $has_content = \Drupal::entityQuery('node')
      ->condition('type', $contentType)
      ->condition($taxonomyField, $tid)
      ->range(0, 1)
      ->execute();
    if ($has_content) {
      return $tid;
    }
  }

  return FALSE;
}

/**
 * Callback for hook_views_query_alter alter query.
 */
function erpw_view_results_own_location_organisation($query, $location_condition, $org_condition = NULL, $permission = NULL) {
  $uid = \Drupal::currentUser()->id();
  $current_user = User::load($uid);
  if ($uid != 1 && !$current_user->hasRole('administrator') && $current_user->hasPermission($permission)) {
    if ($current_user->hasField('field_location') && !$current_user->get('field_location')->isEmpty()) {
      $location_id = $current_user->get('field_location')->getValue()[0]['target_id'];
      $ptids = get_child_term_tid($location_id);
    }
    $org_id = '';
    if ($current_user->hasField('field_organisation') && !$current_user->get('field_organisation')->isEmpty()) {
      $org_id = $current_user->get('field_organisation')->getValue()[0]['target_id'];
    }
    foreach ($query->where as &$condition_group) {
      foreach ($condition_group['conditions'] as &$condition) {
        if ($condition['field'] == $location_condition) {
          $condition = [
            'field' => $location_condition,
            'value' => $ptids,
            'operator' => 'in',
          ];
        }
        if ($condition['field'] == $org_condition) {
          $condition = [
            'field' => $org_condition,
            'value' => $org_id,
            'operator' => '=',
          ];
        }
      }
    }
  }
  return $query;
}

/**
 * Callback for hook_views_query_alter alter query.
 */
function erpw_view_results_own_country_permissions($query, $condition_field, $permission) {
  $uid = \Drupal::currentUser()->id();
  $current_user = User::load($uid);
  if ($uid != 1 && !$current_user->hasRole('administrator') && $current_user->hasPermission($permission)) {
    if ($current_user->hasField('field_location') && !$current_user->get('field_location')->isEmpty()) {
      $location_id = $current_user->get('field_location')->getValue()[0]['target_id'];
      $ptids = \Drupal::service('erpw_location.location_services')->getChildrenByParent($location_id);
    }
    foreach ($query->where as &$condition_group) {
      foreach ($condition_group['conditions'] as &$condition) {
        if ($condition['field'] == $condition_field) {
          $condition = [
            'field' => $condition_field,
            'value' => $ptids,
            'operator' => 'in',
          ];
          break;
        }
      }
    }
  }
  return $query;
}

/**
 * Callback for location permission.
 */
function erpw_filter_locations_permissions($location_options, $permission, $type = 'term_entity') {
  $uid = \Drupal::currentUser()->id();
  $current_user = User::load($uid);
  if ($uid != 1 && $location_options && !$current_user->hasRole('administrator') && $current_user->hasPermission($permission)) {
    $location_id = FALSE;
    if ($current_user->hasField('field_location') && !$current_user->get('field_location')->isEmpty()) {
      $location_id = $current_user->get('field_location')->getValue()[0]['target_id'];
    }
    if ($location_id) {
      $ptid = \Drupal::service('erpw_location.location_services')->getChildrenByParent($location_id);
      $ptid = reset($ptid);
      foreach ($location_options as $eid => $option) {
        $tid = $eid;
        if ($type == 'location_entity') {
          $location_entity = \Drupal::entityTypeManager()->getStorage('location')->load($eid);
          $tid = '';
          if ($location_entity) {
            if ($location_entity->hasField('field_location_taxonomy_term') && !$location_entity->get('field_location_taxonomy_term')->isEmpty()) {
              $tid = $location_entity->get('field_location_taxonomy_term')->getValue()[0]['target_id'];
            }
          }
        }
        if ($tid != $ptid) {
          unset($location_options[$eid]);
        }
      }
    }
  }
  return $location_options;
}

/**
 * Get child term by parant tid.
 */
function get_child_term_tid($ptid) {
  $tree = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree(
    'country',
    $ptid
  );
  $result = [];
  $result[$ptid] = $ptid;
  foreach ($tree as $term) {
    $result[$term->tid] = $term->tid;
  }
  return $result;
}

/**
 * Implements hook_entity_presave().
 */
function erpw_custom_entity_presave(EntityInterface $entity) {
  // For services content type.
  if ($entity->getEntityTypeId() == 'node' && $entity->getType() == 'service_provider') {
    $service_title = $entity->get('title')->value;
    $entity->set('field_name_of_the_focal_point', $service_title);
  }
  // For service type content type.
  if ($entity->getEntityTypeId() == 'node' && $entity->getType() == 'service_type') {
    $node_title = trim($entity->get('title')->value);
    // If (strpos($node_title, '(') !== FALSE) {
    //   $node_title = preg_replace('/\s+/', '', $node_title);
    // }.
    if (preg_match("/'/u", $node_title)) {
      $node_title = str_replace("'", '', $node_title);
    }
    $entity->set('title', $node_title);
  }
  // This is madness, why force every single piece of content to be in all
  // (current!  Not future! pure madness) domains on save?
  // For assign domain id to domain access field.
  // if (in_array($entity->getentityTypeId(), ['node', 'user']) && $entity->hasField('field_domain_access')) {
  //  $all_domains = \Drupal::service('entity_type.manager')->getStorage('domain')->loadMultipleSorted(NULL);
  //  foreach ($all_domains as $domain) {
  //    $domain_status = $domain->get('status');
  //    if ($domain_status) {
  //      $domain_id[] = $domain->get('id');
  //    }
  //  }
  //  $entity->set('field_domain_access', $domain_id);
  // }.
}

/**
 * Implements hook_entity_form_mode_alter().
 */
function erpw_custom_entity_form_display_alter(&$form_display, $context) {
  if ($context['entity_type'] == 'user' && $context['bundle'] == 'user') {
    if (\Drupal::request()->get('pass-reset-token')) {
      $storage = \Drupal::service('entity_type.manager')->getStorage('entity_form_display');
      $form_display = $storage->load('user.user.user_password_reset');
    }
  }
}
