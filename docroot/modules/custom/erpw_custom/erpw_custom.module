<?php

/**
 * @file
 * Contains erpw_custom.module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\OpenModalDialogCommand;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Session\AccountProxyInterface;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\user\Entity\User;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\Views;
use Drupal\views\ViewExecutable;
use Drupal\webform\Entity\Webform;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function erpw_custom_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#submit'][] = 'erpw_custom_user_login_form_submit';
}

/**
 * Custom submit handler for the login form.
 */
function erpw_custom_user_login_form_submit($form, FormStateInterface $form_state) {
  $url = Url::fromRoute('<front>');
  $form_state->setRedirectUrl($url);
}

/**
 * Implements exposed form alter.
 */
function erpw_custom_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $view_ids = ['manage_service', 'moderated_content'];
  if ($form['#id'] === 'views-exposed-form-user-lists-page-1') {
    $form['#attached']['library'][] = "erpw_custom/vss2_css";
  }
  if ($form_id == 'views_exposed_form' && in_array($form_state->get('view')->id(), $view_ids)) {
    $form['field_service_type_target_id']['#type'] = 'select';
    $form['field_service_type_target_id']['#options'] = erpw_custom_service_type_options();
  }
  if ($form_id == 'views_exposed_form' && $form_state->get('view')->id() == 'user_lists') {
    $active_domain = \Drupal::service('domain.negotiator')->getActiveDomain();

    /* Filter Organisation by the active domain */

    // Load Organisation nodes for the active domain.
    $entity_type_manager = \Drupal::entityTypeManager();
    $node_storage = $entity_type_manager->getStorage('node');
    $query = $node_storage->getQuery();
    $query->condition('type', 'organisation');
    $query->condition('field_domain_access', $active_domain->id());
    $organisation_nids = $query->execute();

    // Retrieve the titles of the organisations.
    $organisations = $node_storage->loadMultiple($organisation_nids);
    $organisation_options = ['All' => t('All')];
    foreach ($organisations as $organisation) {
      if ($organisation instanceof NodeInterface) {
        $organisation_options[$organisation->id()] = $organisation->label();
      }
    }

    // Set the filtered options for the field_organisation_target_id_verf exposed filter.
    $form['field_organisation_target_id_verf']['#options'] = $organisation_options;
    $form['roles_target_id']['#options']['All'] = t('All');
    $permission = 'view users of their own location and organisation';
    $permission2 = 'view users of their own organisation';
    $uid = \Drupal::currentUser()->id();
    $current_user = User::load($uid);
    if ($uid != 1 && !$current_user->hasRole('administrator') && ($current_user->hasPermission($permission) || $current_user->hasPermission($permission2))) {
      $form['field_organisation_target_id_verf']['#access'] = FALSE;
    }

    // Exposed roles fields option restriction based on the current role.
    // SPFP can only review SP staff.
    if ($form_state->get('view')->current_display == 'page_2') {
      if ($current_user->hasRole('service_provider_focal_point')) {
        unset($form['roles_target_id']['#options']['interagency_gbv_coordinator']);
        unset($form['roles_target_id']['#options']['country_admin']);
        unset($form['roles_target_id']['#options']['service_provider_focal_point']);
      }
      // IA Coordinator can only see SP Staff and SPFP.
      if ($current_user->hasRole('interagency_gbv_coordinator')) {
        unset($form['roles_target_id']['#options']['interagency_gbv_coordinator']);
        unset($form['roles_target_id']['#options']['country_admin']);
      }
    }

  }

  if ($form_id == 'views_exposed_form' && $form_state->get('view')->id() == 'user_listing_by_status') {
    $form['status']['#options']['1'] = t('Approved');
    $form['status']['#options']['0'] = t('Rejected');
    $form['status']['#options']['blocked'] = t('Blocked');
    unset($form['roles_target_id']['#options']['super_admin']);
    unset($form['roles_target_id']['#options']['administrator']);
  }
}

/**
 * Callback to get service type options array.
 */
function erpw_custom_service_type_options() {
  $languagecode = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $query = \Drupal::database()->select("node_field_data", "n");
  $query->innerJoin('node__field_service_type', 'ns', 'n.nid = ns.field_service_type_target_id AND n.langcode = ns.langcode');
  $query->fields('n', ['nid', 'title']);
  $query->condition('n.type', 'service_type');
  $query->condition('ns.bundle', 'service_provider');
  $query->condition('ns.langcode', $languagecode);
  $query->condition('n.status', '1');
  $query->orderBy('n.title', 'ASC');
  $query = $query->execute();
  $results = $query->fetchAll();
  $options[''] = t('All');
  foreach ($results as $value) {
    $options[$value->nid] = $value->title;
  }
  return $options;
}

/**
 * Implements hook_views_pre_render().
 */
// This is no longer required as service_list view is not used now.
// Function erpw_custom_views_pre_render(ViewExecutable $view) {
//   if ($view->id() == 'service_list') {
//     $parameters = \Drupal::routeMatch()->getParameters()->all();
//     // Add active tid from cookies as a fallback,
//     // when there is no query parameter from referral_pathway_on_homepage view.
//     if (!$parameters['arg_1']) {
//       $parameters['arg_1'] = $_COOKIE['location_tid'];
//     }
//     // Conditionals are here to stop a fatal error, including when previewing
//     // the view when editing it.  @TODO get the parameter the Views way.
//     // Alternatively, use views to provide the title.
//     $nid = $parameters['arg_0'] ?: NULL;
//     if (!$nid) {
//       return;
//     }
//     $node = Node::load($nid);
//     $title = ($node) ? $node->getTitle() : t('Services');
//     $view->setTitle($title);
//   }
// }

/**
 * Implements hook_form_alter().
 */
function erpw_custom_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'user_cancel_form') {
    $uid = \Drupal::currentUser()->id();

    $current_user = User::load($uid);
    if ($uid != 1  && !$current_user->hasRole('administrator')) {
      // Enable Email notification to the user.
      $form['user_cancel_notify']['#default_value'] = TRUE;
      $form['user_cancel_method']['#access'] = FALSE;
      $form['user_cancel_confirm']['#access'] = FALSE;
    }
  }
  if ($form_id == 'node_referral_path_way_edit_form' || $form_id == 'node_referral_path_way_form') {
    $permission = ($form_id == 'node_referral_path_way_edit_form') ? 'edit referral pathway of their own country' : 'add referral pathway of their own country';
    $form['location']['level_0']['#options'] = erpw_filter_locations_permissions($form['location']['level_0']['#options'], $permission);
    $form['location']['level_0']['#empty_option'] = t('Select country');
  }
  if ($form_id == 'user_location_form') {
    $permission = 'view location of their own country';
    $form['location_options']['#options'] = erpw_filter_locations_permissions($form['location_options']['#options'], $permission, 'location_entity');
    $form['location_options']['#empty_option'] = t('Select country');
  }
  if ($form_id == 'sign_up') {
    if (isset($form['location']['level_0']['#options'])) {
      $permission = 'add new user for their own country';
      $form['location']['level_0']['#options'] = erpw_filter_locations_permissions($form['location']['level_0']['#options'], $permission);
      $form['location']['level_0']['#empty_option'] = t('Select country');
    }
    $form['#attached']['library'][] = "erpw_custom/vss2_css";
  }
  if ($form_id == 'user_form') {
    if (isset($form['location']['level_0']['#options'])) {
      $permission = 'edit users of their own country';
      $form['location']['level_0']['#options'] = erpw_filter_locations_permissions($form['location']['level_0']['#options'], $permission);
      $form['location']['level_0']['#empty_option'] = t('Select country');
    }
    // WARNING we are in a weird parallel user role system where user roles are assigned to a regular field.
    $allowed_user_roles = erpw_custom_current_user_assignable_system_roles(\Drupal::currentUser()->id());
    if ($allowed_user_roles) {
      $form['field_system_role']['widget']['#options'] = $allowed_user_roles;
    }
    else {
      $form['field_system_role']['#access'] = FALSE;
    }
    $form['#validate'][] = 'user_form_validation_organisation_validate';
  }
  if ($form_id == 'node_organisation_form') {
    $form['revision_information']['#access'] = FALSE;
    $form['actions']['submit']['#value'] = t('Publish');
    $form['actions']['preview']['#access'] = FALSE;
    $form['#validate'][] = '_erpw_custom_organisation_node_form_validate';
    $form['title']['widget'][0]['value']['#attributes']['placeholder'] = t('Enter organisation name');
    $form['actions']['cancel'] = [
      '#type' => 'submit',
      '#value' => t('CANCEL'),
      '#submit' => ['cancelorganisation'],
      '#weight' => 30,
      '#limit_validation_errors' => [],
    ];
  }

  if ($form_id == 'user_login_form') {
    // Code to modify your form input.
    $form['name']['#placeholder'][] = t('jane@example.com');
    $form['pass']['#placeholder'][] = t('**********');
    $form['name']['#title'] = t('Email ID');
    unset($form['name']['#description']);
    unset($form['pass']['#description']);
    $form['actions']['submit']['#value'] = t('SIGN IN');
    $form['#validate'][] = '_erpw_custom_form_user_email_validate';
  }

  $common_form_ids = [
    'node_service_type_form',
    'node_service_type_edit_form',
    'node_referral_path_way_form',
    'node_referral_path_way_edit_form',
    'node_service_type_quick_node_clone_form',
  ];
  if (in_array($form_id, $common_form_ids)) {
    $form['advanced']['#access'] = FALSE;
    $form['meta']['#access'] = FALSE;
    $form['status']['#access'] = FALSE;
    $form['revision_information']['#access'] = FALSE;
    $form['options']['#access'] = FALSE;
    $form['author']['#access'] = FALSE;
    $form['moderation_state']['#access'] = FALSE;
    $form['content_translation']['#access'] = FALSE;
  }

  if ($form_id == 'node_service_type_form' || $form_id == 'node_service_type_quick_node_clone_form') {
    $form['#validate'][] = '_erpw_custom_check_title_exist';
    $form['#title'] = t('Add Service Type');
  }

  if (in_array($form_id,
    [
      'node_service_type_form',
      'node_service_type_edit_form',
      'node_service_type_quick_node_clone_form',
    ])) {
    $form['actions']['submit']['#submit'][] = '_erpw_custom_service_handler';
  }

  if ($form_id == 'node_service_type_edit_form') {
    $form['#attached']['library'][] = 'core/drupal.dialog.ajax';
    $form['#prefix'] = '<div id="status-message"></div>';
    $form['actions']['submit']['#attributes']['class'][] = 'use-ajax ok-btn';
    $form['#title'] = t('Update Service Type');
  }

  if ($form_id == 'node_service_type_quick_node_clone_form') {
    $form['additional_settings']['#access'] = FALSE;
  }

  if ($form_id == 'node_service_type_delete_form') {
    $form['description']['#access'] = FALSE;
    $form['actions']['submit']['#submit'][] = '_erpw_custom_delete_content';
    $form['actions']['cancel']['#access'] = FALSE;
    $form['actions']['submit']['#value'] = t('BACK TO DASHBOARD');
  }

  // To alter buttons text for Add forms.
  if (in_array($form_id,
    [
      'node_service_type_form',
      'node_referral_path_way_form',
      'node_service_type_quick_node_clone_form',
    ])) {
    $form['source_langcode']['#access'] = FALSE;
    $form['actions']['submit']['#value'] = t('PUBLISH');
  }
  // Update the translation buttons for RPW edit form.
  if ($form_id == 'node_referral_path_way_edit_form') {
    $form['actions']['submit']['#value'] = t('UPDATE');
    $form['actions']['delete']['#access'] = FALSE;
    $form['actions']['delete_translation']['#access'] = FALSE;
  }
  // To alter buttons text for Service Type Edit form.
  if ($form_id == 'node_service_type_edit_form') {
    $form['actions']['submit']['#value'] = t('UPDATE');
    $form['actions']['delete']['#access'] = FALSE;
    $form['actions']['preview']['#access'] = FALSE;
    $form['actions']['delete_translation']['#access'] = FALSE;

    $form['actions']['cancel'] = [
      '#type' => 'submit',
      '#submit' => ['_erpw_custom_service_handler'],
      '#limit_validation_errors' => [],
      '#attributes' => [
        'class' => [
          'button-border',
        ],
      ],
      '#value' => t('CANCEL'),
    ];
    $form['actions']['submit']['#weight'] = 5;
    $form['actions']['cancel']['#weight'] = 10;
  }
  // Hide the Reject state for service add form.
  if ($form_id == 'node_service_provider_form') {
    $form['source_langcode']['#access'] = FALSE;
    unset($form['moderation_state']['widget'][0]['state']['#options']['reject']);
  }
  // Form alter for Add new Service Provider form.
  if ($form_id == 'node_service_provider_form' || $form_id == 'node_service_provider_edit_form') {
    $form['actions']['delete_translation']['#access'] = FALSE;
    $permission = ($form_id == 'node_service_provider_edit_form') ? 'edit service of their own country' : 'add service of their own country';
    if (isset($form['location']['level_0']['#options'])) {
      $form['location']['level_0']['#options'] = erpw_filter_locations_permissions($form['location']['level_0']['#options'], $permission);
    }
    $form['location']['level_0']['#empty_option'] = t('Select country');
    $uid = \Drupal::currentUser()->id();
    $current_user = User::load($uid);
    if ($uid != 1  && !$current_user->hasRole('administrator') &&
    ($current_user->hasPermission('edit service of their own location and organisation') || $current_user->hasPermission('edit service of their own location and organisation'))) {
      if ($current_user->hasField('field_organisation') && !$current_user->get('field_organisation')->isEmpty()) {
        $org_id = $current_user->get('field_organisation')->getValue()[0]['target_id'];
        $form['field_select_organisation']['widget']['#disabled'] = TRUE;
        $form['field_select_organisation']['widget']['#default_value'] = $org_id;
      }
    }
    // Hide moderation state option for staff only.
    if ($current_user->hasRole('service_provider_staff')) {
      $form['moderation_state']['#attributes']['class'][] = 'hidden';
    }
    $form['advanced']['#access'] = FALSE;
    $form['meta']['#access'] = FALSE;
    $form['status']['#access'] = FALSE;
    $form['revision_information']['#access'] = FALSE;
    $form['options']['#access'] = FALSE;
    $form['author']['#access'] = FALSE;
    $form['content_translation']['#access'] = FALSE;
    $form['field_location']['#access'] = FALSE;
    $form['#title'] = t("Add Service Form");
    $form['actions']['submit']['#value'] = t('Publish');
    $referral = \Drupal::request()->query->get('referer');
    if (isset($referral) && $referral == 'rpw') {
      $form['#title'] = t("Suggest a Change");
      $form['actions']['submit']['#value'] = t('Submit Change');
    }
    $form['actions']['cancel'] = [
      '#type' => 'submit',
      '#value' => t('CANCEL'),
      '#submit' => ['_erpw_custom_cancel_service_provider'],
      '#weight' => 30,
      '#limit_validation_errors' => [],
    ];
    $form['#attached']['library'][] = 'erpw_custom/erpw_js';
    $form['actions']['delete']['#access'] = FALSE;
    array_unshift($form['actions']['submit']['#submit'], '_erpw_custom_service_provider_form');
  }
  if (!\Drupal::request()->get('pass-reset-token')) {
    if (\Drupal::routeMatch()->getRouteName() == 'entity.user.edit_form') {
      $current_user_id = \Drupal::currentUser()->id();
      $roles = \Drupal::currentUser()->getRoles();
      $form_user_id = \Drupal::request()->attributes->get('user')->id();
      foreach ($roles as $role) {
        if ($role != 'administrator' && $role != 'country_admin') {
          if ($current_user_id == $form_user_id) {
            $form['field_location']['#access'] = FALSE;
            $form['field_organisation']['#access'] = FALSE;
            $form['field_position']['#access'] = FALSE;
            $form['field_system_role']['#access'] = FALSE;
          }
        }
      }
    }
  }

  if ($form_id === 'node_organisation_delete_form') {
    $type = \Drupal::routeMatch()->getParameter('node')->bundle();
    if ($type == 'organisation') {
      $node = \Drupal::routeMatch()->getParameter('node');
      // Get all users who have the node id.
      $node_id = $node->id();
      $query = \Drupal::entityTypeManager()->getStorage('user')->getQuery();
      $query->condition('status', 1);
      $query->condition('field_organisation', $node_id);
      $user_ids = $query->execute();
      // Get all services who have the node id (look into webform-submissions for services data.)
      $webform_submission_storage = \Drupal::entityTypeManager()->getStorage('webform_submission');
      $webform_submissions = $webform_submission_storage->loadMultiple();
      $number_of_services_provided_by_the_organisation = 0;
      foreach ($webform_submissions as $webform) {
        $data = $webform->getData();
        if (isset($data['organisation']) && $data['organisation'] === $node_id) {
          $number_of_services_provided_by_the_organisation++;
        }
      }

      $delete_confirmation_message = t('Deleting the organization will lead to deleting or distorting the existing data. Please review the existing organizations and services first.');
      if (count($user_ids) > 0 && $number_of_services_provided_by_the_organisation > 0) {
        $delete_confirmation_message = t('This organization is related to @domains users and @services services. Deleting the organization will lead to deleting or distorting the existing data. Please review the existing organizations and services first.', ['@domains' => count($user_ids), '@services' => $number_of_services_provided_by_the_organisation]);
      }
      elseif (count($user_ids) === 0 && $number_of_services_provided_by_the_organisation > 0) {
        $delete_confirmation_message = t('This organization is related to @services services. Deleting the organization will lead to deleting or distorting the existing data. Please review the existing organizations and services first.', ['@domains' => count($user_ids), '@services' => $number_of_services_provided_by_the_organisation]);
      }
      elseif (count($user_ids) > 0 && $number_of_services_provided_by_the_organisation === 0) {
        $delete_confirmation_message = t('This organization is related to @domains users. Deleting the organization will lead to deleting or distorting the existing data. Please review the existing organizations and services first.', ['@domains' => count($user_ids), '@services' => $number_of_services_provided_by_the_organisation]);
      }
      $form['description']['#markup'] = $delete_confirmation_message;
    }
  }

  if ($form_id === 'node_feedback_area_delete_form') {
    // Get the current feeback id.
    $feedback_area = \Drupal::routeMatch()->getParameter('node');
    $feedback_area_id = $feedback_area->id();
    // Extract all the webforms using a feedback area.
    $webform_storage = \Drupal::entityTypeManager()->getStorage('webform');
    $webform_entities = $webform_storage->loadMultiple();
    $webform_feedback_area_count = 0;
    $webform_names = [];
    foreach ($webform_entities as $webform_entity) {
      $webform_feedback_area_id = $webform_entity->getElementsInitialized()['service_submission_id']['#feedback_area'];
      if ($webform_feedback_area_id != NULL && $webform_feedback_area_id === $feedback_area_id) {
        $webform_feedback_area_count++;
        $webform_names[] = $webform_entity->label();
      }
    }

    $delete_confirmation_message = t('Deleting the feedback area will lead to deleting or distorting the existing data.');
    if ($webform_feedback_area_count > 0) {
      $webform_plurality = $webform_feedback_area_count > 1 ? 'webforms' : 'webform';
      $webform_name = implode(", ", $webform_names);
      $delete_confirmation_message = t('This feedback area is used in @webforms_count @webform_plurality (@webform_name). Please review the existing @webform_plurality first.', ['@webforms_count' => $webform_feedback_area_count, '@webform_name' => $webform_name, '@webform_plurality' => $webform_plurality]);
      unset($form['actions']['submit']);
    }
    $form['description']['#markup'] = $delete_confirmation_message;
  }
}

/**
 * Custom validation function for the user organisation field.
 */
function user_form_validation_organisation_validate($form, &$form_state) {
  $form_user_id = \Drupal::request()->attributes->get('user')->id();
  $form_user_role = User::load($form_user_id)->getRoles();
  if (!\Drupal::request()->get('pass-reset-token')) {
    if (!in_array($form_user_role[1], ['administrator', 'super_admin'])) {
      $organisation_id = $form_state->getValue('field_organisation')[0]['target_id'];
      $field_location = $form_state->getValue('field_location');
      $location_ids = [];
      if (is_array($field_location)) {
        $i = 0;
        foreach ($field_location as $location) {
          $location_id = $field_location[$i]['target_id'] ?? NULL;
          if ($location_id != NULL) {
            $location_ids[] = $location_id;
          }
          $i++;
        }
      }

      // Get domain from organisation node.
      $organization_node = Node::load($organisation_id);
      if ($organization_node) {
        $field_domain_access = $organization_node->get('field_domain_access')->getValue();
        if (!empty($field_domain_access)) {
          $organisation_domain_access = $field_domain_access[0]['target_id'];
        }
      }
      else {
        $organisation_domain_access = NULL;
      }

      $parent_tids = [];
      foreach ($location_ids as $index => $location_id) {
        $parents = \Drupal::service('erpw_location.location_services')->getAllAncestors($location_id);
        $parent_tids[] = $parents[0];
      }

      $location_match = match_user_organisation_domain_location($organisation_domain_access, $parent_tids);

      if (!$location_match) {
        $form_state->setErrorByName('field_organisation', t('The organisation you have added does not match with the location of this user.'));
      }
    }
  }
  elseif (in_array($form_user_role[1], ['administrator', 'super_admin'])) {
    // Location field is required and this is missing for both the admin roles above.
    if (empty($form_state->getValue('field_location'))) {
      // @todo change this hard-coded location value when doing multisite.
      $form_state->setValue('field_location', 1);
    }
  }
}

/**
 * Checks if a user's organization domain access matches one of the given location PTIDs.
 *
 * @param string $organisation_domain_access
 *   The organization domain access to check.
 * @param int[] $location_ptids
 *   An array of location PTIDs to compare against.
 *
 * @return bool
 *   TRUE if there is a match between the organization domain access and any of the location PTIDs,
 *   FALSE otherwise.
 */
function match_user_organisation_domain_location($organisation_domain_access, $location_ptids) {
  $location_match = FALSE;
  foreach ($location_ptids as $ptid) {
    switch ($organisation_domain_access) {
      case 'zm_erefer_org':
        if ($ptid === 1) {
          $location_match = TRUE;
        }
        break;

      case 'bn_erefer_org':
        if ($ptid === 10401) {
          $location_match = TRUE;
        }
        break;

      case 'sl_erefer_org':
        if ($ptid === 16821) {
          $location_match = TRUE;
        }
        break;

      case 'txb_erefer_org':
        if ($ptid === 10926) {
          $location_match = TRUE;
        }
        break;

      default:
        $location_match = FALSE;
    }

    if ($location_match) {
      break;
    }
  }

  return $location_match;
}

/**
 * Returns roles which present user can assigne, suitable for form options.
 */
function erpw_custom_current_user_assignable_system_roles($uid) {
  $system_roles = [];
  $roles = \Drupal::entityTypeManager()->getStorage('user_role')->loadMultiple();
  $current_user = \Drupal::entityTypeManager()->getStorage('user')->load($uid);
  foreach ($roles as $role) {
    $permission = "role-assign users with role " . $role->id();
    if ($current_user->hasPermission($permission) && !in_array($role->id(), ['anonymous', 'authenticated', 'administrator'])) {
      $system_roles[$role->id()] = $role->label();
    }
  }
  return $system_roles;
}

/**
 * {@inheritdoc}
 */
function _erpw_custom_cancel_service_provider(array &$form, FormStateInterface $form_state) {
  $referral = \Drupal::request()->query->get('referer');
  if (isset($referral) && $referral == 'review') {
    $url = Url::fromRoute('view.moderated_content.moderated_content');
  }
  else {
    $url = Url::fromRoute('view.manage_service.page_1');
  }
  $response = new RedirectResponse($url->toString());
  $response->send();
  return $response;
}

/**
 * Implements checking for p-code.
 */
function _erpw_custom_service_provider_form(array $form, FormStateInterface $form_state) {
  $p_code_value = [];
  if (empty($form_state->getValue('field_p_code')[0]['value'])) {
    for ($i = 4; $i >= 0; $i--) {
      $location_level = $form_state->getValue('level_' . $i);
      if (!empty($location_level)) {
        break;
      }
    }
    if (is_array($location_level)) {
      foreach ($location_level as $key => $value) {
        $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($key);
        $p_code_value[] = !$term->get('field_p_code')->isEmpty() ? $term->field_p_code->value : "";
      }
    }
    else {
      $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($location_level);
      $p_code_value[] = !$term->get('field_p_code')->isEmpty() ? $term->field_p_code->value : "";
    }
    $p_code_str_value = implode(",", $p_code_value);
    $form['field_p_code']['widget']['0']['value']['#value'] = $p_code_str_value;
    $form_state->setValue('field_p_code', [['value' => $p_code_str_value]]);
  }
  // Redirecting on detail page if user comes from homepage.
  $referral = \Drupal::request()->query->get('referer');
  $node = \Drupal::routeMatch()->getParameter('node');
  $moderation_state = $form_state->getValue('moderation_state')[0]['value'] ?? '';
  $roles = \Drupal::currentUser()->getRoles();
  // List of roles.
  $role_list = [
    'super_admin',
    'country_admin',
    'interagency_gbv_coordinator',
    'administrator',
  ];
  if ($moderation_state == 'draft' && !in_array($roles[1], $role_list)) {
    \Drupal::messenger()->addMessage(t('You will be notified when the changes have been approved.'), 'status');
  }
  elseif ($moderation_state == 'draft' && in_array($roles[1], $role_list)) {
    \Drupal::messenger()->addMessage(t('The service has been created in draft.'), 'status');
  }
  elseif ($moderation_state == 'published' && in_array($roles[1], $role_list)) {
    \Drupal::messenger()->addMessage(t('The service has been approved.'), 'status');
  }
  elseif ($moderation_state == 'reject' && in_array($roles[1], $role_list)) {
    \Drupal::messenger()->addMessage(t('The service has been rejected.'), 'status');
  }

  // Redirecting to service detail page.
  if (isset($referral) && $referral == 'rpw' && $node instanceof NodeInterface) {
    $url = Url::fromRoute('entity.node.canonical', [
      'node' => $node->id(),
      'referer' => 'rpw',
    ]);
    $response = new RedirectResponse($url->toString());
    $response->send();
    return $response;
  }
  elseif (isset($referral) && $referral == 'review') {
    return _erpw_custom_redirect('view.moderated_content.moderated_content');
  }
  else {
    return _erpw_custom_redirect('view.manage_service.page_1');
  }
}

/**
 * {@inheritdoc}
 */
function cancelorganisation(array &$form, FormStateInterface $form_state) {
  $url = Url::fromRoute('view.organisations.page_1');
  $response = new RedirectResponse($url->toString());
  $response->send();
  return $response;
}

/**
 * {@inheritdoc}
 */
function _erpw_custom_delete_content(array &$form, FormStateInterface $form_state) {
  return _erpw_custom_redirect('erpw_custom.dashboard');
}

/**
 * {@inheritdoc}
 */
function _erpw_custom_service_handler(array &$form, FormStateInterface $form_state) {
  return _erpw_custom_redirect('view.manage_service_types.page_1', 'service_type');
}

/**
 * Function to redirect on a given route.
 */
function _erpw_custom_redirect($route_name, $page_type = NULL) {
  $url = Url::fromRoute($route_name)->toString();
  $response = new RedirectResponse($url);
  $response->send();

  return $response;
}

/**
 * {@inheritdoc}
 */
function _erpw_custom_update_service_type(array &$form, FormStateInterface $form_state) {
  $response = new AjaxResponse();
  $update_service_type = \Drupal::formBuilder()->getForm('Drupal\erpw_custom\Form\UpdatedServiceType');
  $response->addCommand(new OpenModalDialogCommand('', $update_service_type, ['width' => '400']));
  return $response;
}

/**
 * Checks if there is a duplicate Title in the database.
 */
function _erpw_custom_check_title_exist(&$form, &$form_state) {
  // Remove the last character from the string.
  $title_entered = substr($form_state->getValue('title')[0]['value'], 0, -1);
  $title_compared = '';
  $db = \Drupal::database();
  $results = $db->select('node_field_data', 'n')
    ->fields('n', ['title'])
    ->condition('n.type', 'service_type')
    ->execute();
  foreach ($results as $record) {
    $title_compared = substr($record->title, 0, -1);
    if ($title_compared === $title_entered) {
      $form_state->setErrorByName('title', t('Service Type Already Exists. Please update the Name and Save it again.'));
    }
  }
}

/**
 * A custom validation handler for the user login form.
 */
function _erpw_custom_organisation_node_form_validate(array &$form, FormStateInterface $form_state) {
  $title = $form_state->getValue('title');
  if ($title) {
    $update_title = trim($title[0]['value']);
    $query = \Drupal::entityQuery('node')
      ->condition('type', 'organisation')
      ->condition('title', $update_title);
    $nids = $query->execute();
    if ($nids) {
      $form_state->setErrorByName('title', t('Organisation already exists, kindly update the organisation name and save it again.'));
    }
  }
}

/**
 * A custom validation handler for the user login form.
 */
function _erpw_custom_form_user_email_validate(array &$form, FormStateInterface $form_state) {
  $errors = $form_state->getErrors();
  if (!empty($errors)) {
    $string_error = $errors['name'];
    if (strpos($string_error, 'Unrecognized username or password') !== FALSE) {
      $form_state->clearErrors();
      $form_state->setErrorByName('name', 'Email id or password is incorrect');
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function erpw_custom_preprocess_page_title(&$variables) {
  $route_name = \Drupal::routeMatch()->getRouteName();
  switch ($route_name) {
    case 'erpw_custom.sign_up_form':
      if (!\Drupal::currentUser()->id()) {
        $variables['title'] = t('Sign up');
      }
      break;

    case 'node.add':
      $type = \Drupal::routeMatch()->getParameter('node_type')->get('type');
      if ($type == 'organisation') {
        $variables['title'] = t('Add Organisation');
      }
      break;

    case 'entity.node.canonical':
      $node = \Drupal::routeMatch()->getParameter('node');
      if (!empty($node) && $node->bundle() == 'service_provider') {
        $variables['title'] = t('Service Information');
      }
      break;

    case 'entity.node.edit_form':
      $node = \Drupal::routeMatch()->getParameter('node');
      if (!empty($node) && $node->bundle() == 'service_provider') {
        $referral = \Drupal::request()->query->get('referer');
        if (isset($referral) && $referral == 'rpw') {
          $variables['title'] = t("Suggest a Change");
        }
        else {
          $variables['title'] = t("Edit Service Form");
        }
      }
      break;

    case 'entity.user.edit_form':
      if (\Drupal::request()->get('pass-reset-token')) {
        $variables['title'] = t('Set User Password');
      }
      break;

    case 'entity.node.delete_form':
      $node = \Drupal::routeMatch()->getParameter('node');
      $type = $node->bundle();
      $organisation_name = $node->get('title')->getValue()[0]['value'] ?? '';
      if ($type == 'organisation') {
        $variables['title'] = t('Are you sure you want to delete the @organization_name organization ?', ['@organization_name' => $organisation_name]);
      }
  }
}

/**
 * Implements hook_user_logout().
 */
function erpw_custom_user_logout() {
  // We redirect to an external site.
  $response = new RedirectResponse('/');
  $response->send();
  return $response;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function erpw_custom_preprocess_status_messages(&$variables) {
  $route_name = \Drupal::routeMatch()->getRouteName();
  // Altering status message for service list.
  if ($route_name == 'view.moderated_content.moderated_content') {
    if (isset($variables['message_list']['status'])) {
      $status_messages = $variables['message_list']['status'];
      foreach ($status_messages as $delta => $message) {
        if (strpos((string) $message, 'Service') !== FALSE) {
          unset($variables['message_list']['status'][$delta]);
        }
      }
    }
  }
  // Altering status message for service list.
  if ($route_name == 'view.manage_service.page_1' || $route_name == 'entity.node.canonical') {
    if (isset($variables['message_list']['status'])) {
      $status_messages = $variables['message_list']['status'];
      foreach ($status_messages as $delta => $message) {
        if (strpos((string) $message, 'Service') !== FALSE) {
          $variables['message_list']['status'][$delta] = t("The Service is saved successfully.");
        }
      }
    }
  }
  // Altering status message for RPW.
  if ($route_name == 'view.referral_pathway_listing.page_1') {
    if (isset($variables['message_list']['status'])) {
      $status_messages = $variables['message_list']['status'];
      foreach ($status_messages as $delta => $message) {
        if (strpos((string) $message, 'Referral Pathway') !== FALSE) {
          $variables['message_list']['status'][$delta] = t(
           "The Referral Path Way is saved successfully."
          );
        }
      }
    }
  }
  // Altering error message for organisation.
  if ($route_name == 'node.add') {
    $type = \Drupal::routeMatch()->getParameter('node_type')->get('type');
    if ($type == 'organisation') {
      if (isset($variables['message_list']['error'])) {
        $status_messages = $variables['message_list']['error'];
        foreach ($status_messages as $delta => $message) {
          if (strpos((string) $message, 'The title must be unique.') !== FALSE) {
            $variables['message_list']['error'][$delta] = t(
              "Organisation already exists, kindly update the organisation name and save it again."
            );
          }
        }
      }
    }
  }
  // Altering error message for organisation.
  if ($route_name == 'user.login') {
    if (isset($variables['message_list']['error'])) {
      $status_messages = $variables['message_list']['error'];
      foreach ($status_messages as $delta => $message) {
        if (strpos((string) $message, 'The user has not been activated yet or is blocked.') !== FALSE) {
          $variables['message_list']['error'][$delta] = t(
            "Your registration has been sent for review."
          );
        }
        if (strpos((string) $message, 'has not been activated or is blocked.') !== FALSE) {
          $variables['message_list']['error'][$delta] = t(
            "You will be notified via email, once your registration is approved."
          );
        }
      }
    }
  }

}

/**
 * Implements hook_views_query_alter().
 */
function erpw_custom_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  $cookie = \Drupal::service('erpw_location.location_cookie');
  if (($view->id() == "user_lists" &&
    ($view->current_display == 'page_1' || $view->current_display == 'page_2')) ||
    ($view->id() == "user_count_approval_block" && $view->current_display == 'block_1')) {
    $permission = 'view users of their own country';
    $location_condition = 'user__field_location.field_location_target_id';
    $query = erpw_view_results_own_country_permissions($query, $location_condition, $permission);
    $permission = 'view users of their own location';
    $query = erpw_view_results_own_location_organisation($query, $location_condition, NULL, $permission);
    $permission = 'view users of their own organisation';
    $org_condition = 'user__field_organisation.field_organisation_target_id';
    $query = erpw_view_results_own_organisation($query, $org_condition, $permission);
    $permission = 'view users of their own location and organisation';
    $org_condition = 'user__field_organisation.field_organisation_target_id';
    $query = erpw_view_results_own_location_organisation($query, $location_condition, $org_condition, $permission);
  }

  // User registration review list.
  if ($view->id() == "user_lists" && $view->current_display == 'page_2') {
    // Filter based on current role.
    $roles = \Drupal::currentUser()->getRoles();
    if ($view->exposed_raw_input['roles_target_id'] == 'All') {
      $configuration = [
        'type' => 'INNER',
        'table' => 'user__roles',
        'field' => 'entity_id',
        'left_table' => 'users_field_data',
        'left_field' => 'uid',
        'operator' => '=',
      ];
      $join = Views::pluginManager('join')->createInstance('standard', $configuration);
      $query->queueTable('user__roles', 'users_field_data', $join, 'user__roles');

      // Current user SP FP.
      if (in_array('service_provider_focal_point', $roles)) {
        $query->where[] = [
          "conditions" => [
            0 => [
              "field" => "user__roles.roles_target_id IN(:user__roles_roles_target_id[])",
              "value" => [
                ":user__roles_roles_target_id[]" => [
                  "service_provider_staff" => "service_provider_staff",
                ],
              ],
              "operator" => "formula",
            ],
          ],
          "args" => [],
          "type" => "AND",
        ];
        // Current user IA Coordinator and Current user Country admin.
      }
      elseif (in_array('interagency_gbv_coordinator', $roles) || in_array('country_admin', $roles)) {
        $query->where[] = [
          "conditions" => [
            0 => [
              "field" => "user__roles.roles_target_id IN(:user__roles_roles_target_id[])",
              "value" => [
                ":user__roles_roles_target_id[]" => [
                  "service_provider_staff" => "service_provider_staff",
                  "service_provider_focal_point" => "service_provider_focal_point",
                ],
              ],
              "operator" => "formula",
            ],
          ],
          "args" => [],
          "type" => "AND",
        ];
      }
    }

    // User workflow integration.
    foreach ($query->where as &$condition_group) {
      foreach ($condition_group['conditions'] as &$condition) {
        if (strpos($condition['field'], 'field_transitions_value') !== FALSE) {
          // Define a regular expression pattern to match the string inside IN()
          $pattern = '/IN\((.*?)\)/';
          preg_match($pattern, $condition['field'], $fieldname);

          // For SPFP users.
          if (in_array('service_provider_focal_point', $roles)) {
            $value = [
              $fieldname[1] => [
                "self-register-sp-staff" => "self-register-sp-staff",
              ],
            ];
            $condition['value'] = $value;
          }
          // For IA Coordinator and Country admin users.
          if (in_array('interagency_gbv_coordinator', $roles) || in_array('country_admin', $roles)) {
            $value = [
              $fieldname[1] => [
                "self-register-spfp" => "self-register-spfp",
                "spfp-accept" => "spfp-accept",
                "spfp-register-spfp" => "spfp-register-spfp",
                "spfp-register-sp-staff" => "spfp-register-sp-staff",
              ],
            ];
            $condition['value'] = $value;
          }
        }
      }
    }
  }

  // Users list.
  if ($view->id() == "user_count_approval_block" && $view->current_display == 'block_1') {
    // Filter based on current role.
    $roles = \Drupal::currentUser()->getRoles();
    $configuration = [
      'type' => 'INNER',
      'table' => 'user__roles',
      'field' => 'entity_id',
      'left_table' => 'users_field_data',
      'left_field' => 'uid',
      'operator' => '=',
    ];
    $join = Views::pluginManager('join')->createInstance('standard', $configuration);
    $query->queueTable('user__roles', 'users_field_data', $join, 'user__roles');

    // Current user SP FP.
    if (in_array('service_provider_focal_point', $roles)) {
      $query->where[] = [
        "conditions" => [
          0 => [
            "field" => "user__roles.roles_target_id IN(:user__roles_roles_target_id[])",
            "value" => [
              ":user__roles_roles_target_id[]" => [
                "service_provider_staff" => "service_provider_staff",
              ],
            ],
            "operator" => "formula",
          ],
        ],
        "args" => [],
        "type" => "AND",
      ];
      // Current user IA Coordinator and Current user Country admin.
    }
    elseif (in_array('interagency_gbv_coordinator', $roles) || in_array('country_admin', $roles)) {
      $query->where[] = [
        "conditions" => [
          0 => [
            "field" => "user__roles.roles_target_id IN(:user__roles_roles_target_id[])",
            "value" => [
              ":user__roles_roles_target_id[]" => [
                "service_provider_staff" => "service_provider_staff",
                "service_provider_focal_point" => "service_provider_focal_point",
              ],
            ],
            "operator" => "formula",
          ],
        ],
        "args" => [],
        "type" => "AND",
      ];
    }

    // User workflow integration.
    foreach ($query->where as &$condition_group) {
      foreach ($condition_group['conditions'] as &$condition) {
        if ($condition['field'] == 'user__field_transitions.field_transitions_value IN(:user__field_transitions_field_transitions_value[])') {
          // For SPFP users.
          if (in_array('service_provider_focal_point', $roles)) {
            $value = [
              ":user__field_transitions_field_transitions_value[]" => [
                "self-register-sp-staff" => "self-register-sp-staff",
              ],
            ];
            $condition['value'] = $value;
          }
          // For IA Coordinator and Country admin users.
          if (in_array('interagency_gbv_coordinator', $roles) || in_array('country_admin', $roles)) {
            $value = [
              ":user__field_transitions_field_transitions_value[]" => [
                "self-register-spfp" => "self-register-spfp",
                "spfp-accept" => "spfp-accept",
                "spfp-register-spfp" => "spfp-register-spfp",
                "spfp-register-sp-staff" => "spfp-register-sp-staff",
              ],
            ];
            $condition['value'] = $value;
          }
        }
      }
    }
  }

  if ($view->id() == "referral_pathway_listing" && $view->current_display == 'page_1') {
    $permission = 'view referral pathway of their own country';
    $condition_field = 'node__field_location.field_location_target_id';
    $query = erpw_view_results_own_country_permissions($query, $condition_field, $permission);
    $permission = 'view referral pathway of their own location';
    $query = erpw_view_results_own_location_organisation($query, $condition_field, NULL, $permission);
  }

  if ($view->id() == "referral_pathway_on_homepage") {
    /*
     * Modify referral pathways to show results
     * from the nearest lower level of the active location,
     * if there is no referral pathway for the active location.
     */

    // Load active tid from the location field.
    foreach ($query->where[1]['conditions'] as $condition) {
      if (isset($condition['field']) && $condition['field'] === 'node__field_location.field_location_target_id') {
        $current_tid = $condition['value'];
      }
    }
    // Load the taxonomy term and get the next terms.
    if (!empty($cookie->getCookieValue())) {
      $term_storage = \Drupal::service('entity_type.manager')->getStorage('taxonomy_term');
      $parent_term = $term_storage->load($cookie->getCookieValue());
      $tree = $term_storage->loadTree($parent_term->bundle(), $current_tid);
      $child_tids = [];
      foreach ($tree as $term) {
        $child_tids[] = $term->tid;
      }

      // Check if there is content for the current ID or any of its child terms.
      $has_content = erpw_custom_has_content_for_terms(
        [$current_tid, ...$child_tids], 'referral_path_way', 'field_location');
    }

    // Use the first term with content found as the current term.
    if ($has_content) {
      $current_tid = $has_content;
    }

    // Modify the tid value based on the above conditions.
    $conditions = &$query->where[1]['conditions'];
    foreach ($conditions as $index => $condition) {
      if (isset($condition['field']) && $condition['field'] == 'node__field_location.field_location_target_id') {
        $query->where[1]['conditions'][$index]['value'] = $current_tid;
      }
    }
  }

  if ($view->id() == "manage_service" && $view->current_display == 'page_1') {
    $permission = 'view service of their own country';
    $condition_field = 'node__field_location.field_location_target_id';
    $query = erpw_view_results_own_country_permissions($query, $condition_field, $permission);
    $permission = 'view service of their own location';
    $query = erpw_view_results_own_location_organisation($query, $condition_field, NULL, $permission);
    $permission = 'view service of their own location and organisation';
    $org_condition = 'node__field_select_organisation.field_select_organisation_target_id';
    $query = erpw_view_results_own_location_organisation($query, $condition_field, $org_condition, $permission);
  }
  if ($view->id() == "moderated_content" && $view->current_display == 'moderated_content') {
    $permission = 'view service of their own country';
    $condition_field = 'node_field_data_node_field_revision__node__field_location.field_location_target_id';
    $query = erpw_view_results_own_country_permissions($query, $condition_field, $permission);
    $permission = 'view service of their own location';
    $query = erpw_view_results_own_location_organisation($query, $condition_field, NULL, $permission);
    $permission = 'view service of their own location and organisation';
    $org_condition = 'node_field_data_node_field_revision__node__field_select_organisation.field_select_organisation_target_id';
    $query = erpw_view_results_own_location_organisation($query, $condition_field, $org_condition, $permission);
  }

  // User listing by status.
  if ($view->id() === 'user_listing_by_status' && $view->current_display === 'page_1') {
    $user_status = $view->exposed_raw_input['status'];
    // Filter locations based on user location.
    $permission = 'view users of their own country';
    $location_condition = 'user__field_location.field_location_target_id';
    $query = erpw_view_results_own_country_permissions($query, $location_condition, $permission);

    // Add query for User status filter.
    $join_configuration = [
      'type' => 'INNER',
      'left_table' => 'users_field_data',
      'left_field' => 'uid',
      'operator' => '=',
    ];

    // User with Blocked status and no location.
    if ($user_status === 'blocked') {
      $conditions = &$query->where[1]['conditions'];
      foreach ($conditions as $index => $condition) {
        if (isset($condition['field']) && $condition['field'] === 'users_field_data.status') {
          $query->where[1]['conditions'][$index]['value'] = '0';
        }
        // Remove location condition for blocked filter option.
        elseif (isset($condition['field']) && $condition['field'] === 'user__field_location.field_location_target_id') {
          unset($conditions[$index]);
        }
      }
      $join_configuration['table'] = 'user__field_location';
      $join_configuration['field'] = 'entity_id';
      $query->addRelationship('location', Views::pluginManager('join')->createInstance('standard', $join_configuration), 'users_field_data');
      $query->addWhere(0, 'location.field_location_target_id', '0', '=');
    }
    // User with Rejected status.
    elseif ($user_status === '0') {
      $join_configuration['table'] = 'user__field_transitions';
      $join_configuration['field'] = 'entity_id';
      $query->addRelationship('transition', Views::pluginManager('join')->createInstance('standard', $join_configuration), 'users_field_data');
      $query->addWhere(1, 'transition.field_transitions_value', ['spfp-reject', 'gbv-coordination-reject'], 'IN');
    }
  }

}

/**
 * Get the Service Type titles based on a given taxonomy term.
 *
 * @param int $taxonomy_term_id
 *   Taxonomy term ID.
 *
 * @return array
 *   Array of webform submission titles.
 */
function erpw_custom_load_submissions_by_term($taxonomy_term_id) {

  // Fetch all parent term ids of the Country vocabulary.
  $query = \Drupal::entityQuery('taxonomy_term');
  $query->condition('vid', 'country');
  $query->condition('parent', 0);
  $term_ids = $query->execute();

  // Get webform ids which contain approved services for given tid.
  $query = \Drupal::database()->select('webform_submission_data', 'wsd');
  $query->fields('wsd', ['sid', 'webform_id']);
  $query->condition('wsd.name', 'location');
  $query->join('webform_submission_data', 'wsd2', 'wsd.sid = wsd2.sid');
  $query->condition('wsd2.property', 'workflow_state');
  $query->condition('wsd2.value', 'approve');
  // For Country level, all the webforms with given country should be displayed.
  if (in_array($taxonomy_term_id, $term_ids)) {
    $location_entity_id = \Drupal::service('erpw_location.location_services')->getLocationSingleEntityIdByTid($taxonomy_term_id);
    // Location entity id is stored for Country level instead of tid.
    $query->condition('wsd.property', 'location_options');
    $query->condition('wsd.value', $location_entity_id);
  }
  else {
    // Load tree for all lower levels of active tid.
    // @todo replace this with get_child_term_tid()
    $term_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
    $parent_term = $term_storage->load($taxonomy_term_id);
    if (!is_null($parent_term)) {
      $tree = $term_storage->loadTree($parent_term->bundle(), $taxonomy_term_id);
      $lower_level_tids = array_column($tree, 'tid');
      $location_tree = array_merge([$taxonomy_term_id], $lower_level_tids);
      $query->condition('wsd.property', 'location_tid');
      $query->condition('wsd.value', $location_tree, 'IN');
    }
  }

  $results = $query->execute()->fetchAll();
  $webform_ids = array_column($results, 'webform_id');

  $service_type_titles = [];
  // Fetch Service Type titles using webform ids.
  if (!empty($webform_ids)) {
    $webforms = Webform::loadMultiple($webform_ids);
    foreach ($webforms as $webform) {
      $tpa = $webform->getThirdPartySetting('erpw_webform', 'webform_service_type_map');
      if (isset($tpa)) {
        $service_type_array = array_values($tpa);
        $service_type_id = $service_type_array[0][0];
        $entity_type_manager = \Drupal::service('entity_type.manager');
        $nodes = $entity_type_manager->getStorage('node')->loadMultiple([$service_type_id]);
        foreach ($nodes as $node) {
          $service_type_titles[] = $node->label();
        }
      }
    }
  }
  return $service_type_titles;
}

/**
 * Implements hook_preprocess_node().
 */
function erpw_custom_preprocess_node(&$variables) {
  $node = $variables['node'];
  $current_path = \Drupal::service('path.current')->getPath();
  $cookie = \Drupal::service('erpw_location.location_cookie');
  if (!is_null($cookie->getCookieValue())) {
    // The active Service Types for the current location.
    $service_types = erpw_custom_load_submissions_by_term($cookie->getCookieValue());
    $variables['#cache']['contexts'][] = 'url';
    $variables['#cache']['contexts'][] = 'cookies';
    $is_incognito = \Drupal::request()->headers->has('incognito');
    if ($is_incognito) {
      $variables['#cache']['contexts'][] = 'headers:incognito';
    }
    if ($current_path == '/referral-pathway') {
      if (!in_array($node->getTitle(), $service_types)) {
        // Add no-service class to titles which are not in $service_types.
        $variables['service_status'] = 'no-service';
      }
    }
  }
}

/**
 * Implements hook_page_attachments() to pass user roles to JavaScript.
 *
 * @param array $attachments
 *   The attachments array.
 */
function erpw_custom_page_attachments(array &$attachments) {
  $current_user = \Drupal::currentUser();
  $user_roles = $current_user->getRoles();

  // Check if the user has admin or super_admin or country_admin role.
  $is_admin = in_array('administrator', $user_roles) || in_array('super_admin', $user_roles) || in_array('country_admin', $user_roles);
  $attachments['#attached']['drupalSettings']['erpw_custom']['userRoles'] = $is_admin;
}

/**
 * Checks if there is content for any of the given taxonomy term IDs.
 *
 * @param array $termIds
 *   An array of taxonomy term IDs.
 * @param string $contentType
 *   The machine name of the content type.
 * @param string $taxonomyField
 *   The machine name of the taxonomy term field.
 *
 * @return int|false
 *   The taxonomy term ID with content, or false if no content is found.
 */
function erpw_custom_has_content_for_terms(array $termIds, $contentType, $taxonomyField) {
  foreach ($termIds as $tid) {
    $has_content = \Drupal::entityQuery('node')
      ->condition('type', $contentType)
      ->condition($taxonomyField, $tid)
      ->range(0, 1)
      ->execute();
    if ($has_content) {
      return $tid;
    }
  }

  return FALSE;
}

/**
 * Callback for hook_views_query_alter alter query.
 */
function erpw_view_results_own_location_organisation($query, $location_condition, $org_condition = NULL, $permission = NULL) {
  $uid = \Drupal::currentUser()->id();
  $current_user = User::load($uid);
  if ($uid != 1 && !$current_user->hasRole('administrator') && $current_user->hasPermission($permission)) {
    $ptids = [];
    if ($current_user->hasField('field_location') && !$current_user->get('field_location')->isEmpty()) {
      $locations = $current_user->get('field_location')->getValue();
      foreach ($locations as $location) {
        $ptids += get_child_term_tid($location['target_id']);
      }
    }
    $org_id = '';
    if ($current_user->hasField('field_organisation') && !$current_user->get('field_organisation')->isEmpty()) {
      $org_id = $current_user->get('field_organisation')->getValue()[0]['target_id'];
    }
    foreach ($query->where as &$condition_group) {
      foreach ($condition_group['conditions'] as &$condition) {
        if ($location_condition && $condition['field'] == $location_condition) {
          $condition = [
            'field' => $location_condition,
            'value' => $ptids,
            'operator' => 'in',
          ];
        }
        if ($org_condition && $condition['field'] == $org_condition) {
          $condition = [
            'field' => $org_condition,
            'value' => $org_id,
            'operator' => '=',
          ];
        }
      }
    }
  }
  return $query;
}

/**
 * Callback for hook_views_query_alter alter query.
 */
function erpw_view_results_own_organisation($query, $org_condition = NULL, $permission = NULL) {
  $uid = \Drupal::currentUser()->id();
  $current_user = User::load($uid);
  if ($uid != 1 && !$current_user->hasRole('administrator') && $current_user->hasPermission($permission)) {
    $org_id = '';
    if ($current_user->hasField('field_organisation') && !$current_user->get('field_organisation')->isEmpty()) {
      $org_id = $current_user->get('field_organisation')->getValue()[0]['target_id'];
    }
    foreach ($query->where as &$condition_group) {
      foreach ($condition_group['conditions'] as &$condition) {
        if ($condition['field'] == $org_condition) {
          $condition = [
            'field' => $org_condition,
            'value' => $org_id,
            'operator' => '=',
          ];
        }
      }
    }
  }
  return $query;
}

/**
 * Callback for hook_views_query_alter alter query.
 */
function erpw_view_results_own_country_permissions($query, $condition_field, $permission) {
  $uid = \Drupal::currentUser()->id();
  $current_user = User::load($uid);
  if ($uid != 1 && !$current_user->hasRole('administrator') && $current_user->hasPermission($permission)) {
    $ptids = [];
    if ($current_user->hasField('field_location') && !$current_user->get('field_location')->isEmpty()) {
      $locations = $current_user->get('field_location')->getValue();
      foreach ($locations as $location) {
        $result = \Drupal::service('erpw_location.location_services')->getChildrenByParent($location['target_id']);
        $ptids = array_merge($ptids, $result);
      }
    }
    foreach ($query->where as &$condition_group) {
      foreach ($condition_group['conditions'] as &$condition) {
        if ($condition['field'] == $condition_field) {
          $condition = [
            'field' => $condition_field,
            'value' => $ptids,
            'operator' => 'in',
          ];
          break;
        }
      }
    }
  }
  return $query;
}

/**
 * Implements hook_entity_access().
 */
function erpw_custom_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  $uid = \Drupal::currentUser()->id();
  $current_user = User::load($uid);
  if ($operation === 'update' && $entity->getEntityTypeId() === 'user') {
    $permission = 'edit users of their own location and organisation';

    // Fetch location tree and organisation for current user.
    if ($current_user->hasRole('service_provider_focal_point') && $current_user->hasPermission($permission)) {
      if ($current_user->hasField('field_location') && !$current_user->get('field_location')->isEmpty()) {
        $location_id = $current_user->get('field_location')->getValue()[0]['target_id'];
        $ptids = get_child_term_tid($location_id);
      }
      $org_id = '';
      if ($current_user->hasField('field_organisation') && !$current_user->get('field_organisation')->isEmpty()) {
        $org_id = $current_user->get('field_organisation')->getValue()[0]['target_id'];
      }

      // Fetch location and organisation of user being edited.
      $user_location = $entity->get('field_location')->getValue()[0]['target_id'];
      $user_organisation = $entity->get('field_organisation')->getValue()[0]['target_id'];
      $user_role = $entity->get('roles')->getValue()[0]['target_id'];

      /* @todo Find out why administerusersbyrole module is not working here.
      The SP Focal Point doesn't have permission to edit any users except SP Staff,
      but still, without this condition, they were able to edit Coordinator and other FPs.
       */
      if (in_array($user_location, $ptids) && $user_organisation == $org_id
      && $user_role == 'service_provider_staff') {
        return AccessResult::allowed();
      }
      // Inclusive of password reset page.
      if (!\Drupal::request()->get('pass-reset-token')) {
        return AccessResult::forbidden();
      }
    }
  }
  if ($operation === 'view' && $entity->getEntityTypeId() === 'user') {
    if ($current_user->hasRole('country_admin')) {
      $permission = 'view users of their own country';
      if ($current_user->hasPermission($permission)) {
        if ($current_user->hasField('field_location') && !$current_user->get('field_location')->isEmpty()) {
          $location_id = $current_user->get('field_location')->getValue()[0]['target_id'];
          $user_location = $entity->get('field_location')->getValue()[0]['target_id'];
          $loggedin_user_ancestors = \Drupal::service('entity_type.manager')->getStorage("taxonomy_term")->loadAllParents($location_id);
          $view_user_ancestors = \Drupal::service('entity_type.manager')->getStorage("taxonomy_term")->loadAllParents($user_location);
          if (end(array_keys($loggedin_user_ancestors)) == end(array_keys($view_user_ancestors))) {
            return AccessResult::allowed();
          }
          else {
            return AccessResult::forbidden();
          }
        }
      }
      else {
        return AccessResult::forbidden();
      }
    }
  }
  return AccessResult::neutral();
}

/**
 * Callback for location permission.
 */
function erpw_filter_locations_permissions($location_options, $permission, $type = 'term_entity') {
  $uid = \Drupal::currentUser()->id();
  $current_user = User::load($uid);
  if ($uid != 1 && $location_options && !$current_user->hasRole('administrator') && $current_user->hasPermission($permission)) {
    $location_ids = [];

    if ($current_user->hasField('field_location') && !$current_user->get('field_location')->isEmpty()) {
      $locations = $current_user->get('field_location')->getValue();
      foreach ($locations as $location) {
        $location_ids[] = $location['target_id'];
      }
    }

    if (!empty($location_ids)) {
      $combined_ptids = [];

      foreach ($location_ids as $location_id) {
        $ptids = \Drupal::service('erpw_location.location_services')->getChildrenByParent($location_id);
        $combined_ptids = array_merge($combined_ptids, $ptids);
      }

      foreach ($location_options as $eid => $option) {
        $tid = $eid;
        if ($type == 'location_entity') {
          $location_entity = \Drupal::entityTypeManager()->getStorage('location')->load($eid);
          $tid = '';
          if ($location_entity) {
            if ($location_entity->hasField('field_location_taxonomy_term') && !$location_entity->get('field_location_taxonomy_term')->isEmpty()) {
              $tid = $location_entity->get('field_location_taxonomy_term')->getValue()[0]['target_id'];
            }
          }
        }
        if (!in_array($tid, $combined_ptids)) {
          unset($location_options[$eid]);
        }
      }
    }
  }
  return $location_options;
}

/**
 * Get child term by parent tid.
 */
function get_child_term_tid($ptid) {
  $tree = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree(
    'country',
    $ptid
  );
  $result = [];
  $result[$ptid] = $ptid;
  foreach ($tree as $term) {
    $result[$term->tid] = $term->tid;
  }
  return $result;
}

/**
 * Implements hook_entity_presave().
 */
function erpw_custom_entity_presave(EntityInterface $entity) {
  // For services content type.
  if ($entity->getEntityTypeId() == 'node' && $entity->getType() == 'service_provider') {
    $service_title = $entity->get('title')->value;
    $entity->set('field_name_of_the_focal_point', $service_title);
  }
  // For service type content type.
  if ($entity->getEntityTypeId() == 'node' && $entity->getType() == 'service_type') {
    $node_title = trim($entity->get('title')->value);
    // If (strpos($node_title, '(') !== FALSE) {
    //   $node_title = preg_replace('/\s+/', '', $node_title);
    // }.
    if (preg_match("/'/u", $node_title)) {
      $node_title = str_replace("'", '', $node_title);
    }
    $entity->set('title', $node_title);
  }
  // This is madness, why force every single piece of content to be in all
  // (current!  Not future! pure madness) domains on save?
  // For assign domain id to domain access field.
  // if (in_array($entity->getentityTypeId(), ['node', 'user']) && $entity->hasField('field_domain_access')) {
  //  $all_domains = \Drupal::service('entity_type.manager')->getStorage('domain')->loadMultipleSorted(NULL);
  //  foreach ($all_domains as $domain) {
  //    $domain_status = $domain->get('status');
  //    if ($domain_status) {
  //      $domain_id[] = $domain->get('id');
  //    }
  //  }
  //  $entity->set('field_domain_access', $domain_id);
  // }.
}

/**
 * Implements hook_entity_form_mode_alter().
 */
function erpw_custom_entity_form_display_alter(&$form_display, $context) {
  if ($context['entity_type'] == 'user' && $context['bundle'] == 'user') {
    if (\Drupal::request()->get('pass-reset-token')) {
      $storage = \Drupal::service('entity_type.manager')->getStorage('entity_form_display');
      $form_display = $storage->load('user.user.user_password_reset');
    }
  }
}

/**
 * Implements hook_node_view().
 */
function erpw_custom_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  $current_request = \Drupal::request();
  $referer = $current_request->server->get('HTTP_REFERER');
  if (!empty($referer)) {
    $url_path_values = explode('/', $referer);
    if (isset($url_path_values[4]) && str_contains($url_path_values[4], 'referral-pathway-listing')) {
      // Check if the entity type is 'node' and the view mode is 'full'.
      if ($entity->getEntityTypeId() === 'node' && $view_mode === 'full') {
        $field_location = $entity->get('field_location')->getValue()[0]['target_id'];
        $route_name = 'view.referral_pathway_on_homepage.page_2';
        $route_parameters = ['arg_0' => $field_location];
        $url = Url::fromRoute($route_name, $route_parameters)->toString();
        $response = new RedirectResponse($url);
        $response->send();
      }
    }
  }
}

/**
 * Checks if the current user can edit a specific user.
 *
 * @param \Drupal\Core\Session\AccountProxyInterface $current_user
 *   The current user.
 * @param \Drupal\user\Entity\User $user
 *   The user to check access for.
 *
 * @return bool
 *   TRUE if the current user can edit the user, FALSE otherwise.
 */
function erpw_custom_can_edit_user(AccountProxyInterface $current_user, $user) {
  $user_roles = $user->getRoles();
  $current_user_roles = $current_user->getRoles();

  // Define role-specific permissions.
  $role_permissions = [
    'service_provider_staff' => [
      'service_provider_focal_point',
      'interagency_gbv_coordinator',
      'country_admin',
      'super_admin',
      'administrator',
    ],
    'service_provider_focal_point' => [
      'interagency_gbv_coordinator',
      'country_admin',
      'super_admin',
      'administrator',
    ],
    'interagency_gbv_coordinator' => [
      'country_admin',
      'super_admin',
      'administrator',
    ],
    'country_admin' => [
      'country_admin',
      'super_admin',
      'administrator',
    ],
    'super_admin' => [
      'administrator',
    ],
  ];

  foreach ($user_roles as $user_role) {
    if (isset($role_permissions[$user_role])) {
      // Check if the current user has the required roles for editing.
      if (!empty(array_intersect($role_permissions[$user_role], $current_user_roles))) {
        return TRUE;
      }
    }
  }

  return FALSE;
}

/**
 * Implements hook_theme().
 */
function erpw_custom_theme() {
  return [
    'user_count_approval_block' => [
      'variables' => [
        'count' => NULL,
      ],
      'template' => 'user-count-approval-block',
    ],
  ];
}
