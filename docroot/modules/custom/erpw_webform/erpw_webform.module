<?php

/**
 * @file
 * Contains erpw_webform.module.
 */

use Drupal\webform\WebformInterface;
use Drupal\node\Entity\Node;
use Drupal\Core\Entity\EntityStorageException;
use Drupal\webform\Entity\Webform;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Url;
use Drupal\user\Entity\User;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Session\AccountInterface;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\Views;

/**
 * Implements hook_webform_add_form().
 */
function erpw_webform_webform_add_form(array &$form, FormStateInterface $form_state, $webform_type = NULL) {
  // Load the appropriate webform template.
  if ($webform_type == 'default') {
    $webform = Webform::create([]);
  }
  elseif ($webform_type == 'eRPW') {
    $webform = Webform::create([
      'template' => 'template_erpw_workflow',
    ]);
  }
  elseif ($webform_type == 'service_rating') {
    $webform = Webform::create([
      'template' => 'template_service_rating',
    ]);
  }

  // Set the webform values.
  $form_state->set('webform', $webform);
  $form_state->set('template', $webform->get('template')->value);

  // Build the webform form.
  $form_object = \Drupal::entityTypeManager()
    ->getFormObject('webform', 'default')
    ->setEntity($webform);
  $form = \Drupal::formBuilder()->getForm($form_object);

  return $form;
}

/**
 * Implements hook_entity_type_build().
 */
function erpw_webform_entity_type_build(array &$entity_types) {

  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */

  // Add a form for a custom node form without overriding the default
  // node form. To override the default node form, use hook_entity_type_alter().
  $entity_types['webform']->setFormClass('duplicate', 'Drupal\erpw_webform\Form\WebformAddForm');
  $entity_types['webform']->setFormClass('add', 'Drupal\erpw_webform\Form\WebformAddForm');
  $entity_types['webform']->setListBuilderClass('Drupal\erpw_webform\WebformListBuilder');
  $entity_types['webform_submission']->setListBuilderClass('Drupal\erpw_webform\ErpwWebformSubmissionListBuilder');
}

/**
 * Implements hook_entity_type_alter().
 */
function erpw_webform_entity_type_alter(array &$entity_types) {
  $entity_types['webform_submission']->setListBuilderClass('Drupal\erpw_webform\ErpwWebformSubmissionListBuilder');
}

/**
 * Implements hook_preprocess_html().
 */
function erpw_webform_preprocess_html(&$variables) {
  $currentRoute = \Drupal::routeMatch()->getRouteName();
  $offlinePath = \Drupal::service('path_alias.manager')->getAliasByPath(\Drupal::service('path.current')->getPath());
  if ($currentRoute == 'erpw_webform.service_content' || $currentRoute == 'erpw_webform.service_content_approved' || $currentRoute == 'erpw_webform.service_moderate_content') {
    $variables['attributes']['class'][] = 'view-page-webform-submission';
  }
  if ($currentRoute == 'entity.webform.edit_form') {
    $variables['attributes']['class'][] = 'webform-edit-config-page';

  }
  if ($currentRoute == 'entity.webform.templates' || $currentRoute == 'entity.webform.collection') {
    $current_user = \Drupal::currentUser();
    if ($current_user->isAuthenticated()) {
      $uid = $current_user->id();
      $user = User::load($uid);
      if ($user) {
        $roles = $user->getRoles();
        if (!in_array('administrator', array_values($roles))) {
          $variables['attributes']['class'][] = 'hide-webform-action-links';
          $variables['#attached']['library'][] = 'erpw_webform/erpw_webform_workflow';
        }
      }
    }
  }
  if ($currentRoute == 'erpw_webform.webform.feedback_form') {
    $variables['#attached']['library'][] = 'erpw_webform/erpw_service_rating';
  }
  if ($offlinePath == '/service-providers-changes-offline') {
    $variables['attributes']['class'][] = 'offline-service-changes-page';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function erpw_webform_preprocess_webform(&$variables) {
  $currentRoute = \Drupal::routeMatch()->getRouteName();
  if ($currentRoute == 'entity.webform_submission.edit_form') {
    // Disable all fields when a service enters Delete Workflow.
    $data = $variables['element']['information']['#webform_submission']->getData();
    $delete_states = ['deletion_in_review_with_focal_point', 'deletion_in_review_with_gbv_coordination'];
    if (in_array($data['erpw_workflow']['workflow_state'], $delete_states)) {
      $is_in_deletion = TRUE;
    }
    else {
      $is_in_deletion = FALSE;
    }
    $variables['#attached']['drupalSettings']['erpw_webform']['erpw_webform_deletion_access'] = $is_in_deletion;
    $variables['#attached']['library'][] = 'erpw_webform/erpw_webform_element_access';
  }
}

/**
 * Implements hook_preprocess_page().
 */
function erpw_webform_preprocess_page(&$variables) {
  $currentRoute = \Drupal::routeMatch()->getRouteName();
  $currentPath = \Drupal::service('path_alias.manager')->getAliasByPath(\Drupal::service('path.current')->getPath());
  if ($currentRoute == "entity.webform.canonical" || $currentRoute == 'entity.webform_submission.edit_form' || $currentRoute == 'erpw_webform.service_content' || $currentRoute == 'erpw_webform.service_content_approved' || $currentRoute == 'erpw_webform.service_moderate_content') {
    $variables['#attached']['library'][] = 'erpw_webform/erpw_webform_js';
  }
  if ($currentRoute == 'entity.webform.add_form' || $currentRoute == 'entity.webform.templates') {
    $variables['#attached']['library'][] = 'erpw_webform/erpw_webform_template';
  }
  if ($currentRoute == 'erpw_webform.service_webforms') {
    $variables['#attached']['library'][] = 'erpw_webform/erpw_webform_js';
    $variables['#attached']['library'][] = 'erpw_custom/erpw_js';
    $variables['#attached']['library'][] = 'unicef_iconpicker/unicef-iconpicker';
  }
  if ($currentRoute == "entity.webform.canonical") {
    $variables['#attached']['library'][] = 'erpw/global';
  }
  if ($currentRoute == 'entity.webform.edit_form') {
    $variables['#attached']['library'][] = 'erpw_webform/erpw_webform_workflow';
    $user = \Drupal::currentUser();
    $is_admin = in_array('administrator', $user->getRoles());
    $variables['#attached']['drupalSettings']['erpw_webform']['erpw_webform_element_access'] = $is_admin;
    $variables['#attached']['library'][] = 'erpw_webform/erpw_webform_element_access';
  }
  if ($currentRoute == 'entity.webform_submission.edit_form') {
    // Remove help section from webform submission edit page.
    $variables['page']['help']['#access'] = FALSE;
    $variables['page']['content']['erpw_help']['#access'] = FALSE;
    $variables['#attached']['library'][] = 'erpw_webform/erpw_webform_offline_edit_form';
  }
  if ($currentPath != '/service-providers' && $currentPath != '/manage-services' && $currentRoute != 'view.service_based_service_providers_listing.page_1' && $currentRoute != 'view.manage_in_review_webform_services_listing.page_1' && $currentPath != '/service-providers-changes-offline' && $currentRoute != 'entity.webform_submission.edit_form') {
    $variables['#attached']['library'][] = 'erpw_webform/erpw_webform_offline_global';
  }
  if ($currentPath == '/service-providers-changes-offline') {
    $variables['#attached']['library'][] = 'erpw_webform/erpw_webform_offline_listing';
    $variables['#attached']['library'][] = 'unicef_iconpicker/unicef-iconpicker';
  }
  $variables['page']['#cache']['contexts'][] = 'cookies';
  $variables['page']['#cache']['contexts'][] = 'url';
}

/**
 * Implements hook_entity_insert().
 */
function erpw_webform_entity_insert(EntityInterface $entity) {
  // Check if the entity is a Webform.
  if ($entity->getEntityTypeId() == 'webform') {
    // Enable content locking for the new webform.
    $webform_id = $entity->id();

    $config_factory = \Drupal::configFactory();
    $config = $config_factory->getEditable('content_lock.settings');
    $webforms_array = $config->get('types')['webform_submission'];
    $webforms_array[$webform_id] = $webform_id;
    $config->set('types', ['webform_submission' => $webforms_array]);
    $config->save();

    // Cache the url of the webform.
    $url = $entity->toUrl()->setAbsolute()->toString();
    $path = preg_replace('/^\/\w{2}\b/', '', parse_url($url, PHP_URL_PATH));
    // Get the PWA URLs to cache configuration object.
    $configFactory = \Drupal::service('config.factory');
    $config = $configFactory->getEditable('pwa.config');
    // Get the current URLs to cache array.
    $urls_to_cache = $config->get('urls_to_cache');
    $urls_to_cache = explode("\r\n", $urls_to_cache);
    $urls_to_cache[] = $path;
    $urls_to_cache = implode("\r\n", $urls_to_cache);
    // Add the webform URL to the URLs to cache array if it's not already present.
    // Save the updated URLs to cache array.
    $config->set('urls_to_cache', $urls_to_cache)->save();
  }
}

/**
* Implementation of hook_theme()
*/
function erpw_webform_theme($existing, $type, $theme, $path) {
  return [
    'service_rating_page' => [
      'variables' => [
        'organisation_name' => NULL,
        'organisation_average' => NULL,
        'organisation_total_reviews' => NULL,
        'service_list' => NULL,
      ],
    ],
    'location_rating_page' => [
      'variables' => [
        'service_type_name' => NULL,
        'service_type_average' => NULL,
        'service_total_reviews' => NULL,
        'location_list' => NULL,
      ],
    ],
    'feedback_area_rating_page' => [
      'variables' => [
        'location_name' => NULL,
        'location_average' => NULL,
        'location_total_reviews' => NULL,
        'feedback_area_list' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_theme().
 */
function erpw_webform_composite_theme() {
  return [
    'location_list' => [
      'render element' => 'element',
    ],
    'custom_template' => [
      'variables' => [
        'webform_data' => NULL,
        'webform_title' => NULL,
        'webform_status' => NULL,
      ],
      'template' => 'page--manage-feedback-surveys',
    ],
  ];
}

/**
 * Implements hook_form_alter().
 */
function erpw_webform_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Check if this is the webform submission edit form.
  $currentRoute = \Drupal::routeMatch()->getRouteName();
  $currentPath = Url::fromRoute('<current>')->toString();
  $account = User::load(\Drupal::currentUser()->id());
  $user_roles = $account->getRoles();
  if ($currentRoute == 'entity.webform_submission.edit_form') {
    // Remove log section from Webform submission edit pages:
    $form['log_fieldset']['#access'] = FALSE;
    $form['navigation']['#access'] = FALSE;
    if (!in_array('administrator', $user_roles)) {
      $form['information']['#access'] = FALSE;
    }
    // Set default values for the 'field_name' and 'field_email' fields.
    $elements = $form['elements'];
    foreach ($elements as $element) {
      if ($element["#type"] == "location_list_element" && isset($element["#default_value"])) {
        $form['#attached']['drupalSettings']['erpw_webform']['default_location_values'] = $element["#default_value"];
      }
    }
    if (in_array('service_provider_staff', $user_roles) || in_array('service_provider_focal_point', $user_roles)) {
      foreach ($elements as $key => $element) {
        if ($key == 'step_1_add_service_details') {
          foreach ($element as $skey => $sub_element) {
            if ($skey == 'organisation') {
              $form['elements'][$key][$skey]["#disabled"] = TRUE;
            }
          }
        }
      }
    }
  }
  if ($currentRoute == 'entity.webform.canonical' && ($form["#webform_id"] != "" && !is_null($form["#webform_id"]))) {
    if (in_array('service_provider_staff', $user_roles) || in_array('service_provider_focal_point', $user_roles)) {
      $user_org = $account->get('field_organisation')->getValue()[0]['target_id'];
      $elements = $form['elements'];
      foreach ($elements as $key => $element) {
        if ($key == 'step_1_add_service_details') {
          foreach ($element as $skey => $sub_element) {
            if ($skey == 'organisation') {
              if (!is_null($user_org)) {
                $form['elements'][$key][$skey]["#default_value"] = $user_org;
                $form['elements'][$key][$skey]["#disabled"] = TRUE;
              }
              else {
                $form['elements'][$key][$skey]["#disabled"] = FALSE;
              }
            }
          }
        }
      }
    }
  }
  if ($currentRoute == 'entity.webform_submission.edit_form' || ($currentRoute == 'entity.webform.canonical' && ($form["#webform_id"] != "" && !is_null($form["#webform_id"])))) {
    $options = $form['elements']['step_1_add_service_details']['organisation']['#options'];
    $activeDomain = \Drupal::service('domain.negotiator')->getActiveDomain()->id();
    foreach ($options as $key => $label) {
      $org = \Drupal::entityTypeManager()->getStorage('node')->load($key);
      $orgDomains = $org->get('field_domain_access')->getValue();
      $c = 0;
      foreach ($orgDomains as $orgDomain) {
        if ($orgDomain['target_id'] == $activeDomain) {
          $c++;
        }
      }
      if ($c == 0) {
        unset($options[$key]);
      }
    }
    $form['elements']['step_1_add_service_details']['organisation']['#options'] = $options;
  }

  if ($form_id == 'views_exposed_form') {
    // Generate the action path for the view form.
    $action_path = Url::fromRoute('<current>')->toString();
    // Set the generated action path as the form's action attribute.
    $form['#action'] = $action_path;
  }

  if (str_contains($form_id, "webform_submission_webform_service_rating_")) {
    $form['actions']['submit']['#submit'][] = "erpw_webform_service_rating_submit_handler";
  }

  if (str_contains($form['#form_id'], 'webform_service_rating_')) {
    $form['actions']['back'] = [
      '#type' => 'submit',
      '#value' => t('Cancel'),
    // You can adjust the weight to control the button's position.
      '#weight' => 0,
    // Define a custom submit handler for the back button.
      '#submit' => ['service_rating_webform_back_handler'],
    ];
  }

  if ($form_id === "webform_delete_form" && str_contains($currentPath, 'webform_service_rating_')) {
    $form['actions']['submit']['#submit'][] = "erpw_webform_service_rating_delete_handler";
    $url = Url::fromRoute('erpw_webform.manage_feedback_surveys');
    $form['actions']['cancel']['#url'] = $url;
  }
}

/**
 *
 */
function erpw_webform_service_rating_delete_handler(&$form, FormStateInterface $form_state) {
  $form_state->setRedirect('erpw_webform.manage_feedback_surveys');
  return;
}

/**
 * Custom submit handler for the back button.
 */
function service_rating_webform_back_handler($form, FormStateInterface $form_state) {
  $form_state->setRedirect('view.manage_webform_services.page_1');
  return;
}

/**
 *
 */
function erpw_webform_service_rating_submit_handler(&$form, FormStateInterface $form_state) {
  \Drupal::service('messenger')->addMessage("Thank you for your Feedback!");
  $form_state->setRedirect('view.manage_webform_services.page_1');
  return;
}

/**
 * Implements hook_form_views_exposed_form_alter().
 */
function erpw_webform_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // For SP Staff & SP Focal Point, remove the option to filter by organization since their listing is limited to their organization only.
  $request = \Drupal::request();
  $uri = $request->getRequestUri();
  if (strpos($uri, 'manage-services') != FALSE) {
    $current_user = User::load(\Drupal::currentUser()->id());
    $role = $current_user->getRoles();
    if (in_array('service_provider_focal_point', $role) || in_array('service_provider_staff', $role)) {
      $form['webform_submission_organisation_filter']['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook__entity_access().
 */
function erpw_webform_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  $user_roles = $account->getRoles();
  $user = User::load(\Drupal::currentUser()->id());
  $domainAccess = $user->get('field_domain_access')->getValue();
  $x = 0;
  $currentRoute = \Drupal::routeMatch()->getRouteName();
  if ($entity->getEntityTypeId() == 'webform') {
    $tpa = $entity->getThirdPartySetting('erpw_webform', 'webform_service_type_map');
    foreach ($user_roles as $key_r => $role) {
      if ($role == 'country_admin' || $role == 'interagency_gbv_coordinator') {
        if (is_null($tpa)) {
          $x++;
          return AccessResult::allowed();
        }
        else {
          foreach ($domainAccess as $key => $domain) {
            if (is_array($tpa)) {
              if (array_key_exists($domain['target_id'], $tpa)) {
                $x++;
                return AccessResult::allowed();
              }
            }
          }
        }
      }
      if ($role == 'super_admin' ||$role == 'administrator') {
        $x++;
        return AccessResult::allowed();
      }
      if (($role == 'service_provider_focal_point' || $role == 'service_provider_staff') && $currentRoute == 'entity.node.canonical') {
        $x++;
        return AccessResult::allowed();
      }
      if (($role == 'service_provider_focal_point' || $role == 'service_provider_staff') && $currentRoute == 'entity.webform.canonical') {
        $x++;
        return AccessResult::allowed();
      }
    }
    if ($x == 0) {
      return AccessResult::forbidden();
    }
  }
  $s = 0;
  if ($entity->getEntityTypeId() == 'webform_submission') {
    $webformID = $entity->get('webform_id')->getValue()[0]['target_id'];
    $webform = \Drupal::entityTypeManager()->getStorage('webform')->load($webformID);
    $tpa = $webform->getThirdPartySetting('erpw_webform', 'webform_service_type_map');
    foreach ($user_roles as $key_r => $role) {
      if ($role == 'country_admin' || $role == 'interagency_gbv_coordinator' || $role == 'service_provider_staff' || $role == 'service_provider_focal_point') {
        foreach ($domainAccess as $key => $domain) {
          if (is_array($tpa)) {
            if (array_key_exists($domain['target_id'], $tpa)) {
              $s++;
              return AccessResult::allowed();
            }
          }
        }
      }
      if ($role == 'super_admin' || $role == 'administrator') {
        $s++;
        return AccessResult::allowed();
      }
    }
    if ($s == 0) {
      return AccessResult::forbidden();
    }
  }
}

/**
 * Implements hook_views_data_alter().
 */
function erpw_webform_views_data_alter(array &$data) {
  $data['webform_submission']['webform_submission_focal_point_field'] = [
    'title' => t('Webform Submission Focal Point field.'),
    'help' => t('Generic field for displaying focal point name for all submissions.'),
    'field' => [
      'id' => 'webform_submission_focal_point_field',
      'entity type' => 'webform_submission',
      'label' => t('Webform Submission Focal Point field.'),
      'real field' => 'webform_submission_focal_point_field',
    ],
  ];
  $data['webform_submission']['webform_submission_hotline_contact_field'] = [
    'title' => t('Webform Submission Hotline contact field.'),
    'help' => t('Generic field for displaying hotline contact for all submissions.'),
    'field' => [
      'id' => 'webform_submission_hotline_contact_field',
      'entity type' => 'webform_submission',
      'label' => t('Webform Submission hotline contact field.'),
      'real field' => 'webform_submission_hotline_contact_field',
    ],
  ];
  $data['webform_submission']['webform_submission_organisation_field'] = [
    'title' => t('Webform Submission Organisation field.'),
    'help' => t('Generic field for displaying organisation for all submissions.'),
    'field' => [
      'id' => 'webform_submission_organisation_field',
      'entity type' => 'webform_submission',
      'label' => t('Webform Submission Organisation field.'),
      'real field' => 'webform_submission_organisation_field',
    ],
  ];
  $data['webform_submission']['webform_submission_mode_field'] = [
    'title' => t('Webform Submission Service Mode field.'),
    'help' => t('Generic field for displaying service mode for all submissions.'),
    'field' => [
      'id' => 'webform_submission_mode_field',
      'entity type' => 'webform_submission',
      'label' => t('Webform Submission Sevice Mode field.'),
      'real field' => 'webform_submission_mode_field',
    ],
  ];
  $data['webform_submission']['webform_submission_service_rating_status_field'] = [
    'title' => t('Webform Submission Service Rating Status field.'),
    'help' => t("Generic field for displaying the status of the service's feedback form."),
    'field' => [
      'id' => 'webform_submission_service_rating_status_field',
      'entity type' => 'webform',
      'label' => t('Service Rating Form Status'),
      'real field' => 'webform_submission_service_rating_status_field',
    ],
  ];
  $data['webform_submission']['webform_submission_service_rating_question_count_field'] = [
    'title' => t('Webform Submission Service Rating Question Count field.'),
    'help' => t("Generic field for displaying the count of feedback question of a service."),
    'field' => [
      'id' => 'webform_submission_service_rating_question_count_field',
      'entity type' => 'webform',
      'label' => t('Feedback questions count of a service.'),
      'real field' => 'webform_submission_service_rating_question_count_field',
    ],
  ];
  $data['webform_submission']['webform_submission_location_field'] = [
    'title' => t('Webform Submission location field.'),
    'help' => t('Generic field for displaying location for all submissions.'),
    'field' => [
      'id' => 'webform_submission_location_field',
      'entity type' => 'webform_submission',
      'label' => t('Webform Submission location field.'),
      'real field' => 'webform_submission_location_field',
    ],
  ];
  $data['webform_submission']['webform_submission_workflow'] = [
    'title' => t('Webform Submission workflow.'),
    'help' => t('Generic field for displaying workflow for all submissions.'),
    'field' => [
      'id' => 'webform_submission_workflow',
      'entity type' => 'webform_submission',
      'label' => t('Webform Submission Workflow.'),
      'real field' => 'webform_submission_workflow',
    ],
  ];
  $data['webform_submission']['webform_submission_all_data'] = [
    'title' => t('Webform Submission All Data.'),
    'help' => t('Generic field for displaying all fields data all submissions.'),
    'field' => [
      'id' => 'webform_submission_all_data',
      'entity type' => 'webform_submission',
      'label' => t('Webform Submission All data.'),
      'real field' => 'webform_submission_all_data',
    ],
  ];
  $data['webform_submission']['webform_submission_workflow_filter'] = [
    'title' => t('Webform Submission Workflow Filter'),
    'filter' => [
      'title' => t('Webform Submission Workflow Filter'),
      'help' => t('Provides a custom filter for workflow status.'),
      'field' => 'webform_submission_workflow',
      'id' => 'webform_submission_workflow_filter',
    ],
  ];
  $data['webform_submission']['webform_submission_organisation_filter'] = [
    'title' => t('Webform Submission Organisation Filter'),
    'filter' => [
      'title' => t('Webform Submission Organisation Filter'),
      'help' => t('Provides a custom filter for organisation.'),
      'field' => 'webform_submission_organisation_field',
      'id' => 'webform_submission_organisation_filter',
    ],
  ];
  $data['webform_submission']['webform_submission_service_rating_filter'] = [
    'title' => t('Webform Submission Service Rating Form Filter'),
    'filter' => [
      'title' => t('Webform Submission Service Rating Form Filter'),
      'help' => t('Provides a custom filter for service rating form.'),
      // 'field' => 'webform_submission_organisation_field',
      'id' => 'webform_submission_service_rating_filter',
    ],
  ];
  return $data;
}

/**
 * Implements hook_entity_operation_alter().
 */
function erpw_webform_entity_operation_alter(array &$operations, EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'webform_submission') {
    // Add custom operation.
    $sid = $entity->get('sid')->getValue()[0]['value'];
    $operations['view']['url'] = Url::fromRoute('erpw_webform.service_content', ['webform_submission' => intval($sid)]);
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function erpw_webform_menu_local_tasks_alter(&$data, $route_name) {
  // Override local task links for webform submissions.
  foreach ($data as $key => $value) {
    if ($key == 'tabs') {
      foreach ($value as $subKey => $routes) {
        foreach ($routes as $route_name => $properties) {
          if ($route_name == 'entity.webform_submission.canonical') {
            $sid = intval($properties['#link']['url']->getRouteParameters()['webform_submission']);
            $data[$key][$subKey][$route_name]['#link']['url'] = Url::fromRoute('erpw_webform.service_content', ['webform_submission' => intval($sid)]);
          }
          if ($route_name == 'entity.webform_submission.notes_form') {
            unset($data[$key][$subKey][$route_name]);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function erpw_webform_views_pre_render(ViewExecutable $view) {
  // Alter exposed filter value to only current domain's service type.
  if ($view->id() == 'webform_submissions' || $view->id() == 'manage_webform_services' || $view->id() == 'manage_in_review_webform_services_listing') {
    $view->addCacheContext('cookies');
    $view->addCacheContext('url');
    $arrayKey = '';
    if ($view->id() == 'webform_submissions') {
      $arrayKey = 'service_type';
      // Only show drafts for current user.
      foreach ($view->result as $key => $row) {
        $workflow_state = $row->_entity->getElementData('erpw_workflow');
        if ($workflow_state['workflow_state'] == 'draft') {
          $user = \Drupal::currentUser();
          if ($workflow_state['changed_user'] != $user->id()) {
            unset($view->result[$key]);
          }
        }
      }
    }
    if ($view->id() == 'manage_webform_services' || $view->id() == 'manage_in_review_webform_services_listing') {
      $arrayKey = 'webform_id';
    }
    if (!empty($view->exposed_widgets)) {
      if (isset($view->exposed_widgets[$arrayKey]['#options'])) {
        $serviceTypes = $view->exposed_widgets[$arrayKey]['#options'];
        foreach ($serviceTypes as $key => $serviceType) {
          if ($key == 'template_erpw_workflow') {
            unset($view->exposed_widgets[$arrayKey]['#options'][$key]);
          }
          if ($key != 'template_erpw_workflow' && $key != 'All') {
            $webform = \Drupal::entityTypeManager()->getStorage('webform')->load($key);
            $tpa = $webform->getThirdPartySetting('erpw_webform', 'webform_service_type_map');
            $activeDomain = \Drupal::service('domain.negotiator')->getActiveDomain()->id();
            if (!is_null($tpa)) {
              if (!array_key_exists($activeDomain, $tpa)) {
                unset($view->exposed_widgets[$arrayKey]['#options'][$key]);
              }
            }
          }
        }
      }
    }
  }

  // If a service is in edit workflow, then show results from WSA node.
  if ($view->id() == 'service_based_service_providers_listing') {
    foreach ($view->result as $key => $row) {
      $webform_submission_id = $row->sid;
      $node = erpw_webform__load_wsa_node_by_sid($webform_submission_id);

      if ($node) {
        $node_data = json_decode($node->field_submission_data->value, TRUE);
        $submission_entity = $row->_entity;
        foreach ($node_data as $field_name => $field_value) {
          if ($submission_entity->hasField($field_name)) {
            $submission_entity->set($field_name, $field_value);
          }
          else {
            $submission_entity->setElementData($field_name, $field_value);
          }
        }
      }
    }
  }
  return $view;
}

/**
 * Helper function to load a node of type WSA by its webform submission ID (field_sid).
 *
 * @param int $webform_submission_id
 *   Takes Webform Submission ID as input.
 *
 * @return \Drupal\Core\Entity\EntityInterface | null
 *   Returns node entity if present else null.
 */
function erpw_webform__load_wsa_node_by_sid($webform_submission_id) {
  $query = \Drupal::entityQuery('node')
    ->condition('type', 'wsa')
    ->condition('field_sid', $webform_submission_id);

  $entity_id = $query->execute();
  $array = array_values($entity_id);
  $node_id = $array[0] ?? NULL;
  if (!empty($node_id)) {
    $node = \Drupal::entityTypeManager()->getStorage('node')->load($node_id);
    return $node;
  }
  return NULL;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function erpw_webform_theme_suggestions_views_view_fields_alter(array &$suggestions, array $variables) {
  if (isset($variables['view'])) {
    $suggestions[] = 'views_view_fields__' . $variables['view']->storage->id();
  }
}

/**
 * Implements hook_preprocess_views_view_fields() for views-view-fields.html.twig.
 */
function erpw_webform_preprocess_views_view_fields(&$variables) {
  // Get the fields for the current View.
  if ($variables['view']->storage->id() == 'manage_webform_services' || $variables['view']->storage->id() == 'service_based_service_providers_listing' || $variables['view']->storage->id() == 'webform_submissions' || $variables['view']->storage->id() == 'manage_in_review_webform_services_listing') {
    $sid = $variables['row']->sid;
    $webformSubmission = \Drupal::entityTypeManager()->getStorage('webform_submission')->load($sid);
    $webformID = $webformSubmission->get('webform_id')->getValue()[0]['target_id'];
    $webform = \Drupal::entityTypeManager()->getStorage('webform')->load($webformID);
    $tpa = $webform->getThirdPartySetting('erpw_webform', 'webform_service_type_map');
    // Access view rules.
    $userRoles = \Drupal::currentUser()->getRoles();
    $elements = $webform->getElementsDecoded();
    $allowed_view_fields = [];
    $label = '';
    foreach ($elements as $key => $element) {
      if ($key == 'step_1_add_service_details' || $key == 'step_2_contact_fields') {
        foreach ($element as $vkey => $value) {
          if (isset($value['#title'])) {
            if ($vkey == 'organisation') {
              $label = 'webform_submission_organisation_field';
            }
            elseif ($vkey == 'field_name_of_the_focal_point') {
              $label = 'webform_submission_focal_point_field';
            }
            elseif ($vkey == 'field_phone_number_of_focal_poin') {
              $label = 'webform_submission_hotline_contact_field';
            }
            elseif ($vkey == 'location') {
              $label = 'webform_submission_location_field';
            }
            elseif ($vkey == 'field_mode') {
              $label = 'webform_submission_mode_field';
            }
            else {
              $label = $vkey;
            }
            if (isset($value['#access_view_roles'])) {
              $counter = 0;
              foreach ($value['#access_view_roles'] as $allowedRole) {
                if (in_array($allowedRole, array_values($userRoles))) {
                  $counter++;
                }
                if ($counter != 0) {
                  $allowed_view_fields[$label] = 'TRUE';
                }
                else {
                  $allowed_view_fields[$label] = 'FALSE';
                }
              }
            }
            else {
              $allowed_view_fields[$label] = 'TRUE';
            }
          }
        }
      }
      if ($key == 'organisation') {
        $label = 'webform_submission_organisation_field';
      }
      elseif ($key == 'field_name_of_the_focal_point') {
        $label = 'webform_submission_focal_point_field';
      }
      elseif ($key == 'field_phone_number_of_focal_poin') {
        $label = 'webform_submission_hotline_contact_field';
      }
      elseif ($key == 'location') {
        $label = 'webform_submission_location_field';
      }
      elseif ($key == 'field_mode') {
        $label = 'webform_submission_mode_field';
      }
      else {
        $label = $key;
      }
      if (isset($element['#access_view_roles'])) {
        $counter = 0;
        foreach ($element['#access_view_roles'] as $allowedRole) {
          if (in_array($allowedRole, array_values($userRoles))) {
            $counter++;
          }
          if ($counter != 0) {
            $allowed_view_fields[$label] = 'TRUE';
          }
          else {
            $allowed_view_fields[$label] = 'FALSE';
          }
        }
      }
      else {
        $allowed_view_fields[$label] = 'TRUE';
      }
    }
    $variables['access_view_roles'] = $allowed_view_fields;
    foreach ($tpa as $settings) {
      if ($settings[0] != NULL) {
        $servicetype = \Drupal::entityTypeManager()->getStorage('node')->load(intval($settings[0]));
        if ($servicetype instanceof Node) {
          $variables['servicetype'] = $servicetype->get('title')->getValue()[0]['value'];
          $variables['servicetype_color'] = $servicetype->get('field_service_type_color')->getValue()[0]['color'];
          $variables['servicetype_icon'] = $servicetype->get('field_service_type_icon')->getValue()[0]['value'];
        }

        if ($variables['row']->_entity->getData()['organisation'] == NULL) {
          $variables['organisation'] = t('not available');
        }
        else {
          $organisation = \Drupal::entityTypeManager()->getStorage('node')->load($variables['row']->_entity->getData()['organisation']);
          if (isset($organisation)) {
            $variables['organisation'] = $organisation->get('title')->getValue()[0]['value'];
          }
        }

        $variables['sid'] = $variables['row']->sid;
        $variables['edit_url'] = Url::fromRoute('entity.webform_submission.edit_form', [
          'webform' => $webformID,
          'webform_submission' => $variables['row']->sid,
        ])->toString();
        // Only show data of Approved Services in Service Listing page.
        if ($variables['view']->storage->id() == 'service_based_service_providers_listing') {
          $variables['view_url'] = Url::fromRoute('erpw_webform.service_content_approved', ['webform_submission' => intval($variables['sid'])]);
        }
        else {
          $variables['view_url'] = Url::fromRoute('erpw_webform.service_content', ['webform_submission' => intval($variables['sid'])]);
        }
        $variables['moderate_url'] = Url::fromRoute('erpw_webform.service_moderate_content', ['webform_submission' => intval($variables['sid'])]);
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for page_title template.
 */
function erpw_webform_preprocess_page_title(&$variables) {
  $route_match = \Drupal::routeMatch();
  if ($route_match->getRouteName() === 'view.service_based_service_providers_listing.page_1') {
    $nodeID = $route_match->getParameter('node');
    $node = \Drupal::entityTypeManager()->getStorage('node')->load($nodeID);
    if ($node->bundle() === 'service_type') {
      $variables['title'] = t('@title', [
        '@title' => $node->getTitle(),
      ]);
    }
  }
  if ($route_match->getRouteName() === 'entity.webform.collection') {
    $variables['title'] = t('@title', [
      '@title' => t('Service Forms Configuration'),
    ]);
  }
  if ($route_match->getRouteName() === 'erpw_webform.webform.feedback_form') {
    $webform = \Drupal::routeMatch()->getParameter('webform');
    if ($webform instanceof WebformInterface) {
      $title = str_replace("Service Rating", "Feedback Form for", $webform->label());
      $variables['title'] = $title;
    }
  }
}

/**
 * Implements hook_preprocess_views_view().
 */
function erpw_webform_preprocess_views_view(&$variables) {
  // @todo Add caching for Service Listing page based on changing location.
  $variables['#cache']['contexts'][] = 'cookies';
  $variables['#cache']['contexts'][] = 'url';
}

/**
 * Implements hook_webform_submission_presave().
 */
function erpw_webform_webform_submission_presave($webform_submission) {
  $webformID = $webform_submission->get('webform_id')->getValue()[0]['target_id'];
  $values = $webform_submission->getData();
  // Service Rating Form Category.
  if (preg_match('/^webform_service_rating_\d+$/', $webformID)) {
    // Collect filtering information from service.
    $service = \Drupal::service('current_route_match')->getParameter('servicesid');
    $service_data = $service->getData();
    $values['service_submission_id'] = $service->id();
    $values['service_location_tid'] = $service_data['location']['location_tid'];
    $values['service_organisation'] = $service_data['organisation'];
    $webform_submission->setData($values);
  }
  // eRPW (Services) Category.
  else {
    $last_non_empty_value = '';
    $values['location']['location_tid'] = '';
    $composite_value = $values['location'];
    $location_reversed = array_reverse($composite_value);
    if (is_array($composite_value)) {
      foreach ($location_reversed as $value) {
        if (!empty($value)) {
          $last_non_empty_value = $value;
          break;
        }
      }
    }
    $values['location']['location_tid'] = $last_non_empty_value;
    $values['orignal_data'] = json_encode($webform_submission->getOriginalData());
    $webform = \Drupal::entityTypeManager()->getStorage('webform')->load($webformID);
    $tpa = $webform->getThirdPartySetting('erpw_webform', 'webform_service_type_map');
    foreach ($tpa as $domain => $arr) {
      $values['submission_domain'] = $domain;
      $values['service_type'] = $arr[0];
    }
    $service_type_node = \Drupal::entityTypeManager()->getStorage('node')->load($values['service_type']);
    $service_type = $service_type_node->getTitle();
    $webform_submission_id = $webform_submission->id();
    $current_transition = $values['erpw_workflow']['transition'];
    $rejected_transitions = ['edits_rejected_by_focal_point', 'edits_rejected_by_gbv_coordination', 'deletion_rejected_by_focal_point', 'deletion_rejected_by_gbv_coordination'];
    $edit_delete_end_transitions = ['publish_edits', 'approve_deletion'];

    // Store approved data in WSA while it is in Edit or Delete Workflow.
    if ($values['erpw_workflow']['workflow_state'] == 'approve' && !in_array($current_transition, $edit_delete_end_transitions)) {
      // Node for Deletion workflow:
      if ($current_transition == 'submit_for_deletion_to_focal_point' || $current_transition == 'submit_for_deletion_to_gbv_coordination') {
        $node = erpw_webform__create_or_update_wsa_node($service_type, $webform_submission_id, $values['orignal_data']);

        $message = 'The submission for service of <em>' . $service_type . '</em>, with Submission Id - ' . $webform_submission->id() . ' has entered the Deletion Workflow.<br>The previous approved data is stored in the node id ' . $node->id();
        \Drupal::logger('erpw_webform__deletion')->notice($message);
      }
      // Node for Edit Workflow:
      else {
        $node = erpw_webform__create_or_update_wsa_node($service_type, $webform_submission_id, $values['orignal_data']);

        $message = 'The submission for service of <em>' . $service_type . '</em>, with Submission Id - ' . $webform_submission->id() . ' has entered the Edit Workflow.<br>The previous approved data is stored in the node id ' . $node->id();
        \Drupal::logger('erpw_webform__edit')->notice($message);
      }
    }
    elseif ($current_transition == 'publish_edits' || $current_transition == 'approve_deletion' || $values['erpw_workflow']['workflow_state'] == 'deleted') {
      // Delete the node once it passes the review process.
      $node = erpw_webform__load_wsa_node_by_sid($webform_submission_id);
      if (!empty($node)) {
        $node->delete();
        // End of Delete workflow.
        if ($current_transition == 'approve_deletion' || $values['erpw_workflow']['workflow_state'] == 'deleted') {
          \Drupal::logger('erpw_webform__deletion')->notice('The node %title of type Webform Submission Approved has been deleted, as its deletion workflow is complete.', [
            '%title' => $node->getTitle(),
          ]);

          \Drupal::logger('erpw_webform__deletion')->notice('The Webform Submission of id %sid has been deleted. Since this submission has passed through the Deletion Workflow.', [
            '%sid' => $webform_submission_id,
          ]);
          $webform_submission->delete();
        }
        // End of Edit workflow.
        else {
          \Drupal::logger('erpw_webform__edit')->notice('The node %title of type Webform Submission Approved has been deleted, as its approval workflow is complete.', [
            '%title' => $node->getTitle(),
          ]);
        }
        \Drupal::entityTypeManager()->getStorage('node')->resetCache([$node->id()]);
      }
      // Case where the Service is directly actioned on by the GBV Coordination.
      else {
        if ($current_transition == 'approve_deletion' || $values['erpw_workflow']['workflow_state'] == 'deleted') {
          \Drupal::logger('erpw_webform__deletion')->notice('The Webform Submission of id %sid has been deleted. Since this submission has passed through the Deletion Workflow.', [
            '%sid' => $webform_submission_id,
          ]);
          $webform_submission->delete();
        }
        // Publish Edits.
        else {
          $webform_submission->setData($values);
        }
      }
    }
    // Delete WSA nodes if submissions are rejected, replace the data with the old approved data.
    elseif (in_array($current_transition, $rejected_transitions)) {
      $node = erpw_webform__load_wsa_node_by_sid($webform_submission_id);
      if ($node) {
        $node_data = json_decode($node->field_submission_data->value, TRUE);
        try {
          $webform_submission->setData($node_data);
        }
        catch (EntityStorageException $e) {
          \Drupal::logger('erpw_webform__reject')->error($e);
        }
        \Drupal::logger('erpw_webform__reject')->notice('Webform submission with SID %sid was updated with the old approved data, as the changes were rejected in the workflow.', ['%sid' => $webform_submission_id]);

        // Delete the node as well.
        $node->delete();
        \Drupal::logger('erpw_webform__reject')->notice('The node %title of type Webform Submission Approved has been deleted, as its workflow changes have been rejected.', [
          '%title' => $node->getTitle(),
        ]);
      }
    }
    else {
      $webform_submission->setData($values);
    }
    $view = Views::getView('referral_pathway_on_homepage');
    \Drupal::service('cache_tags.invalidator')->invalidateTags(['node:' . $service_type_node->id()]);
    $view->storage->invalidateCaches();
  }
}

/**
 * Implements hook_menu_local_actions_alter().
 */
function erpw_webform_menu_local_actions_alter(&$local_tasks) {
  // Check if the contributed module's link needs to be altered.
  $local_tasks['entity.webform.add_form']['title'] = t('Add new service form');
  $local_tasks['entity.webform.add_form']['route_name'] = 'entity.webform.templates';
}

/**
 * Implements hook_views_query_alter().
 *
 * @throws \Drupal\Component\Plugin\Exception\PluginException
 */
function erpw_webform_views_query_alter(ViewExecutable &$view, QueryPluginBase &$query) {
  $activeDomain = \Drupal::service('domain.negotiator')->getActiveDomain()->id();
  $current_user = User::load(\Drupal::currentUser()->id());
  $roles = $current_user->getRoles();
  $user_org_id = $current_user->get('field_organisation')->getValue()[0]['target_id'];
  if ($view->id() == 'webform_submissions') {
    // Ensure through filters that draft is only shown to the user who submitted it.
    $user = \Drupal::currentUser();
    $conditions = &$query->where[1]['conditions'];
    if ($view->getExposedInput()['webform_submission_workflow_filter'] != 'draft') {
      $sid_array = erpw_webform__fetch_draft_submission_ids();
      // Remove Service Rating Submissions.
      $sid_array = array_merge($sid_array, erpw_webform_fetch_service_rating_submission_ids());
      $sid = implode(',', $sid_array);
      if ($sid) {
        foreach ($conditions as $key => &$conditions_group) {
          if ($conditions_group['field'] == 'webform_submission.sid') {
            $conditions_group['value'] = $sid;
            $conditions_group['operator'] = 'NOT IN';
          }
          if ($conditions_group['field'] == 'webform_submission.uid') {
            unset($conditions[$key]);
          }
        }
      }
    }
    else {
      foreach ($conditions as $key => &$conditions_group) {
        if ($conditions_group['field'] == 'webform_submission.sid') {
          unset($conditions[$key]);
        }
        if ($conditions_group['field'] == 'webform_submission.uid') {
          $conditions_group['value'] = $user->id();
        }
      }
    }
    erpw_webform_add_webform_submission_add_where_join($query, $activeDomain, 'domain');
    if (in_array('service_provider_focal_point', $roles)) {
      erpw_webform_add_webform_submission_add_where_join($query, $user_org_id, 'organisation');
    }
  }
  // Unset rows that are not in approve, edit or delete workflow states.
  if ($view->id() == 'manage_webform_services' || $view->id() == 'service_based_service_providers_listing') {
    // $query->addWhere(1, 'webform_submission_data_workflow.property', 'workflow_state', '=');
    if ($view->id() == 'service_based_service_providers_listing') {
      // Filter out rows which do not belong to the current location.
      $cookie_tid = \Drupal::service('erpw_location.location_cookie')->getCookieValue();
      $ptids = get_child_term_tid($cookie_tid);

      // For Services with only domain as location, location entity id is set instead of tid.
      $location_entity = erpw_webform__getLocationEntityIdByTid($cookie_tid);
      if (!empty($location_entity)) {
        $ptids = array_merge([strval($location_entity)], $ptids);
      }

      if ($service_type = \Drupal::routeMatch()->getRawParameter('node')) {
        // Service type Join.
        erpw_webform_add_webform_submission_add_where_join($query, $service_type, 'st');
      }
      // Domain Join.
      erpw_webform_add_webform_submission_add_where_join($query, $activeDomain, 'domain');

      // Location Join.
      $extra[] = [
        'field' => 'property',
        'value' => [
          0 => 'location_tid',
          1 => 'level_1',
          2 => 'level_2',
          3 => 'level_3',
          4 => 'level_4',
        ],
      ];
      erpw_webform_add_webform_submission_add_where_join($query, $ptids, 'location', 'IN', 0, 'value', $extra);

      // Workflow join.
      $workflow_states = ['approve', 'edits_in_review_with_focal_point', 'edits_in_review_with_gbv_coordination', 'deletion_in_review_with_focal_point', 'deletion_in_review_with_gbv_coordination'];
      erpw_webform_add_webform_submission_add_where_join($query, $workflow_states, 'workflow', 'IN');
    }
    else {

      // Workflow join.
      erpw_webform_add_webform_submission_add_where_join($query, 'approve', 'workflow');

      // For SP Staff & Focal Point - Services list should only include services by their organization.
      if ($current_user->hasRole('service_provider_staff') || $current_user->hasRole('service_provider_focal_point')) {
        // Get the current user's organization ID.
        if ($current_user->hasField('field_organisation') && !$current_user->get('field_organisation')->isEmpty()) {
          // Add a condition to the query to filter by organization.
          erpw_webform_add_webform_submission_add_where_join($query, $user_org_id, 'organisation');
        }
      }
      // Get the current user's location ID, #522 - overcoming the service data issue.
      if ($current_user->hasRole('service_provider_staff') || $current_user->hasRole('service_provider_focal_point') || $current_user->hasRole('interagency_gbv_coordinator') || $current_user->hasRole('country_admin')) {
        if ($current_user->hasField('field_location') && !$current_user->get('field_location')->isEmpty()) {
          $user_location_id = $current_user->get('field_location')->getValue()[0]['target_id'];

          // Get the child term IDs for the user's location.
          $ptids = get_child_term_tid($user_location_id);

          // Add a condition to the query to filter by location.
          $extra[] = [
            'field' => 'property',
            'value' => [
              0 => 'location_tid',
              1 => 'level_1',
              2 => 'level_2',
              3 => 'level_3',
              4 => 'level_4',
            ],
          ];
          erpw_webform_add_webform_submission_add_where_join($query, $ptids, 'location', 'IN', 0, 'value', $extra);
        }
      }
      // Domain Join.
      erpw_webform_add_webform_submission_add_where_join($query, $activeDomain, 'domain');
    }
  }
  // Unset rows that are not in review workflow states as per roles.
  if ($view->id() == 'manage_in_review_webform_services_listing') {
    erpw_webform_add_webform_submission_add_where_join($query, $activeDomain, 'domain');
    if (in_array('service_provider_focal_point', $roles)) {
      $workflow_states = ['in_review_with_focal_point', 'edits_in_review_with_focal_point', 'deletion_in_review_with_focal_point'];
      erpw_webform_add_webform_submission_add_where_join($query, $workflow_states, 'workflow', 'IN');
      erpw_webform_add_webform_submission_add_where_join($query, $user_org_id, 'organisation');
    }
    elseif (in_array('country_admin', $roles) || in_array('interagency_gbv_coordinator', $roles)) {
      $workflow_states = ['in_review', 'edits_in_review_with_gbv_coordination', 'deletion_in_review_with_gbv_coordination'];
      erpw_webform_add_webform_submission_add_where_join($query, $workflow_states, 'workflow', 'IN');
    }
    elseif (in_array('administrator', $roles) || in_array('super_admin', $roles)) {
      $workflow_states = ['in_review', 'in_review_with_focal_point', 'edits_in_review_with_focal_point', 'edits_in_review_with_gbv_coordination', 'deletion_in_review_with_focal_point', 'deletion_in_review_with_gbv_coordination'];
      erpw_webform_add_webform_submission_add_where_join($query, $workflow_states, 'workflow', 'IN');
    }
  }
}

/**
 * Add where condition to query on webform_submission_data.
 *
 * This function adds a relationship to webform_submission_data using on alias
 * so that we can filter webform submission fields properly.
 *
 * @param \Drupal\views\Plugin\views\query\QueryPluginBase $query
 *   The Query object.
 * @param mixed $column_value
 *   Either an array or string.
 * @param string $alias_slug
 *   The alias slug to keep alias table alias unique.
 * @param string $op
 *   The sql query operation.
 *
 * @return void
 *
 * @throws \Drupal\Component\Plugin\Exception\PluginException
 */
function erpw_webform_add_webform_submission_add_where_join(QueryPluginBase &$query, mixed $column_value, string $alias_slug, string $op = '=', $group = 1, string $column_name = 'value', $extra = []) {
  $configuration = [
    'type' => 'LEFT',
    'table' => 'webform_submission_data',
    'field' => 'sid',
    'left_table' => 'webform_submission',
    'left_field' => 'sid',
    'operator' => '=',
  ];
  if (!empty($extra)) {
    $configuration['extra'] = $extra;
  }
  $join = Views::pluginManager('join')->createInstance('standard', $configuration);
  $query->addRelationship('webform_submission_data_' . $alias_slug, $join, 'webform_submission_data');
  $query->addWhere($group, "webform_submission_data_$alias_slug.$column_name", $column_value, $op);
}

/**
 * Fetch all submission ids which are in draft state.
 *
 * @return array
 *   Returns an array of submission ids.
 */
function erpw_webform__fetch_draft_submission_ids() {
  $query = \Drupal::database()->select('webform_submission_data', 'wsd');
  $query->fields('wsd', ['sid']);
  $query->condition('wsd.value', 'draft');
  $results = $query->execute()->fetchAll(\PDO::FETCH_COLUMN);
  return $results;
}

/**
 * Fetch submission IDs for webform submissions with webform_id like 'webform_service_rating_%'.
 *
 * @return array
 *   An array of submission IDs.
 */
function erpw_webform_fetch_service_rating_submission_ids() {
  $query = \Drupal::database()->select('webform_submission_data', 'wsd');
  $query->fields('wsd', ['sid']);
  $query->condition('wsd.webform_id', 'webform_service_rating_', 'LIKE');
  $results = $query->execute()->fetchAll(\PDO::FETCH_COLUMN);
  return $results;
}

/**
 * Get location entity.
 */
function erpw_webform__getLocationEntityIdByTid($tid) {
  $location_entity_id = "";
  $location_entity = \Drupal::service('entity_type.manager')->getStorage('location')->loadByProperties(
    [
      'field_location_taxonomy_term' => $tid,
      'status' => 1,
      'type' => 'country',
    ]
  );
  if (!empty($location_entity)) {
    $location_entity_id = array_keys($location_entity)[0];
  }
  return $location_entity_id;
}

/**
 * Create or update a node of type 'wsa' based on the submission data.
 *
 * @param string $service_type
 *   The service type.
 * @param int $submission_id
 *   The submission ID.
 * @param array $original_data
 *   The original data to be saved in the node.
 * @param bool $deletion_node
 *   Whether the submission is entering the Deletion workflow.
 *
 * @return \Drupal\node\NodeInterface|null
 *   The created or updated node object, or NULL if there was an error.
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function erpw_webform__create_or_update_wsa_node($service_type, $submission_id, $original_data, $deletion_node = FALSE) {
  $entity_type_manager = \Drupal::entityTypeManager();

  $query = $entity_type_manager->getStorage('node')->getQuery()
    ->condition('type', 'wsa')
    ->condition('field_sid', $submission_id)
    ->range(0, 1);
  $entity_ids = $query->execute();

  $node_data = [
    'type' => 'wsa',
    'title' => ($deletion_node ? '(Deletion) ' : '') . $service_type . ' - ' . $submission_id,
    'field_sid' => $submission_id,
    'field_submission_data' => $original_data,
  ];

  if (!empty($entity_ids)) {
    // If a node exists, load it and modify the field_submission_data field.
    $node = $entity_type_manager->getStorage('node')->load(reset($entity_ids));
    $node->set('title', $node_data['title']);
    $node->set('field_submission_data', $node_data['field_submission_data']);
  }
  else {
    $node = $entity_type_manager->getStorage('node')->create($node_data);
  }

  try {
    $node->save();
    return $node;
  }
  catch (\Exception $e) {
    return NULL;
  }
}

/**
 * Preprocess a table.
 */
function erpw_webform_preprocess_table(&$variables) {
  $currentRoute = \Drupal::routeMatch()->getRouteName();
  if ($currentRoute == 'entity.webform.templates') {
    $erpw_service_provider_form_text = [
      '#markup' => t($variables['rows'][0]['cells']['title']['content']->getText()),
    ];
    $variables['rows'][0]['cells']['title']['content'] = $erpw_service_provider_form_text;
    unset($variables['rows'][0]['cells']['title']['content']);
    unset($variables['rows'][0]['cells']['description']['content']);
    unset($variables['rows'][0]['cells']['category']['content']);
    unset($variables['rows'][0]['cells']['operations']['content']);
    unset($variables['rows'][1]['cells']['operations']['content']['preview']);
  }
}
