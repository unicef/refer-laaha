<?php

/**
 * @file
 */

use Drupal\webform\Entity\Webform;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Url;
use Drupal\user\Entity\User;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Session\AccountInterface;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\Views;

/**
 * @file
 * Contains erpw_webform.module.
 */

/**
 * Implements hook_webform_add_form().
 */
function erpw_webform_webform_add_form(array &$form, FormStateInterface $form_state, $webform_type = NULL) {
  // Load the appropriate webform template.
  if ($webform_type == 'default') {
    $webform = Webform::create([]);
  }
  elseif ($webform_type == 'eRPW') {
    $webform = Webform::create([
      'template' => 'template_erpw_workflow',
    ]);
  }

  // Set the webform values.
  $form_state->set('webform', $webform);
  $form_state->set('template', $webform->get('template')->value);

  // Build the webform form.
  $form_object = \Drupal::entityTypeManager()
    ->getFormObject('webform', 'default')
    ->setEntity($webform);
  $form = \Drupal::formBuilder()->getForm($form_object);

  return $form;
}

/**
 * Implements hook_entity_type_build().
 */
function erpw_webform_entity_type_build(array &$entity_types) {

  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */

  // Add a form for a custom node form without overriding the default
  // node form. To override the default node form, use hook_entity_type_alter().
  $entity_types['webform']->setFormClass('duplicate', 'Drupal\erpw_webform\Form\WebformAddForm');
  $entity_types['webform']->setFormClass('add', 'Drupal\erpw_webform\Form\WebformAddForm');
  $entity_types['webform']->setListBuilderClass('Drupal\erpw_webform\WebformListBuilder');
  $entity_types['webform_submission']->setListBuilderClass('Drupal\erpw_webform\ErpwWebformSubmissionListBuilder');
}

/**
 * Implements hook_entity_type_alter().
 */
function erpw_webform_entity_type_alter(array &$entity_types) {
  $entity_types['webform_submission']->setListBuilderClass('Drupal\erpw_webform\ErpwWebformSubmissionListBuilder');
}

/**
 * Implements hook_preprocess_html().
 */
function erpw_webform_preprocess_html(&$variables) {
  $currentRoute = \Drupal::routeMatch()->getRouteName();
  if ($currentRoute == 'erpw_webform.service_content' || $currentRoute == 'erpw_webform.service_moderate_content') {
    $variables['attributes']['class'][] = 'view-page-webform-submission';
  }
  if ($currentRoute == 'entity.webform.templates' || $currentRoute == 'entity.webform.collection') {
    $current_user = \Drupal::currentUser();
    if ($current_user->isAuthenticated()) {
      $uid = $current_user->id();
      $user = User::load($uid);
      if ($user) {
        $roles = $user->getRoles();
        if (!in_array('administrator', array_values($roles))) {
          $variables['attributes']['class'][] = 'hide-webform-action-links';
          $variables['#attached']['library'][] = 'erpw_webform/erpw_webform_workflow';
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_page().
 */
function erpw_webform_preprocess_page(&$variables) {
  $currentRoute = \Drupal::routeMatch()->getRouteName();
  if ($currentRoute == "entity.webform.canonical" || $currentRoute == 'entity.webform_submission.edit_form' || $currentRoute == 'erpw_webform.service_content' || $currentRoute == 'erpw_webform.service_moderate_content') {
    $variables['#attached']['library'][] = 'erpw_webform/erpw_webform_js';
  }
  if ($currentRoute == 'entity.webform.add_form' || $currentRoute == 'entity.webform.templates') {
    $variables['#attached']['library'][] = 'erpw_webform/erpw_webform_template';
  }
  if ($currentRoute == 'erpw_webform.service_webforms') {
    $variables['#attached']['library'][] = 'erpw_webform/erpw_webform_js';
    $variables['#attached']['library'][] = 'erpw_custom/erpw_js';
    $variables['#attached']['library'][] = 'unicef_iconpicker/unicef-iconpicker';
  }
  if ($currentRoute == "entity.webform.canonical") {
    $variables['#attached']['library'][] = 'erpw/global';
  }
}

/**
 * Implements hook_entity_insert().
 */
function erpw_webform_entity_insert(EntityInterface $entity) {
  // Check if the entity is a Webform.
  if ($entity->getEntityTypeId() == 'webform') {
    // Enable content locking for the new webform.
    $webform_id = $entity->id();

    $config_factory = \Drupal::configFactory();
    $config = $config_factory->getEditable('content_lock.settings');
    $webforms_array = $config->get('types')['webform_submission'];
    $webforms_array[$webform_id] = $webform_id;
    $config->set('types', ['webform_submission' => $webforms_array]);
    $config->save();

    // Cache the url of the webform.
    $url = $entity->toUrl()->setAbsolute()->toString();
    $path = preg_replace('/^\/\w{2}\b/', '', parse_url($url, PHP_URL_PATH));
    // Get the PWA URLs to cache configuration object.
    $configFactory = \Drupal::service('config.factory');
    $config = $configFactory->getEditable('pwa.config');
    // Get the current URLs to cache array.
    $urls_to_cache = $config->get('urls_to_cache');
    $urls_to_cache = explode("\r\n", $urls_to_cache);
    $urls_to_cache[] = $path;
    $urls_to_cache = implode("\r\n", $urls_to_cache);
    // Add the webform URL to the URLs to cache array if it's not already present.
    // Save the updated URLs to cache array.
    $config->set('urls_to_cache', $urls_to_cache)->save();
  }
}

/**
 * Implements hook_theme().
 */
function erpw_webform_composite_theme() {
  return [
    'location_list' => [
      'render element' => 'element',
    ],
  ];
}

/**
 * Implements hook_form_alter().
 */
function erpw_webform_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Check if this is the webform submission edit form.
  $currentRoute = \Drupal::routeMatch()->getRouteName();
  $account = User::load(\Drupal::currentUser()->id());
  $user_roles = $account->getRoles();
  if ($currentRoute == 'entity.webform_submission.edit_form') {
    // Set default values for the 'field_name' and 'field_email' fields.
    $elements = $form['elements'];
    foreach ($elements as $element) {
      if ($element["#type"] == "location_list_element" && isset($element["#default_value"])) {
        $form['#attached']['drupalSettings']['erpw_webform']['default_location_values'] = $element["#default_value"];
      }
    }
    if (in_array('service_provider_staff', $user_roles) || in_array('service_provider_focal_point', $user_roles)) {
      foreach ($elements as $key => $element) {
        if ($key == 'step_1_add_service_details') {
          foreach ($element as $skey => $sub_element) {
            if ($skey == 'organisation') {
              $form['elements'][$key][$skey]["#disabled"] = TRUE;
            }
          }
        }
      }
    }
  }
  if ($currentRoute == 'entity.webform.canonical' && ($form["#webform_id"] != "" && !is_null($form["#webform_id"]))) {
    if (in_array('service_provider_staff', $user_roles) || in_array('service_provider_focal_point', $user_roles)) {
      $user_org = $account->get('field_organisation')->getValue()[0]['target_id'];
      $elements = $form['elements'];
      foreach ($elements as $key => $element) {
        if ($key == 'step_1_add_service_details') {
          foreach ($element as $skey => $sub_element) {
            if ($skey == 'organisation') {
              $form['elements'][$key][$skey]["#default_value"] = $user_org;
              $form['elements'][$key][$skey]["#disabled"] = TRUE;
            }
          }
        }
      }
    }
  }
  if ($currentRoute == 'entity.webform_submission.edit_form' || ($currentRoute == 'entity.webform.canonical' && ($form["#webform_id"] != "" && !is_null($form["#webform_id"])))) {
    $options = $form['elements']['step_1_add_service_details']['organisation']['#options'];
    $activeDomain = \Drupal::service('domain.negotiator')->getActiveDomain()->id();
    foreach ($options as $key => $label) {
      $org = \Drupal::entityTypeManager()->getStorage('node')->load($key);
      $orgDomains = $org->get('field_domain_access')->getValue();
      $c = 0;
      foreach ($orgDomains as $orgDomain) {
        if ($orgDomain['target_id'] == $activeDomain) {
          $c++;
        }
      }
      if ($c == 0) {
        unset($options[$key]);
      }
    }
    $form['elements']['step_1_add_service_details']['organisation']['#options'] = $options;
  }
}

/**
 * Implements hook__entity_access().
 */
function erpw_webform_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  $user_roles = $account->getRoles();
  $user = User::load(\Drupal::currentUser()->id());
  $domainAccess = $user->get('field_domain_access')->getValue();
  $x = 0;
  $currentRoute = \Drupal::routeMatch()->getRouteName();
  if ($entity->getEntityTypeId() == 'webform') {
    $tpa = $entity->getThirdPartySetting('erpw_webform', 'webform_service_type_map');
    foreach ($user_roles as $key_r => $role) {
      if ($role == 'country_admin' || $role == 'interagency_gbv_coordinator') {
        if (is_null($tpa)) {
          $x++;
          return AccessResult::allowed();
        }
        else {
          foreach ($domainAccess as $key => $domain) {
            if (is_array($tpa)) {
              if (array_key_exists($domain['target_id'], $tpa)) {
                $x++;
                return AccessResult::allowed();
              }
            }
          }
        }
      }
      if ($role == 'super_admin' ||$role == 'administrator') {
        $x++;
        return AccessResult::allowed();
      }
      if (($role == 'service_provider_focal_point' || $role == 'service_provider_staff') && $currentRoute == 'entity.webform.canonical') {
        $x++;
        return AccessResult::allowed();
      }
    }
    if ($x == 0) {
      return AccessResult::forbidden();
    }
  }
  $s = 0;
  if ($entity->getEntityTypeId() == 'webform_submission') {
    $webformID = $entity->get('webform_id')->getValue()[0]['target_id'];
    $webform = \Drupal::entityTypeManager()->getStorage('webform')->load($webformID);
    $tpa = $webform->getThirdPartySetting('erpw_webform', 'webform_service_type_map');
    foreach ($user_roles as $key_r => $role) {
      if ($role == 'country_admin' || $role == 'interagency_gbv_coordinator' || $role == 'service_provider_staff' || $role == 'service_provider_focal_point') {
        foreach ($domainAccess as $key => $domain) {
          if (is_array($tpa)) {
            if (array_key_exists($domain['target_id'], $tpa)) {
              $s++;
              return AccessResult::allowed();
            }
          }
        }
      }
      if ($role == 'super_admin' || $role == 'administrator') {
        $s++;
        return AccessResult::allowed();
      }
    }
    if ($s == 0) {
      return AccessResult::forbidden();
    }
  }
}

/**
 * Implements hook_views_data_alter().
 */
function erpw_webform_views_data_alter(array &$data) {
  $data['webform_submission']['webform_submission_focal_point_field'] = [
    'title' => t('Webform Submission Focal Point field.'),
    'help' => t('Generic field for displaying focal point name for all submissions.'),
    'field' => [
      'id' => 'webform_submission_focal_point_field',
      'entity type' => 'webform_submission',
      'label' => t('Webform Submission Focal Point field.'),
      'real field' => 'webform_submission_focal_point_field',
    ],
  ];
  $data['webform_submission']['webform_submission_hotline_contact_field'] = [
    'title' => t('Webform Submission Hotline contact field.'),
    'help' => t('Generic field for displaying hotline contact for all submissions.'),
    'field' => [
      'id' => 'webform_submission_hotline_contact_field',
      'entity type' => 'webform_submission',
      'label' => t('Webform Submission hotline contact field.'),
      'real field' => 'webform_submission_hotline_contact_field',
    ],
  ];
  $data['webform_submission']['webform_submission_organisation_field'] = [
    'title' => t('Webform Submission Organisation field.'),
    'help' => t('Generic field for displaying organisation for all submissions.'),
    'field' => [
      'id' => 'webform_submission_organisation_field',
      'entity type' => 'webform_submission',
      'label' => t('Webform Submission Organisation field.'),
      'real field' => 'webform_submission_organisation_field',
    ],
  ];
  $data['webform_submission']['webform_submission_mode_field'] = [
    'title' => t('Webform Submission Service Mode field.'),
    'help' => t('Generic field for displaying service mode for all submissions.'),
    'field' => [
      'id' => 'webform_submission_mode_field',
      'entity type' => 'webform_submission',
      'label' => t('Webform Submission Sevice Mode field.'),
      'real field' => 'webform_submission_mode_field',
    ],
  ];
  $data['webform_submission']['webform_submission_location_field'] = [
    'title' => t('Webform Submission location field.'),
    'help' => t('Generic field for displaying location for all submissions.'),
    'field' => [
      'id' => 'webform_submission_location_field',
      'entity type' => 'webform_submission',
      'label' => t('Webform Submission location field.'),
      'real field' => 'webform_submission_location_field',
    ],
  ];
  $data['webform_submission']['webform_submission_workflow'] = [
    'title' => t('Webform Submission workflow.'),
    'help' => t('Generic field for displaying workflow for all submissions.'),
    'field' => [
      'id' => 'webform_submission_workflow',
      'entity type' => 'webform_submission',
      'label' => t('Webform Submission Workflow.'),
      'real field' => 'webform_submission_workflow',
    ],
  ];
  $data['webform_submission']['webform_submission_workflow_filter'] = [
    'title' => t('Webform Submission Workflow Filter'),
    'filter' => [
      'title' => t('Webform Submission Workflow Filter'),
      'help' => t('Provides a custom filter for workflow status.'),
      'field' => 'webform_submission_workflow',
      'id' => 'webform_submission_workflow_filter',
    ],
  ];
  $data['webform_submission']['webform_submission_organisation_filter'] = [
    'title' => t('Webform Submission Organisation Filter'),
    'filter' => [
      'title' => t('Webform Submission Organisation Filter'),
      'help' => t('Provides a custom filter for organisation.'),
      'field' => 'webform_submission_organisation_field',
      'id' => 'webform_submission_organisation_filter',
    ],
  ];
  return $data;
}

/**
 * Implements hook_entity_operation_alter().
 */
function erpw_webform_entity_operation_alter(array &$operations, EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'webform_submission') {
    // Add custom operation.
    $sid = $entity->get('sid')->getValue()[0]['value'];
    $operations['view']['url'] = Url::fromRoute('erpw_webform.service_content', ['webform_submission' => intval($sid)]);
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function erpw_webform_menu_local_tasks_alter(&$data, $route_name) {
  // Override local task links for webform submissions.
  foreach ($data as $key => $value) {
    if ($key == 'tabs') {
      foreach ($value as $subKey => $routes) {
        foreach ($routes as $route_name => $properties) {
          if ($route_name == 'entity.webform_submission.canonical') {
            $sid = intval($properties['#link']['url']->getRouteParameters()['webform_submission']);
            $data[$key][$subKey][$route_name]['#link']['url'] = Url::fromRoute('erpw_webform.service_content', ['webform_submission' => intval($sid)]);
          }
          if ($route_name == 'entity.webform_submission.notes_form') {
            unset($data[$key][$subKey][$route_name]);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_menu_views_pre_render().
 */
function erpw_webform_views_pre_render(&$view) {
  // Alter exposed filter value to only current domain's service type.
  if ($view->id() == 'webform_submissions' || $view->id() == 'manage_webform_services' || $view->id() == 'manage_in_review_webform_services_listing') {
    $arrayKey = '';
    if ($view->id() == 'webform_submissions') {
      $arrayKey = 'service_type';
    }
    if ($view->id() == 'manage_webform_services' || $view->id() == 'manage_in_review_webform_services_listing') {
      $arrayKey = 'webform_id';
    }
    $serviceTypes = $view->exposed_widgets[$arrayKey]['#options'];
    foreach ($serviceTypes as $key => $serviceType) {
      if ($key == 'template_erpw_workflow') {
        unset($view->exposed_widgets[$arrayKey]['#options'][$key]);
      }
      if ($key != 'template_erpw_workflow' && $key != 'All') {
        $webform = \Drupal::entityTypeManager()->getStorage('webform')->load($key);
        $tpa = $webform->getThirdPartySetting('erpw_webform', 'webform_service_type_map');
        $activeDomain = \Drupal::service('domain.negotiator')->getActiveDomain()->id();
        if (!is_null($tpa)) {
          if (!array_key_exists($activeDomain, $tpa)) {
            unset($view->exposed_widgets[$arrayKey]['#options'][$key]);
          }
        }
      }
    }
  }

  // Unset services which do not belong to the active location or its lower levels.
  if ($view->id() == 'service_based_service_providers_listing') {
    foreach ($view->result as $key => $row) {
      $sid = $row->sid;
      $webform_submission = \Drupal::entityTypeManager()->getStorage('webform_submission')->load($sid);
      $location_country = $webform_submission->getData()['location']['location_options'];

      // Unset submissions which do not have the country of active domain.
      $domain = \Drupal::service('domain.negotiator')->getActiveDomain();
      $config = \Drupal::config('domain.location.' . $domain->get('id'));
      $domain_tid = $config->get('location');
      // Location id of active domain.
      $location_entity_id = \Drupal::service('erpw_location.location_services')->getLocationSingleEntityIdByTid($domain_tid);
      if ($location_country != $location_entity_id) {
        unset($view->result[$key]);
      }
      else {
        $location_of_domain = $webform_submission->getData()['location']['location_tid'];
      }

        // If lower levels of domain are selected then,
        // only show locations for its own lower levels.
        $request = \Drupal::request();
        // $cookie_tid = $request->cookies->get('location_tid');
        $cookie_tid = \Drupal::service('erpw_location.location_cookie')->getCookieValue();
        if ($cookie_tid != $domain_tid) {
          // Remove rows which have only domain selected.
          if ($location_of_domain == $location_entity_id || $location_of_domain == NULL) {
            unset($view->result[$key]);
          } 
          else {
            $location_of_level = $webform_submission->getData()['location']['location_tid'];
            $term_storage = \Drupal::service('entity_type.manager')->getStorage('taxonomy_term');
            $parent_term = $term_storage->load($cookie_tid);
            if ($parent_term != null) {
              $tree = $term_storage->loadTree($parent_term->bundle(), $cookie_tid);
              $lower_level_tids = [];
              foreach ($tree as $term) {
                $lower_level_tids[] = $term->tid;
              }
              $location_tree = [$cookie_tid, ...$lower_level_tids];
              // Also remove all others which are not in its lower levels.
              if (!in_array($location_of_level, $location_tree)) {
                unset($view->result[$key]);
              }
            }
          }
        }
      }
    }

    // Manage Services - Services list should only include services by SP organization and in SP location
    if ($view->id() == 'manage_webform_services') {
      foreach ($view->result as $key => $row) {
        $sid = $row->sid;
        $webform_submission = \Drupal::entityTypeManager()->getStorage('webform_submission')->load($sid);
        $uid = \Drupal::currentUser()->id();
        $current_user = User::load($uid);
        if ($current_user->hasRole('service_provider_staff') || $current_user->hasRole('service_provider_focal_point')) {
          if ($current_user->hasField('field_location') && !$current_user->get('field_location')->isEmpty()) {
            $user_location_id = $current_user->get('field_location')->getValue()[0]['target_id'];
            $ptids = get_child_term_tid($user_location_id);
            $service_location = $webform_submission->getData()['location']['location_tid'];
            if (!in_array($service_location, $ptids)) {
              unset($view->result[$key]);
            }
          }
          $user_org_id = '';
          if ($current_user->hasField('field_organisation') && !$current_user->get('field_organisation')->isEmpty()) {
            $user_org_id = $current_user->get('field_organisation')->getValue()[0]['target_id'];
            $service_organisation = $webform_submission->getData()['organisation'];
            if ($user_org_id != $service_organisation) {
              unset($view->result[$key]);
            }
          }
        }
      }
    }

    // Unset rows that are not in review workflow states as per roles.
    // @todo replace this code with query alter.
    if ($view->id() == 'manage_in_review_webform_services_listing') {
      foreach ($view->result as $key => $row) {
        $sid = $row->sid;
        $webformSubmission = \Drupal::entityTypeManager()->getStorage('webform_submission')->load($sid);
        $state = $webformSubmission->getData()['erpw_workflow']['workflow_state'];
        $current_user = User::load(\Drupal::currentUser()->id());

        // Get the user's roles.
        $roles = $current_user->getRoles();
        if (in_array('service_provider_focal_point', $roles)) {
          if ($state != 'in_review_with_focal_point') {
            unset($view->result[$key]);
          }
        }
        elseif (in_array('country_admin', $roles) || in_array('interagency_gbv_coordinator', $roles)) {
          if ($state != 'in_review') {
            unset($view->result[$key]);
          }
        }
        elseif (in_array('administrator', $roles) || in_array('super_admin', $roles)) {
          if ($state != 'in_review_with_focal_point' && $state != 'in_review') {
            unset($view->result[$key]);
          }
        }
        else {
          unset($view->result[$key]);
        }
      }
    }

    if ($view->id() == 'service_based_service_providers_listing') {
      foreach ($view->result as $key => $row) {
        $c = 0;
        $sid = $row->sid;
        $webformSubmission = \Drupal::entityTypeManager()->getStorage('webform_submission')->load($sid);
        $webformID = $webformSubmission->get('webform_id')->getValue()[0]['target_id'];
        $webform = \Drupal::entityTypeManager()->getStorage('webform')->load($webformID);
        $tpa = $webform->getThirdPartySetting('erpw_webform', 'webform_service_type_map');
        if (!is_null($tpa)) {
          $currentRequest = \Drupal::request();
          // Get the current page URL.
          $currentUrl = $currentRequest->getRequestUri();
          $stID = explode('/', $currentUrl)[3];
          foreach ($tpa as $domain => $value) {
            $servicetypeID = $value[0];
            if ($stID != $servicetypeID) {
              unset($view->result[$key]);
            }
          }
        }
      }
    }
    // Unset rows that are do not have domain specific
    // access for the current user.
    foreach ($view->result as $key => $row) {
      $c = 0;
      $sid = $row->sid;
      $webformSubmission = \Drupal::entityTypeManager()->getStorage('webform_submission')->load($sid);
      $webformID = $webformSubmission->get('webform_id')->getValue()[0]['target_id'];
      $webform = \Drupal::entityTypeManager()->getStorage('webform')->load($webformID);
      $tpa = $webform->getThirdPartySetting('erpw_webform', 'webform_service_type_map');
      if (!is_null($tpa)) {
        foreach ($user_roles as $key_r => $role) {
          if ($view->id() == 'service_based_service_providers_listing') {
            $activeDomain = \Drupal::service('domain.negotiator')->getActiveDomain()->id();
            if (array_key_exists($activeDomain, $tpa)) {
              $c++;
            }
          }
          else {
            if ($role == 'super_admin' || $role == 'administrator') {
              return;
            }
            else {
              foreach ($domainAccess as $domain) {
                if (array_key_exists($domain['target_id'], $tpa)) {
                  $c++;
                }
              }
            }
          }
        }
        if ($c == 0) {
          unset($view->result[$key]);
        }
      }
    }
  }
  return $view;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function erpw_webform_theme_suggestions_views_view_fields_alter(array &$suggestions, array $variables) {
  if (isset($variables['view'])) {
    $suggestions[] = 'views_view_fields__' . $variables['view']->storage->id();
  }
}

/**
 * Implements hook_preprocess_views_view_fields() for views-view-fields.html.twig.
 */
function erpw_webform_preprocess_views_view_fields(&$variables) {
  // Get the fields for the current View.
  if ($variables['view']->storage->id() == 'manage_webform_services' || $variables['view']->storage->id() == 'service_based_service_providers_listing' || $variables['view']->storage->id() == 'webform_submissions' || $variables['view']->storage->id() == 'manage_in_review_webform_services_listing') {
    $sid = $variables['row']->sid;
    $webformSubmission = \Drupal::entityTypeManager()->getStorage('webform_submission')->load($sid);
    $webformID = $webformSubmission->get('webform_id')->getValue()[0]['target_id'];
    $webform = \Drupal::entityTypeManager()->getStorage('webform')->load($webformID);
    $tpa = $webform->getThirdPartySetting('erpw_webform', 'webform_service_type_map');
    // Access view rules.
    $userRoles = \Drupal::currentUser()->getRoles();
    $elements = $webform->getElementsDecoded();
    $allowed_view_fields = [];
    $label = '';
    foreach ($elements as $key => $element) {
      if ($key == 'step_1_add_service_details' || $key == 'step_2_contact_fields') {
        foreach ($element as $vkey => $value) {
          if (isset($value['#title'])) {
            if ($vkey == 'organisation') {
              $label = 'webform_submission_organisation_field';
            }
            elseif ($vkey == 'field_name_of_the_focal_point') {
              $label = 'webform_submission_focal_point_field';
            }
            elseif ($vkey == 'field_phone_number_of_focal_poin') {
              $label = 'webform_submission_hotline_contact_field';
            }
            elseif ($vkey == 'location') {
              $label = 'webform_submission_location_field';
            }
            elseif ($vkey == 'field_mode') {
              $label = 'webform_submission_mode_field';
            }
            else {
              $label = $vkey;
            }
            if (isset($value['#access_view_roles'])) {
              $counter = 0;
              foreach ($value['#access_view_roles'] as $allowedRole) {
                if (in_array($allowedRole, array_values($userRoles))) {
                  $counter++;
                }
                if ($counter != 0) {
                  $allowed_view_fields[$label] = 'TRUE';
                }
                else {
                  $allowed_view_fields[$label] = 'FALSE';
                }
              }
            }
            else {
              $allowed_view_fields[$label] = 'TRUE';
            }
          }
        }
      }
      if ($key == 'organisation') {
        $label = 'webform_submission_organisation_field';
      }
      elseif ($key == 'field_name_of_the_focal_point') {
        $label = 'webform_submission_focal_point_field';
      }
      elseif ($key == 'field_phone_number_of_focal_poin') {
        $label = 'webform_submission_hotline_contact_field';
      }
      elseif ($key == 'location') {
        $label = 'webform_submission_location_field';
      }
      elseif ($key == 'field_mode') {
        $label = 'webform_submission_mode_field';
      }
      else {
        $label = $key;
      }
      if (isset($element['#access_view_roles'])) {
        $counter = 0;
        foreach ($element['#access_view_roles'] as $allowedRole) {
          if (in_array($allowedRole, array_values($userRoles))) {
            $counter++;
          }
          if ($counter != 0) {
            $allowed_view_fields[$label] = 'TRUE';
          }
          else {
            $allowed_view_fields[$label] = 'FALSE';
          }
        }
      }
      else {
        $allowed_view_fields[$label] = 'TRUE';
      }
    }
    $variables['access_view_roles'] = $allowed_view_fields;
    foreach ($tpa as $settings) {
      if ($settings[0] != NULL) {
        $servicetype = \Drupal::entityTypeManager()->getStorage('node')->load(intval($settings[0]));
        $variables['servicetype'] = $servicetype->get('title')->getValue()[0]['value'];
        $variables['servicetype_color'] = $servicetype->get('field_service_type_color')->getValue()[0]['color'];
        $variables['servicetype_icon'] = $servicetype->get('field_service_type_icon')->getValue()[0]['value'];
        $variables['organisation'] = $variables['row']->_entity->getData()['organisation'] == NULL ? 'not available' : \Drupal::entityTypeManager()->getStorage('node')->load($variables['row']->_entity->getData()['organisation'])->get('title')->getValue()[0]['value'];
        $variables['sid'] = $variables['row']->sid;
        $variables['edit_url'] = Url::fromRoute('entity.webform_submission.edit_form', [
          'webform' => $webformID,
          'webform_submission' => $variables['row']->sid,
        ])->toString();
        $variables['view_url'] = Url::fromRoute('erpw_webform.service_content', ['webform_submission' => intval($variables['sid'])]);
        $variables['moderate_url'] = Url::fromRoute('erpw_webform.service_moderate_content', ['webform_submission' => intval($variables['sid'])]);
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for page_title template.
 */
function erpw_webform_preprocess_page_title(&$variables) {
  $route_match = \Drupal::routeMatch();
  if ($route_match->getRouteName() === 'view.service_based_service_providers_listing.page_1') {
    $nodeID = $route_match->getParameter('node');
    $node = \Drupal::entityTypeManager()->getStorage('node')->load($nodeID);
    if ($node->bundle() === 'service_type') {
      $variables['title'] = t('@title', [
        '@title' => $node->getTitle(),
      ]);
    }
  }
  if ($route_match->getRouteName() === 'entity.webform.collection') {
    $variables['title'] = t('@title', [
      '@title' => t('Service Forms Configuration'),
    ]);
  }

}

/**
 * Implements hook_webform_submission_presave().
 */
function erpw_webform_webform_submission_presave($webform_submission) {
  $values = $webform_submission->getData();
  $composite_value = $values['location'];
  $last_non_empty_value = '';
  if (is_array($composite_value)) {
    foreach (array_reverse($composite_value) as $value) {
      if (!empty($value)) {
        $last_non_empty_value = $value;
        break;
      }
    }
  }
  $values['location']['location_tid'] = $last_non_empty_value;
  $values['orignal_data'] = json_encode($webform_submission->getOriginalData());
  $webformID = $webform_submission->get('webform_id')->getValue()[0]['target_id'];
  $webform = \Drupal::entityTypeManager()->getStorage('webform')->load($webformID);
  $tpa = $webform->getThirdPartySetting('erpw_webform', 'webform_service_type_map');
  foreach ($tpa as $domain => $arr) {
    $values['submission_domain'] = $domain;
    $values['service_type'] = $arr[0];
  }
  $webform_submission->setData($values);
}

/**
 * Implements hook_local_tasks_alter().
 */
function erpw_webform_menu_local_actions_alter(&$local_tasks) {
  // Check if the contributed module's link needs to be altered.
  $local_tasks['entity.webform.add_form']['title'] = t('Add new service form');
  $local_tasks['entity.webform.add_form']['route_name'] = 'entity.webform.templates';
}

/**
 * Implements hook_views_query_alter().
 *
 * @throws \Drupal\Component\Plugin\Exception\PluginException
 */
function erpw_webform_views_query_alter(ViewExecutable &$view, QueryPluginBase &$query) {
  $activeDomain = \Drupal::service('domain.negotiator')->getActiveDomain()->id();
  // Check if the current user has roles.
  if ($view->id() == 'webform_submissions') {
    $user = \Drupal::currentUser();
    $user_roles = $user->getRoles();
    // @todo draft submissions should be displayed of own submitted data.
    if (!in_array('service_provider_staff', $user_roles)) {
      // Remove the filter from the view query.
      $conditions = &$query->where;
      foreach ($conditions as $index => $condition) {
        if ($condition[0]['field'] == 'users_field_data_webform_submission.uid = :users_field_data_uid') {
          unset($query->where[$index]);
        }
      }
    }
    erpw_webform_add_webform_submission_add_where_join($query, $activeDomain, 'domain');
  }
  // Unset rows that are not in approve workflow state.
  if ($view->id() == 'manage_webform_services' || $view->id() == 'service_based_service_providers_listing') {
    // $query->addWhere(1, 'webform_submission_data_workflow.property', 'workflow_state', '=');
    if ($view->id() == 'service_based_service_providers_listing') {
      if ($service_type = \Drupal::routeMatch()->getRawParameter('node')) {
        // Service type Join.
        erpw_webform_add_webform_submission_add_where_join($query, $service_type, 'st');
      }
      // Domain Join.
      erpw_webform_add_webform_submission_add_where_join($query, $activeDomain, 'domain');

      // Workflow join.
      erpw_webform_add_webform_submission_add_where_join($query, 'approve', 'workflow');
    }
    else {
      // Domain Join.
      erpw_webform_add_webform_submission_add_where_join($query, $activeDomain, 'domain');

      // Workflow join.
      erpw_webform_add_webform_submission_add_where_join($query, 'approve', 'workflow');
    }
  }
  // Unset rows that are not in review workflow states as per roles.
  if ($view->id() == 'manage_in_review_webform_services_listing') {
    $roles = \Drupal::currentUser()->getRoles();
    erpw_webform_add_webform_submission_add_where_join($query, $activeDomain, 'domain');
    if (in_array('service_provider_focal_point', $roles)) {
      erpw_webform_add_webform_submission_add_where_join($query, 'in_review_with_focal_point', 'workflow');
    }
    elseif (in_array('country_admin', $roles) || in_array('interagency_gbv_coordinator', $roles)) {
      erpw_webform_add_webform_submission_add_where_join($query, 'in_review', 'workflow');
    }
    elseif (in_array('administrator', $roles) || in_array('super_admin', $roles)) {
      erpw_webform_add_webform_submission_add_where_join($query, ['in_review', 'in_review_with_focal_point'], 'workflow', 'IN');
    }
  }
}

/**
 * Add where condition to query on webform_submission_data.
 *
 * This function adds a relationship to webform_submission_data using on alias
 * so that we can filter webform submission fields properly.
 *
 * @param \Drupal\views\Plugin\views\query\QueryPluginBase $query
 *   The Query object.
 * @param mixed $column_value
 *   Either an array or string.
 * @param string $alias_slug
 *   The alias slug to keep alias table alias unique.
 * @param string $op
 *   The sql query operation.
 *
 * @return void
 *
 * @throws \Drupal\Component\Plugin\Exception\PluginException
 */
function erpw_webform_add_webform_submission_add_where_join(QueryPluginBase &$query, mixed $column_value, string $alias_slug, string $op = '=') {
  $configuration = [
    'table' => 'webform_submission_data',
    'field' => 'sid',
    'left_table' => 'webform_submission',
    'left_field' => 'sid',
    'operator' => '=',
  ];
  $join = Views::pluginManager('join')->createInstance('standard', $configuration);
  $query->addRelationship('webform_submission_data_' . $alias_slug, $join, 'webform_submission_data');
  $query->addWhere(1, "webform_submission_data_$alias_slug.value", $column_value, $op);
}
